{
  "api/DocFXSample.BaseClass.html": {
    "href": "api/DocFXSample.BaseClass.html",
    "title": "Class BaseClass | mysite",
    "keywords": "Class BaseClass Namespace DocFXSample Assembly ConsoleApp1.dll 基底クラス。 public class BaseClass Inheritance object BaseClass Derived DerivedClass Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BaseClass() public BaseClass() Fields sum 基底クラスのメンバ。@tes_tag public int sum Field Value int Methods func() 基底クラスの仮想メソッド。 sumを+1して返す。link test public virtual int func() Returns int sumの値"
  },
  "api/DocFXSample.DerivedClass.html": {
    "href": "api/DocFXSample.DerivedClass.html",
    "title": "Class DerivedClass | mysite",
    "keywords": "Class DerivedClass Namespace DocFXSample Assembly ConsoleApp1.dll 継承クラス。 public class DerivedClass : BaseClass Inheritance object BaseClass DerivedClass Inherited Members BaseClass.sum object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DerivedClass() public DerivedClass() Methods func() 仮想メソッド。 基底クラスと異なりsumを+2して返す。 public override int func() Returns int sumの値(derived)"
  },
  "api/DocFXSample.EnumTest.html": {
    "href": "api/DocFXSample.EnumTest.html",
    "title": "Enum EnumTest | mysite",
    "keywords": "Enum EnumTest Namespace DocFXSample Assembly ConsoleApp1.dll enumのテスト。 public enum EnumTest Extension Methods EnumTestExt.Name(EnumTest) Fields Elem1 = 0 要素1。 Elem2 = 1 要素2。 Elem3 = 2 要素3。"
  },
  "api/DocFXSample.EnumTestExt.html": {
    "href": "api/DocFXSample.EnumTestExt.html",
    "title": "Class EnumTestExt | mysite",
    "keywords": "Class EnumTestExt Namespace DocFXSample Assembly ConsoleApp1.dll enumの拡張メソッドテスト。 public static class EnumTestExt Inheritance object EnumTestExt Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Name(EnumTest) EnumTest.Nameの拡張メソッド。 public static string Name(this EnumTest value) Parameters value EnumTest EnumTest。 Returns string EnumTestの値に応じた文字列。"
  },
  "api/DocFXSample.Program.html": {
    "href": "api/DocFXSample.Program.html",
    "title": "Class Program | mysite",
    "keywords": "Class Program Namespace DocFXSample Assembly ConsoleApp1.dll 実行クラス。 public class Program Inheritance object Program Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Program() public Program()"
  },
  "api/DocFXSample.html": {
    "href": "api/DocFXSample.html",
    "title": "Namespace DocFXSample | mysite",
    "keywords": "Namespace DocFXSample Classes BaseClass 基底クラス。 DerivedClass 継承クラス。 EnumTestExt enumの拡張メソッドテスト。 Program 実行クラス。 Enums EnumTest enumのテスト。"
  },
  "api/MapQuest.Collections.BoolArray.html": {
    "href": "api/MapQuest.Collections.BoolArray.html",
    "title": "Class BoolArray | mysite",
    "keywords": "Class BoolArray Namespace MapQuest.Collections Assembly MapQuest.Core.dll タイプセーフである System.Boolean の配列を定義します。 public sealed class BoolArray : ICloneable, ISerializable, IEnumerable<bool>, IEnumerable Inheritance object BoolArray Implements ICloneable ISerializable IEnumerable<bool> IEnumerable Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() Constructors BoolArray() 空で、デフォルトの初期量を備えた、 BoolArray クラスの新しいインスタンスを初期化します。 public BoolArray() Remarks 詳細については System.Collections.ArrayList() を参照してください。 BoolArray(BoolArray) 指定した BoolArray からコピーした System.Boolean を格納し、 コピーされる System.Boolean の数と同じ初期量を備えた、 BoolArray クラスの新しいインスタンスを初期化します。 public BoolArray(BoolArray c) Parameters c BoolArray 新しい配列に要素が追加された BoolArray 。 Remarks 詳細については System.Collections.ArrayList(ICollection) を参照してください。 Exceptions ArgumentNullException c が null 参照 (Visual Basic では Nothing) です。 BoolArray(bool[]) 指定した System.Boolean の配列からコピーした System.Boolean を格納し、 コピーされる System.Boolean の数と同じ初期量を備えた、 BoolArray クラスの新しいインスタンスを初期化します。 public BoolArray(bool[] a) Parameters a bool[] 新しい配列に要素が追加された BoolArray 。 Remarks 詳細については System.Collections.ArrayList(ICollection) を参照してください。 Exceptions ArgumentNullException c が null 参照 (Visual Basic では Nothing) です。 BoolArray(int) 空で、指定した初期量を備えた、 BoolArray クラスの新しいインスタンスを初期化します。 public BoolArray(int capacity) Parameters capacity int 初期状態の新しい配列に格納できる System.Boolean の数。 Remarks 詳細については System.Collections.ArrayList(Int32) を参照してください。 Exceptions ArgumentOutOfRangeException capacity が 0 未満です。 Properties Capacity BoolArray に格納できる要素の数を取得または設定します。 public int Capacity { get; set; } Property Value int BoolArray に格納できる要素の数。 0 が指定された場合は規定値を設定します。 現在設定されている数より小さい場合は例外を発行します。 Remarks 詳細については System.Collections.ArrayList.Capacity を参照してください。 Exceptions ArgumentOutOfRangeException Capacity が Count より小さい値に設定されています。 Count BoolArray に格納されている System.Boolean の数を取得します。 public int Count { get; } Property Value int BoolArray に格納されている要素の数。 Remarks 詳細については System.Collections.ArrayList.Count を参照してください。 IsFixedSize BoolArray が固定サイズかどうかを示す値を取得します。 public bool IsFixedSize { get; } Property Value bool 現在の実装では必ず false です。 Remarks 詳細については System.Collections.ArrayList.IsFixedSize を参照してください。 IsReadOnly BoolArray が読み取り専用かどうかを示す値を取得します。 public bool IsReadOnly { get; } Property Value bool 現在の実装では必ず false です。 Remarks 詳細については System.Collections.ArrayList.IsReadOnly を参照してください。 IsSynchronized BoolArray へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。 <p><!-- Non Support 2005/01/20 --> このプロパティは、現在サポートしていません。 </p> public bool IsSynchronized { get; } Property Value bool BoolArray へのアクセスが同期されている (スレッド セーフである) 場合は true 。 それ以外の場合は false 。 Remarks 詳細については System.Collections.ArrayList.IsSynchronized を参照してください。 this[int] 指定された System.Boolean を取得または設定します。 public bool this[int index] { get; set; } Parameters index int 取得または設定する要素の、0 から始まるインデックス番号。 Property Value bool 指定したインデックスにある System.Boolean 。 Remarks 詳細については System.Collections.IList.this を参照してください。 Exceptions ArgumentOutOfRangeException index が 0 未満です。 または index が Count 以上です。 SyncRoot BoolArray へのアクセスを同期するために使用できるオブジェクトを取得します。 <p><!-- Non Support 2005/01/20 --> このプロパティは、現在サポートしていません。 </p> public object SyncRoot { get; } Property Value object BoolArray へのアクセスを同期するために使用できるオブジェクト。 Remarks 詳細については System.Collections.ArrayList.SyncRoot を参照してください。 Methods Add(bool) BoolArray の末尾に System.Boolean を追加します。 public int Add(bool item) Parameters item bool BoolArray の末尾に追加する System.Boolean 。 Returns int item が追加された位置の BoolArray インデックス。 Remarks 詳細については System.Collections.ArrayList.Add を参照してください。 AddRange(BoolArray) 指定した BoolArray の要素をコピーします。 public int AddRange(BoolArray x) Parameters x BoolArray コレクションに追加するオブジェクトを格納する BoolArray 。 Returns int BoolArray に格納されている要素の数。 Remarks 詳細については System.Collections.ArrayList.AddRange を参照してください。 Exceptions ArgumentNullException x が null 参照 (Visual Basic では Nothing) です。 AddRange(bool[]) 指定した System.Boolean 配列の要素をコピーします。 public int AddRange(bool[] x) Parameters x bool[] コレクションに追加するオブジェクトを格納する System.Boolean 型の配列。 Returns int BoolArray に格納されている要素の数。 Remarks 詳細については System.Collections.ArrayList.AddRange を参照してください。 Exceptions ArgumentNullException x が null 参照 (Visual Basic では Nothing) です。 Clear() BoolArray からすべての System.Boolean を削除します。 public void Clear() Remarks 詳細については System.Collections.ArrayList.Clear を参照してください。 Clone() BoolArray の簡易コピーを生成します。 public object Clone() Returns object BoolArray の簡易コピーである新しいオブジェクト。 Contains(bool) ある System.Boolean が BoolArray 内に存在するかどうかを判断します。 public bool Contains(bool item) Parameters item bool BoolArray 内で検索される System.Boolean 。 Returns bool item が BoolArray に存在する場合は true 。それ以外の場合は false 。 Remarks 詳細については System.Collections.ArrayList.Contains を参照してください。 CopyTo(bool[]) BoolArray 全体を互換性のある 1 次元の System.Boolean にコピーします。コピー操作は、コピー先の配列の先頭から始まります。 public void CopyTo(bool[] array) Parameters array bool[] BoolArray から要素がコピーされる System.Boolean の 1 次元配列。この配列には、0 から始まるインデックス番号が必要です。 Remarks 詳細については System.Collections.ArrayList.CopyTo を参照してください。 Exceptions ArgumentNullException array が null 参照 (Visual Basic では Nothing) です。 ArgumentException array が多次元です。 </p> または コピー元の BoolArray の System.Boolean 数が、コピー先の array に格納できる要素の数を超えています。 </p> CopyTo(bool[], int) BoolArray 全体を互換性のある 1 次元の System.Boolean にコピーします。コピー操作は、コピー先の配列の指定したインデックスから始まります。 public void CopyTo(bool[] array, int start) Parameters array bool[] BoolArray から要素がコピーされる System.Boolean の 1 次元配列。この配列には、0 から始まるインデックス番号が必要です。 start int コピーの開始位置となる、 0 から始まるインデックス番号。 Remarks 詳細については System.Collections.ArrayList.CopyTo を参照してください。 Exceptions ArgumentNullException array が null 参照 (Visual Basic では Nothing) です。 ArgumentOutOfRangeException start が 0 未満です。 ArgumentException array が多次元です。 </p> または start が array の長さ以上です。 </p> または コピー元の BoolArray の System.Boolean 数が、 start からコピー先の array の末尾までに格納できる数を超えています。 </p> GetEnumerator() public IEnumerator<bool> GetEnumerator() Returns IEnumerator<bool> GetObjectData(SerializationInfo, StreamingContext) SerializationInfo に、オブジェクトをシリアル化するために必要なデータを設定します。 public void GetObjectData(SerializationInfo info, StreamingContext context) Parameters info SerializationInfo データを読み込む先の SerializationInfo 。 context StreamingContext このシリアル化のシリアル化先 (StreamingContext を参照)。 IndexOf(bool) 指定した System.Boolean を検索し、 BoolArray 内で最初に見つかった位置の 0 から始まるインデックスを返します。 public int IndexOf(bool item) Parameters item bool BoolArray 内で検索される System.Boolean 。 Returns int BoolArray 内で item が見つかった場合は、最初に見つかった位置の 0 から始まるインデックス番号。 それ以外の場合は -1。 Remarks 詳細については System.Collections.ArrayList.IndexOf を参照してください。 Insert(int, bool) BoolArray 内の指定したインデックスの位置に要素を挿入します。 public void Insert(int index, bool item) Parameters index int item を挿入する位置の、0 から始まるインデックス番号。 item bool 挿入する System.Boolean 。 Remarks 詳細については System.Collections.ArrayList.Insert を参照してください。 Exceptions ArgumentOutOfRangeException index が 0 未満です。 </p> または index が Count より大きい値です。 </p> Remove(bool) BoolArray 内から指定された System.Boolean を削除します。 public void Remove(bool item) Parameters item bool BoolArray から削除する System.Boolean 。 Remarks 詳細については System.Collections.ArrayList.Remove を参照してください。 Exceptions ArgumentException item が配列内に見つかりません。 RemoveAt(int) BoolArray の指定したインデックスにある System.Boolean を削除します。 public void RemoveAt(int index) Parameters index int 削除する System.Boolean の、0 から始まるインデックス番号。 Remarks 詳細については System.Collections.ArrayList.RemoveAt を参照してください。 Exceptions ArgumentOutOfRangeException index が 0 未満です。 </p> または index が Count 以上です。 </p> TrimToSize() 容量を BoolArray 内にある実際の System.Boolean 数に設定します。 public void TrimToSize() Remarks 詳細については System.Collections.ArrayList.TrimToSize を参照してください。"
  },
  "api/MapQuest.Collections.CacheBase.html": {
    "href": "api/MapQuest.Collections.CacheBase.html",
    "title": "Class CacheBase | mysite",
    "keywords": "Class CacheBase Namespace MapQuest.Collections Assembly MapQuest.Core.dll オンメモリで動作する、典型的なキャッシュの実装の基礎となるクラス実装を提供します。 public class CacheBase : IDictionary, ICollection, IEnumerable Inheritance object CacheBase Implements IDictionary ICollection IEnumerable Derived DisposableCacheBase Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors CacheBase(int) 大文字と小文字を区別する CacheBase クラスの新しいインスタンスを、キャッシュ項目の最大登録数を指定して初期化します。 public CacheBase(int capacity) Parameters capacity int キャッシュ項目の登録最大数。 CacheBase(int, bool) CacheBase クラスの新しいインスタンスを、キャッシュ項目の最大登録数、大文字と小文字の区別を指定して初期化します。 public CacheBase(int capacity, bool caseInsensitive) Parameters capacity int キャッシュ項目の登録最大数。 caseInsensitive bool キーの大文字と小文字の区別。 Fields Dictionary protected HybridDictionary Dictionary Field Value HybridDictionary Properties Count CacheBase に格納されているキーと値の組み合わせの数を取得します。 public virtual int Count { get; } Property Value int IsFixedSize CacheBase が固定サイズかどうかを示す値を取得します。 public virtual bool IsFixedSize { get; } Property Value bool IsReadOnly CacheBase が読み取り専用かどうかを示す値を取得します。 public virtual bool IsReadOnly { get; } Property Value bool IsSynchronized CacheBase が同期されている (スレッド セーフである) かどうかを示す値を取得します。 public virtual bool IsSynchronized { get; } Property Value bool this[string] 指定したキーに関連付けられている値を取得または設定します。 [C#] C# では、このプロパティは CacheBase クラスのインデクサになります。 public virtual object this[string key] { get; set; } Parameters key string 値を取得または設定する対象のキー。 Property Value object Keys CacheBase 内のキーを格納している ICollection を取得します。 public virtual ICollection Keys { get; } Property Value ICollection MaxCapacity このインスタンスの最大容量を設定または取得します。 public virtual int MaxCapacity { get; set; } Property Value int このインスタンスの最大容量。 Remarks このプロパティを設定すると、それまで保持していたキャッシュはクリアされます。 現在と同じ値を設定した場合は何も行われません。 SyncRoot CacheBase へのアクセスを同期するために使用できるオブジェクトを取得します。 public virtual object SyncRoot { get; } Property Value object Values CacheBase 内の値を格納している ICollection を取得します。 public virtual ICollection Values { get; } Property Value ICollection Methods Add(string, object) 指定したキーおよび値を持つエントリを CacheBase に追加します。 public virtual void Add(string key, object value) Parameters key string 追加するエントリのキー。 value object 追加するエントリの値。値は null 参照 (Visual Basic では Nothing) に設定できます。 Clear() CacheBase からすべてのエントリを削除します。 public virtual void Clear() Contains(string) CacheBase に特定のキーが格納されているかどうかを判断します。 public virtual bool Contains(string key) Parameters key string CacheBase 内で検索されるキー。 Returns bool 指定したキーを持つエントリが CacheBase に格納されている場合は true 。それ以外の場合は false 。 CopyTo(Array, int) 1 次元の Array インスタンスの指定したインデックスに CacheBase のエントリをコピーします。 public virtual void CopyTo(Array array, int index) Parameters array Array CacheBase から DictionaryEntry オブジェクトがコピーされる 1 次元の Array 。 Array には、0 から始まるインデックス番号が必要です。 index int コピーの開始位置となる、array の 0 から始まるインデックス番号。 GetEnumerator() CacheBase を反復処理できる IDictionaryEnumerator を返します。 public virtual IDictionaryEnumerator GetEnumerator() Returns IDictionaryEnumerator CacheBase の IDictionaryEnumerator 。 Remove(string) 指定したキーを持つエントリを CacheBase から削除します。 public virtual void Remove(string key) Parameters key string 削除するエントリのキー。"
  },
  "api/MapQuest.Collections.DisposableCacheBase.html": {
    "href": "api/MapQuest.Collections.DisposableCacheBase.html",
    "title": "Class DisposableCacheBase | mysite",
    "keywords": "Class DisposableCacheBase Namespace MapQuest.Collections Assembly MapQuest.Core.dll オンメモリで動作する、典型的なキャッシュの実装の基礎となるクラス実装を提供します。 キャッシュ対象のオブジェクトが IDisposable を継承していることを考慮します。 public class DisposableCacheBase : CacheBase, IDictionary, ICollection, IEnumerable, IDisposable Inheritance object CacheBase DisposableCacheBase Implements IDictionary ICollection IEnumerable IDisposable Inherited Members CacheBase.Dictionary object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors DisposableCacheBase(int, bool) DisposableCacheBase クラスの新しいインスタンスを、キャッシュ項目の最大登録数、キャッシュ項目の所有権を指定して初期化します。 public DisposableCacheBase(int capacity, bool ownsObjects) Parameters capacity int キャッシュ項目の登録最大数。 ownsObjects bool キャッシュ項目の所有権。 DisposableCacheBase(int, bool, bool) DisposableCacheBase クラスの新しいインスタンスを、キャッシュ項目の最大登録数、大文字と小文字の区別、キャッシュ項目の所有権を指定して初期化します。 public DisposableCacheBase(int capacity, bool caseInsensitive, bool ownsObjects) Parameters capacity int キャッシュ項目の登録最大数。 caseInsensitive bool キーの大文字と小文字の区別。 ownsObjects bool キャッシュ項目の所有権。 Properties Count CacheBase に格納されているキーと値の組み合わせの数を取得します。 public override int Count { get; } Property Value int IsFixedSize CacheBase が固定サイズかどうかを示す値を取得します。 public override bool IsFixedSize { get; } Property Value bool IsReadOnly CacheBase が読み取り専用かどうかを示す値を取得します。 public override bool IsReadOnly { get; } Property Value bool IsSynchronized CacheBase が同期されている (スレッド セーフである) かどうかを示す値を取得します。 public override bool IsSynchronized { get; } Property Value bool this[string] 指定したキーに関連付けられている値を取得または設定します。 [C#] C# では、このプロパティは DisposableCacheBase クラスのインデクサになります。 キャッシュ項目の所有権を有する場合、キャッシュ項目の上書きを行う際に旧項目に対して IDisposable.Dispose() 呼び出しを行います。 public override object this[string key] { get; set; } Parameters key string 値を取得または設定する対象のキー。 Property Value object Keys CacheBase 内のキーを格納している ICollection を取得します。 public override ICollection Keys { get; } Property Value ICollection MaxCapacity このインスタンスの最大容量を設定または取得します。 public override int MaxCapacity { get; set; } Property Value int このインスタンスの最大容量。 Remarks このプロパティを設定すると、それまで保持していたキャッシュはクリアされます。 現在と同じ値を設定した場合は何も行われません。 SyncRoot CacheBase へのアクセスを同期するために使用できるオブジェクトを取得します。 public override object SyncRoot { get; } Property Value object Values CacheBase 内の値を格納している ICollection を取得します。 public override ICollection Values { get; } Property Value ICollection Methods Add(string, object) 指定したキーおよび値を持つエントリを CacheBase に追加します。 public override void Add(string key, object value) Parameters key string 追加するエントリのキー。 value object 追加するエントリの値。値は null 参照 (Visual Basic では Nothing) に設定できます。 Clear() DisposableCacheBase からすべてのエントリを削除します。 public override void Clear() Contains(string) CacheBase に特定のキーが格納されているかどうかを判断します。 public override bool Contains(string key) Parameters key string CacheBase 内で検索されるキー。 Returns bool 指定したキーを持つエントリが CacheBase に格納されている場合は true 。それ以外の場合は false 。 CopyTo(Array, int) 1 次元の Array インスタンスの指定したインデックスに CacheBase のエントリをコピーします。 public override void CopyTo(Array array, int index) Parameters array Array CacheBase から DictionaryEntry オブジェクトがコピーされる 1 次元の Array 。 Array には、0 から始まるインデックス番号が必要です。 index int コピーの開始位置となる、array の 0 から始まるインデックス番号。 ~DisposableCacheBase() ガベージ コレクタが DisposableCacheBase を消去するときに、リソースを解放し、その他のクリーン操作を確実に実行します。 protected ~DisposableCacheBase() GetEnumerator() CacheBase を反復処理できる IDictionaryEnumerator を返します。 public override IDictionaryEnumerator GetEnumerator() Returns IDictionaryEnumerator CacheBase の IDictionaryEnumerator 。 Remove(string) 指定したキーを持つエントリを DisposableCacheBase から削除します。 キャッシュ項目の所有権を有する場合、IDisposable.Dispose() 呼び出しを行います。 public override void Remove(string key) Parameters key string 削除するエントリのキー。"
  },
  "api/MapQuest.Collections.DoubleArray.html": {
    "href": "api/MapQuest.Collections.DoubleArray.html",
    "title": "Class DoubleArray | mysite",
    "keywords": "Class DoubleArray Namespace MapQuest.Collections Assembly MapQuest.Core.dll タイプセーフである System.Double の配列を定義します。 public sealed class DoubleArray : ICloneable, IEnumerable<double>, IEnumerable Inheritance object DoubleArray Implements ICloneable IEnumerable<double> IEnumerable Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() Constructors DoubleArray() 空で、デフォルトの初期量を備えた、 DoubleArray クラスの新しいインスタンスを初期化します。 public DoubleArray() Remarks 詳細については System.Collections.ArrayList() を参照してください。 DoubleArray(DoubleArray) 指定した DoubleArray からコピーした System.Double を格納し、 コピーされる System.Double の数と同じ初期量を備えた、 DoubleArray クラスの新しいインスタンスを初期化します。 public DoubleArray(DoubleArray c) Parameters c DoubleArray 新しい配列に要素が追加された DoubleArray 。 Remarks 詳細については System.Collections.ArrayList(ICollection) を参照してください。 Exceptions ArgumentNullException c が null 参照 (Visual Basic では Nothing) です。 DoubleArray(double[]) 指定した System.Double の配列からコピーした System.Double を格納し、 コピーされる System.Double の数と同じ初期量を備えた、 DoubleArray クラスの新しいインスタンスを初期化します。 public DoubleArray(double[] a) Parameters a double[] 新しい配列に要素が追加された DoubleArray 。 Remarks 詳細については System.Collections.ArrayList(ICollection) を参照してください。 Exceptions ArgumentNullException c が null 参照 (Visual Basic では Nothing) です。 DoubleArray(int) 空で、指定した初期量を備えた、 DoubleArray クラスの新しいインスタンスを初期化します。 public DoubleArray(int capacity) Parameters capacity int 初期状態の新しい配列に格納できる System.Double の数。 Remarks 詳細については System.Collections.ArrayList(X) を参照してください。 Exceptions ArgumentOutOfRangeException capacity が 0 未満です。 Properties Capacity DoubleArray に格納できる要素の数を取得または設定します。 public int Capacity { get; set; } Property Value int DoubleArray に格納できる要素の数。 0 が指定された場合は規定値を設定します。 現在設定されている数より小さい場合は例外を発行します。 Remarks 詳細については System.Collections.ArrayList.Capacity を参照してください。 Exceptions ArgumentOutOfRangeException Capacity が Count より小さい値に設定されています。 Count DoubleArray に格納されている System.Double の数を取得します。 public int Count { get; } Property Value int DoubleArray に格納されている要素の数。 Remarks 詳細については System.Collections.ArrayList.Count を参照してください。 IsFixedSize DoubleArray が固定サイズかどうかを示す値を取得します。 public bool IsFixedSize { get; } Property Value bool 現在の実装では必ず false です。 Remarks 詳細については System.Collections.ArrayList.IsFixedSize を参照してください。 IsReadOnly DoubleArray が読み取り専用かどうかを示す値を取得します。 public bool IsReadOnly { get; } Property Value bool 現在の実装では必ず false です。 Remarks 詳細については System.Collections.ArrayList.IsReadOnly を参照してください。 IsSynchronized DoubleArray へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。 <p><!-- Non Support 2005/01/20 --> このプロパティは、現在サポートしていません。 </p> public bool IsSynchronized { get; } Property Value bool DoubleArray へのアクセスが同期されている (スレッド セーフである) 場合は true 。 それ以外の場合は false 。 Remarks 詳細については System.Collections.ArrayList.IsSynchronized を参照してください。 this[int] 指定された System.Double を取得または設定します。 public double this[int index] { get; set; } Parameters index int 取得または設定する要素の、0 から始まるインデックス番号。 Property Value double 指定したインデックスにある System.Double 。 Remarks 詳細については System.Collections.IList.this を参照してください。 Exceptions ArgumentOutOfRangeException index が 0 未満です。 または index が Count 以上です。 SyncRoot DoubleArray へのアクセスを同期するために使用できるオブジェクトを取得します。 <p><!-- Non Support 2005/01/20 --> このプロパティは、現在サポートしていません。 </p> public object SyncRoot { get; } Property Value object DoubleArray へのアクセスを同期するために使用できるオブジェクト。 Remarks 詳細については System.Collections.ArrayList.SyncRoot を参照してください。 Methods Add(double) DoubleArray の末尾に System.Double を追加します。 public int Add(double item) Parameters item double DoubleArray の末尾に追加する System.Double 。 Returns int item が追加された位置の DoubleArray インデックス。 Remarks 詳細については System.Collections.ArrayList.Add を参照してください。 AddRange(DoubleArray) 指定した DoubleArray の要素をコピーします。 public int AddRange(DoubleArray x) Parameters x DoubleArray コレクションに追加するオブジェクトを格納する DoubleArray 。 Returns int DoubleArray に格納されている要素の数。 Remarks 詳細については System.Collections.ArrayList.AddRange を参照してください。 Exceptions ArgumentNullException x が null 参照 (Visual Basic では Nothing) です。 AddRange(double[]) 指定した System.Double 配列の要素をコピーします。 public int AddRange(double[] x) Parameters x double[] コレクションに追加するオブジェクトを格納する System.Double 型の配列。 Returns int DoubleArray に格納されている要素の数。 Remarks 詳細については System.Collections.ArrayList.AddRange を参照してください。 Exceptions ArgumentNullException x が null 参照 (Visual Basic では Nothing) です。 Clear() DoubleArray からすべての System.Double を削除します。 public void Clear() Remarks 詳細については System.Collections.ArrayList.Clear を参照してください。 Clone() DoubleArray の簡易コピーを生成します。 public object Clone() Returns object DoubleArray の簡易コピーである新しいオブジェクト。 Contains(double) ある System.Double が DoubleArray 内に存在するかどうかを判断します。 public bool Contains(double item) Parameters item double DoubleArray 内で検索される System.Double 。 Returns bool item が DoubleArray に存在する場合は true 。それ以外の場合は false 。 Remarks 詳細については System.Collections.ArrayList.Contains を参照してください。 CopyTo(double[]) DoubleArray 全体を互換性のある 1 次元の System.Double にコピーします。コピー操作は、コピー先の配列の先頭から始まります。 public void CopyTo(double[] array) Parameters array double[] DoubleArray から要素がコピーされる System.Double の 1 次元配列。この配列には、0 から始まるインデックス番号が必要です。 Remarks 詳細については System.Collections.ArrayList.CopyTo を参照してください。 Exceptions ArgumentNullException array が null 参照 (Visual Basic では Nothing) です。 ArgumentException array が多次元です。 </p> または コピー元の DoubleArray の System.Double 数が、コピー先の array に格納できる要素の数を超えています。 </p> CopyTo(double[], int) DoubleArray 全体を互換性のある 1 次元の System.Double にコピーします。コピー操作は、コピー先の配列の指定したインデックスから始まります。 public void CopyTo(double[] array, int start) Parameters array double[] DoubleArray から要素がコピーされる System.Double の 1 次元配列。この配列には、0 から始まるインデックス番号が必要です。 start int コピーの開始位置となる、 0 から始まるインデックス番号。 Remarks 詳細については System.Collections.ArrayList.CopyTo を参照してください。 Exceptions ArgumentNullException array が null 参照 (Visual Basic では Nothing) です。 ArgumentOutOfRangeException start が 0 未満です。 ArgumentException array が多次元です。 </p> または start が array の長さ以上です。 </p> または コピー元の DoubleArray の System.Double 数が、 start からコピー先の array の末尾までに格納できる数を超えています。 </p> GetEnumerator() public IEnumerator<double> GetEnumerator() Returns IEnumerator<double> IndexOf(double) 指定した System.Double を検索し、 DoubleArray 内で最初に見つかった位置の 0 から始まるインデックスを返します。 public int IndexOf(double item) Parameters item double DoubleArray 内で検索される System.Double 。 Returns int DoubleArray 内で item が見つかった場合は、最初に見つかった位置の 0 から始まるインデックス番号。 それ以外の場合は -1。 Remarks 詳細については System.Collections.ArrayList.IndexOf を参照してください。 Insert(int, double) DoubleArray 内の指定したインデックスの位置に要素を挿入します。 public void Insert(int index, double item) Parameters index int item を挿入する位置の、0 から始まるインデックス番号。 item double 挿入する System.Double 。 Remarks 詳細については System.Collections.ArrayList.Insert を参照してください。 Exceptions ArgumentOutOfRangeException index が 0 未満です。 </p> または index が Count より大きい値です。 </p> Remove(double) DoubleArray 内から指定された System.Double を削除します。 public void Remove(double item) Parameters item double DoubleArray から削除する System.Double 。 Remarks 詳細については System.Collections.ArrayList.Remove を参照してください。 Exceptions ArgumentException item が配列内に見つかりません。 RemoveAt(int) DoubleArray の指定したインデックスにある System.Double を削除します。 public void RemoveAt(int index) Parameters index int 削除する System.Double の、0 から始まるインデックス番号。 Remarks 詳細については System.Collections.ArrayList.RemoveAt を参照してください。 Exceptions ArgumentOutOfRangeException index が 0 未満です。 </p> または index が Count 以上です。 </p> ToArray() IntArray の要素を System.Double の配列として取得します。 public double[] ToArray() Returns double[] IntArray の要素を格納する System.Double 配列。 TrimToSize() 容量を DoubleArray 内にある実際の System.Double 数に設定します。 public void TrimToSize() Remarks 詳細については System.Collections.ArrayList.TrimToSize を参照してください。"
  },
  "api/MapQuest.Collections.FloatArray.html": {
    "href": "api/MapQuest.Collections.FloatArray.html",
    "title": "Class FloatArray | mysite",
    "keywords": "Class FloatArray Namespace MapQuest.Collections Assembly MapQuest.Core.dll タイプセーフである System.Single の配列を定義します。 public sealed class FloatArray : ICloneable, IEnumerable<float>, IEnumerable Inheritance object FloatArray Implements ICloneable IEnumerable<float> IEnumerable Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() Constructors FloatArray() 空で、デフォルトの初期量を備えた、 FloatArray クラスの新しいインスタンスを初期化します。 public FloatArray() Remarks 詳細については System.Collections.ArrayList() を参照してください。 FloatArray(FloatArray) 指定した FloatArray からコピーした System.Single を格納し、 コピーされる System.Single の数と同じ初期量を備えた、 FloatArray クラスの新しいインスタンスを初期化します。 public FloatArray(FloatArray c) Parameters c FloatArray 新しい配列に要素が追加された FloatArray 。 Remarks 詳細については System.Collections.ArrayList(ICollection) を参照してください。 Exceptions ArgumentNullException c が null 参照 (Visual Basic では Nothing) です。 FloatArray(int) 空で、指定した初期量を備えた、 FloatArray クラスの新しいインスタンスを初期化します。 public FloatArray(int capacity) Parameters capacity int 初期状態の新しい配列に格納できる System.Single の数。 Remarks 詳細については System.Collections.ArrayList(Int32) を参照してください。 Exceptions ArgumentOutOfRangeException capacity が 0 未満です。 FloatArray(float[]) 指定した System.Single の配列からコピーした System.Single を格納し、 コピーされる System.Single の数と同じ初期量を備えた、 FloatArray クラスの新しいインスタンスを初期化します。 public FloatArray(float[] a) Parameters a float[] 新しい配列に要素が追加された FloatArray 。 Remarks 詳細については System.Collections.ArrayList(ICollection) を参照してください。 Exceptions ArgumentNullException c が null 参照 (Visual Basic では Nothing) です。 Properties Capacity FloatArray に格納できる要素の数を取得または設定します。 public int Capacity { get; set; } Property Value int FloatArray に格納できる要素の数。 0 が指定された場合は規定値を設定します。 現在設定されている数より小さい場合は例外を発行します。 Remarks 詳細については System.Collections.ArrayList.Capacity を参照してください。 Exceptions ArgumentOutOfRangeException Capacity が Count より小さい値に設定されています。 Count FloatArray に格納されている System.Single の数を取得します。 public int Count { get; } Property Value int FloatArray に格納されている要素の数。 Remarks 詳細については System.Collections.ArrayList.Count を参照してください。 IsFixedSize FloatArray が固定サイズかどうかを示す値を取得します。 public bool IsFixedSize { get; } Property Value bool 現在の実装では必ず false です。 Remarks 詳細については System.Collections.ArrayList.IsFixedSize を参照してください。 IsReadOnly FloatArray が読み取り専用かどうかを示す値を取得します。 public bool IsReadOnly { get; } Property Value bool 現在の実装では必ず false です。 Remarks 詳細については System.Collections.ArrayList.IsReadOnly を参照してください。 IsSynchronized FloatArray へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。 <p><!-- Non Support 2005/01/20 --> このプロパティは、現在サポートしていません。 </p> public bool IsSynchronized { get; } Property Value bool FloatArray へのアクセスが同期されている (スレッド セーフである) 場合は true 。 それ以外の場合は false 。 Remarks 詳細については System.Collections.ArrayList.IsSynchronized を参照してください。 this[int] 指定された System.Single を取得または設定します。 public float this[int index] { get; set; } Parameters index int 取得または設定する要素の、0 から始まるインデックス番号。 Property Value float 指定したインデックスにある System.Single 。 Remarks 詳細については System.Collections.IList.this を参照してください。 Exceptions ArgumentOutOfRangeException index が 0 未満です。 または index が Count 以上です。 SyncRoot FloatArray へのアクセスを同期するために使用できるオブジェクトを取得します。 <p><!-- Non Support 2005/01/20 --> このプロパティは、現在サポートしていません。 </p> public object SyncRoot { get; } Property Value object FloatArray へのアクセスを同期するために使用できるオブジェクト。 Remarks 詳細については System.Collections.ArrayList.SyncRoot を参照してください。 Methods Add(float) FloatArray の末尾に System.Single を追加します。 public int Add(float item) Parameters item float FloatArray の末尾に追加する System.Single 。 Returns int item が追加された位置の FloatArray インデックス。 Remarks 詳細については System.Collections.ArrayList.Add を参照してください。 AddRange(FloatArray) FloatArray の要素をリストの末尾に追加します。 public int AddRange(FloatArray x) Parameters x FloatArray リストに追加するオブジェクトを格納する FloatArray 。 Returns int リストの新しい Count 。 AddRange(float[]) 指定した FloatArray の要素をコピーします。 public int AddRange(float[] x) Parameters x float[] コレクションに追加するオブジェクトを格納する FloatArray 。 Returns int FloatArray に格納されている要素の数。 Remarks 詳細については System.Collections.ArrayList.AddRange を参照してください。 Exceptions ArgumentNullException x が null 参照 (Visual Basic では Nothing) です。 Clear() FloatArray からすべての System.Single を削除します。 public void Clear() Remarks 詳細については System.Collections.ArrayList.Clear を参照してください。 Clone() FloatArray の簡易コピーを生成します。 public object Clone() Returns object FloatArray の簡易コピーである新しいオブジェクト。 Contains(float) ある System.Single が FloatArray 内に存在するかどうかを判断します。 public bool Contains(float item) Parameters item float FloatArray 内で検索される System.Single 。 Returns bool item が FloatArray に存在する場合は true 。それ以外の場合は false 。 Remarks 詳細については System.Collections.ArrayList.Contains を参照してください。 CopyTo(float[]) FloatArray 全体を互換性のある 1 次元の System.Single にコピーします。コピー操作は、コピー先の配列の先頭から始まります。 public void CopyTo(float[] array) Parameters array float[] FloatArray から要素がコピーされる System.Single の 1 次元配列。この配列には、0 から始まるインデックス番号が必要です。 Remarks 詳細については System.Collections.ArrayList.CopyTo を参照してください。 Exceptions ArgumentNullException array が null 参照 (Visual Basic では Nothing) です。 ArgumentException array が多次元です。 </p> または コピー元の FloatArray の System.Single 数が、コピー先の array に格納できる要素の数を超えています。 </p> CopyTo(float[], int) FloatArray 全体を互換性のある 1 次元の System.Single にコピーします。コピー操作は、コピー先の配列の指定したインデックスから始まります。 public void CopyTo(float[] array, int start) Parameters array float[] FloatArray から要素がコピーされる System.Single の 1 次元配列。この配列には、0 から始まるインデックス番号が必要です。 start int コピーの開始位置となる、 0 から始まるインデックス番号。 Remarks 詳細については System.Collections.ArrayList.CopyTo を参照してください。 Exceptions ArgumentNullException array が null 参照 (Visual Basic では Nothing) です。 ArgumentOutOfRangeException start が 0 未満です。 ArgumentException array が多次元です。 </p> または start が array の長さ以上です。 </p> または コピー元の FloatArray の System.Single 数が、 start からコピー先の array の末尾までに格納できる数を超えています。 </p> GetEnumerator() public IEnumerator<float> GetEnumerator() Returns IEnumerator<float> IndexOf(float) 指定した System.Single を検索し、 FloatArray 内で最初に見つかった位置の 0 から始まるインデックスを返します。 public int IndexOf(float item) Parameters item float FloatArray 内で検索される System.Single 。 Returns int FloatArray 内で item が見つかった場合は、最初に見つかった位置の 0 から始まるインデックス番号。 それ以外の場合は -1。 Remarks 詳細については System.Collections.ArrayList.IndexOf を参照してください。 Insert(int, float) FloatArray 内の指定したインデックスの位置に要素を挿入します。 public void Insert(int index, float item) Parameters index int item を挿入する位置の、0 から始まるインデックス番号。 item float 挿入する System.Single 。 Remarks 詳細については System.Collections.ArrayList.Insert を参照してください。 Exceptions ArgumentOutOfRangeException index が 0 未満です。 </p> または index が Count より大きい値です。 </p> Remove(float) FloatArray 内から指定された System.Single を削除します。 public void Remove(float item) Parameters item float FloatArray から削除する System.Single 。 Remarks 詳細については System.Collections.ArrayList.Remove を参照してください。 Exceptions ArgumentException item が配列内に見つかりません。 RemoveAt(int) FloatArray の指定したインデックスにある System.Single を削除します。 public void RemoveAt(int index) Parameters index int 削除する System.Single の、0 から始まるインデックス番号。 Remarks 詳細については System.Collections.ArrayList.RemoveAt を参照してください。 Exceptions ArgumentOutOfRangeException index が 0 未満です。 </p> または index が Count 以上です。 </p> ToArray() リストの要素を新しい配列にコピーします。 public float[] ToArray() Returns float[] リストの要素のコピーを格納する float 型の配列。 TrimToSize() 容量を FloatArray 内にある実際の System.Single 数に設定します。 public void TrimToSize() Remarks 詳細については System.Collections.ArrayList.TrimToSize を参照してください。"
  },
  "api/MapQuest.Collections.IPropertyChange.html": {
    "href": "api/MapQuest.Collections.IPropertyChange.html",
    "title": "Interface IPropertyChange | mysite",
    "keywords": "Interface IPropertyChange Namespace MapQuest.Collections Assembly MapQuest.Core.dll コレクションの内容が変化したことを PropertyChanged イベントとして通知を可能にする 共通インターフェースです。 public interface IPropertyChange Events PropertyChanged コレクションの内容が変更されたことを通知するイベントです。 event PropertyChangedEventHandler PropertyChanged Event Type PropertyChangedEventHandler"
  },
  "api/MapQuest.Collections.IStringCollection.html": {
    "href": "api/MapQuest.Collections.IStringCollection.html",
    "title": "Interface IStringCollection | mysite",
    "keywords": "Interface IStringCollection Namespace MapQuest.Collections Assembly MapQuest.Core.dll string 用に最適化されたコレクションを定義します。 public interface IStringCollection : IEnumerable<string>, IEnumerable Inherited Members IEnumerable<string>.GetEnumerator() Remarks IStringCollection は、 string 用に最適化された ICollection コレクションを提供します。 Properties Count IStringCollection に格納されている string の数を取得します。 int Count { get; } Property Value int IStringCollection に格納されている要素の数。 Remarks 詳細については Count を参照してください。 IsSynchronized IStringCollection へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。 このプロパティは、現在サポートしていません。 bool IsSynchronized { get; } Property Value bool IStringCollection へのアクセスが同期されている (スレッド セーフである) 場合は true 。 それ以外の場合は false 。 Remarks 詳細については IsSynchronized を参照してください。 SyncRoot IStringCollection へのアクセスを同期するために使用できるオブジェクトを取得します。 このプロパティは、現在サポートしていません。 object SyncRoot { get; } Property Value object IStringCollection へのアクセスを同期するために使用できるオブジェクト。 Remarks 詳細については SyncRoot を参照してください。 Methods CopyTo(string[], int) 指定のインデックスを開始位置として、 IStringCollection の要素を string の 1 次元配列にコピーします。 void CopyTo(string[] array, int arrayIndex) Parameters array string[] IStringCollection から要素がコピーされる string の 1 次元配列。この配列には、0 から始まるインデックス番号が必要です。 arrayIndex int コピーの開始位置となる、 0 から始まるインデックス番号。 Remarks 詳細については CopyTo(Array, int) を参照してください。 Exceptions ArgumentNullException array が null 参照 (Visual Basic では Nothing) です。 ArgumentOutOfRangeException arrayIndex が 0 未満です。 ArgumentException arrayIndex が array の長さ以上です。 または コピー元の IStringCollection の string 数が、 arrayIndex からコピー先の array の末尾までに格納できる数を超えています。"
  },
  "api/MapQuest.Collections.IStringEnumerator.html": {
    "href": "api/MapQuest.Collections.IStringEnumerator.html",
    "title": "Interface IStringEnumerator | mysite",
    "keywords": "Interface IStringEnumerator Namespace MapQuest.Collections Assembly MapQuest.Core.dll StringList に対する単純な反復処理をサポートします。 IStringCollectionIStringListStringList public interface IStringEnumerator : IEnumerator<string>, IDisposable, IEnumerator Inherited Members IEnumerator<string>.Current IDisposable.Dispose() IEnumerator.MoveNext() IEnumerator.Reset() Remarks IStringEnumerator は、 string 用に最適化された IEnumerator を提供します。"
  },
  "api/MapQuest.Collections.IStringList.html": {
    "href": "api/MapQuest.Collections.IStringList.html",
    "title": "Interface IStringList | mysite",
    "keywords": "Interface IStringList Namespace MapQuest.Collections Assembly MapQuest.Core.dll インデックスによって個別にアクセスできる string のコレクションを定義します。 public interface IStringList : IStringCollection, IEnumerable<string>, IEnumerable Inherited Members IStringCollection.CopyTo(string[], int) IStringCollection.Count IStringCollection.IsSynchronized IStringCollection.SyncRoot IEnumerable<string>.GetEnumerator() Remarks IStringList は、string 用に最適化された IList コレクションを提供します。 Properties IsFixedSize IStringList が固定サイズかどうかを示す値を取得します。 bool IsFixedSize { get; } Property Value bool IStringList が固定サイズの場合は true 。それ以外の場合は false 。 Remarks 詳細については IsFixedSize を参照してください。 IsReadOnly IStringList が読み取り専用かどうかを示す値を取得します。 bool IsReadOnly { get; } Property Value bool IStringList が読み取り専用の場合は true 。それ以外の場合は false 。 Remarks 詳細については IsReadOnly を参照してください。 this[int] 指定されたインデックスの string を取得または設定します。 string this[int index] { get; set; } Parameters index int 取得または設定する要素の、0 から始まるインデックス番号。 Property Value string 指定したインデックスにある string 。 Remarks 詳細については this[int] を参照してください。 Exceptions ArgumentOutOfRangeException index が 0 未満です。 または index が Count 以上です。 NotSupportedException このプロパティが設定されていますが、 IStringList が読み取り専用です。 Methods Add(string) IStringList に string を追加します int Add(string value) Parameters value string IStringList に追加する string 。 値は null 参照 (Visual Basic では Nothing) に設定できます。 Returns int 新しい string が挿入された位置。 Remarks 詳細については Add(object) を参照してください。 Exceptions NotSupportedException IStringList が読み取り専用です。 または IStringList が固定サイズです。 Clear() IStringList からすべての string を削除します。 void Clear() Remarks 詳細については Clear() を参照してください。 Exceptions NotSupportedException IStringList が読み取り専用です。 または IStringList が固定サイズです。 Contains(string) ある string が IStringList 内に存在するかどうかを判断します。 bool Contains(string value) Parameters value string IStringList 内で検索される string 。 値は null 参照 (Visual Basic では Nothing) に設定できます。 Returns bool value が IStringList に存在する場合は true 。それ以外の場合は false 。 Remarks 詳細については Contains(object) を参照してください。 IndexOf(string) 指定した string を検索し、 IStringList 内で最初に見つかった位置の 0 から始まるインデックスを返します。 int IndexOf(string value) Parameters value string IStringList 内で検索される string 。 値は null 参照 (Visual Basic では Nothing) に設定できます。 Returns int IStringList 内で value が見つかった場合は、最初に見つかった位置の 0 から始まるインデックス番号。 それ以外の場合は -1。 Remarks 詳細については IndexOf(object) を参照してください。 Insert(int, string) IStringList 内の指定したインデックスの位置に string を挿入します。 void Insert(int index, string value) Parameters index int value を挿入する位置の、0 から始まるインデックス番号。 value string 挿入する string 。 値は null 参照 (Visual Basic では Nothing) に設定できます。 Remarks 詳細については Insert(int, object) を参照してください。 Exceptions ArgumentOutOfRangeException index が 0 未満です。 または index が Count より大きい値です。 NotSupportedException IStringList が読み取り専用です。 または IStringList が固定サイズです。 Remove(string) IStringList 内から指定された string オブジェクトを削除します。 void Remove(string value) Parameters value string IStringList から削除する string 。 値は null 参照 (Visual Basic では Nothing) に設定できます。 Remarks 詳細については Remove(object) を参照してください。 Exceptions NotSupportedException IStringList が読み取り専用です。 または IStringList が固定サイズです。 RemoveAt(int) IStringList の指定したインデックスにある string を削除します。 void RemoveAt(int index) Parameters index int 削除する string の、0 から始まるインデックス番号。 Remarks 詳細については RemoveAt(int) を参照してください。 Exceptions ArgumentOutOfRangeException index が 0 未満です。 または index が Count 以上です。 NotSupportedException IStringList が読み取り専用です。 または IStringList が固定サイズです。"
  },
  "api/MapQuest.Collections.IntArray.html": {
    "href": "api/MapQuest.Collections.IntArray.html",
    "title": "Class IntArray | mysite",
    "keywords": "Class IntArray Namespace MapQuest.Collections Assembly MapQuest.Core.dll タイプセーフである System.Int32 の配列を定義します。 public class IntArray : ICloneable, IEnumerable<int>, IEnumerable Inheritance object IntArray Implements ICloneable IEnumerable<int> IEnumerable Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors IntArray() 空で、デフォルトの初期量を備えた、 IntArray クラスの新しいインスタンスを初期化します。 public IntArray() Remarks 詳細については System.Collections.ArrayList() を参照してください。 IntArray(IntArray) 指定した IntArray からコピーした System.Int32 を格納し、 コピーされる System.Int32 の数と同じ初期量を備えた、 IntArray クラスの新しいインスタンスを初期化します。 public IntArray(IntArray c) Parameters c IntArray 新しい配列に要素が追加された IntArray 。 Remarks 詳細については System.Collections.ArrayList(ICollection) を参照してください。 Exceptions ArgumentNullException c が null 参照 (Visual Basic では Nothing) です。 IntArray(int) 空で、指定した初期量を備えた、 IntArray クラスの新しいインスタンスを初期化します。 public IntArray(int capacity) Parameters capacity int 初期状態の新しい配列に格納できる System.Int32 の数。 Remarks 詳細については System.Collections.ArrayList(Int32) を参照してください。 Exceptions ArgumentOutOfRangeException capacity が 0 未満です。 IntArray(int[]) 指定した System.Int32 の配列からコピーした System.Int32 を格納し、 コピーされる System.Int32 の数と同じ初期量を備えた、 IntArray クラスの新しいインスタンスを初期化します。 public IntArray(int[] a) Parameters a int[] 新しい配列に要素が追加された IntArray 。 Remarks 詳細については System.Collections.ArrayList(ICollection) を参照してください。 Exceptions ArgumentNullException c が null 参照 (Visual Basic では Nothing) です。 Properties Capacity IntArray に格納できる要素の数を取得または設定します。 public int Capacity { get; set; } Property Value int IntArray に格納できる要素の数。 0 が指定された場合は規定値を設定します。 現在設定されている数より小さい場合は例外を発行します。 Remarks 詳細については System.Collections.ArrayList.Capacity を参照してください。 Exceptions ArgumentOutOfRangeException Capacity が Count より小さい値に設定されています。 Count IntArray に格納されている System.Int32 の数を取得します。 public int Count { get; } Property Value int IntArray に格納されている要素の数。 Remarks 詳細については System.Collections.ArrayList.Count を参照してください。 IsFixedSize IntArray が固定サイズかどうかを示す値を取得します。 public bool IsFixedSize { get; } Property Value bool 現在の実装では必ず false です。 Remarks 詳細については System.Collections.ArrayList.IsFixedSize を参照してください。 IsReadOnly IntArray が読み取り専用かどうかを示す値を取得します。 public bool IsReadOnly { get; } Property Value bool 現在の実装では必ず false です。 Remarks 詳細については System.Collections.ArrayList.IsReadOnly を参照してください。 IsSynchronized IntArray へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。 <p><!-- Non Support 2005/01/20 --> このプロパティは、現在サポートしていません。 </p> public bool IsSynchronized { get; } Property Value bool IntArray へのアクセスが同期されている (スレッド セーフである) 場合は true 。 それ以外の場合は false 。 Remarks 詳細については System.Collections.ArrayList.IsSynchronized を参照してください。 this[int] 指定された System.Int32 を取得または設定します。 public int this[int index] { get; set; } Parameters index int 取得または設定する要素の、0 から始まるインデックス番号。 Property Value int 指定したインデックスにある System.Int32 。 Remarks 詳細については System.Collections.IList.this を参照してください。 Exceptions ArgumentOutOfRangeException index が 0 未満です。 または index が Count 以上です。 SyncRoot IntArray へのアクセスを同期するために使用できるオブジェクトを取得します。 <p><!-- Non Support 2005/01/20 --> このプロパティは、現在サポートしていません。 </p> public object SyncRoot { get; } Property Value object IntArray へのアクセスを同期するために使用できるオブジェクト。 Remarks 詳細については System.Collections.ArrayList.SyncRoot を参照してください。 Methods Add(int) IntArray の末尾に System.Int32 を追加します。 public int Add(int item) Parameters item int IntArray の末尾に追加する System.Int32 。 Returns int item が追加された位置の IntArray インデックス。 Remarks 詳細については System.Collections.ArrayList.Add を参照してください。 AddRange(IntArray) 指定した IntArray の要素をコピーします。 public int AddRange(IntArray x) Parameters x IntArray コレクションに追加するオブジェクトを格納する IntArray 。 Returns int IntArray に格納されている要素の数。 Remarks 詳細については System.Collections.ArrayList.AddRange を参照してください。 Exceptions ArgumentNullException x が null 参照 (Visual Basic では Nothing) です。 AddRange(int[]) 指定した System.Int32 配列の要素をコピーします。 public int AddRange(int[] x) Parameters x int[] コレクションに追加するオブジェクトを格納する System.Int32 型の配列。 Returns int IntArray に格納されている要素の数。 Remarks 詳細については System.Collections.ArrayList.AddRange を参照してください。 Exceptions ArgumentNullException x が null 参照 (Visual Basic では Nothing) です。 Clear() IntArray からすべての System.Int32 を削除します。 public void Clear() Remarks 詳細については System.Collections.ArrayList.Clear を参照してください。 Clone() IntArray の簡易コピーを生成します。 public object Clone() Returns object IntArray の簡易コピーである新しいオブジェクト。 Contains(int) ある System.Int32 が IntArray 内に存在するかどうかを判断します。 public bool Contains(int item) Parameters item int IntArray 内で検索される System.Int32 。 Returns bool item が IntArray に存在する場合は true 。それ以外の場合は false 。 Remarks 詳細については System.Collections.ArrayList.Contains を参照してください。 CopyTo(int[]) IntArray 全体を互換性のある 1 次元の System.Int32 にコピーします。コピー操作は、コピー先の配列の先頭から始まります。 public void CopyTo(int[] array) Parameters array int[] IntArray から要素がコピーされる System.Int32 の 1 次元配列。この配列には、0 から始まるインデックス番号が必要です。 Remarks 詳細については System.Collections.ArrayList.CopyTo を参照してください。 Exceptions ArgumentNullException array が null 参照 (Visual Basic では Nothing) です。 ArgumentException array が多次元です。 </p> または コピー元の IntArray の System.Int32 数が、コピー先の array に格納できる要素の数を超えています。 </p> CopyTo(int[], int) IntArray 全体を互換性のある 1 次元の System.Int32 にコピーします。コピー操作は、コピー先の配列の指定したインデックスから始まります。 public void CopyTo(int[] array, int start) Parameters array int[] IntArray から要素がコピーされる System.Int32 の 1 次元配列。この配列には、0 から始まるインデックス番号が必要です。 start int コピーの開始位置となる、 0 から始まるインデックス番号。 Remarks 詳細については System.Collections.ArrayList.CopyTo を参照してください。 Exceptions ArgumentNullException array が null 参照 (Visual Basic では Nothing) です。 ArgumentOutOfRangeException start が 0 未満です。 ArgumentException array が多次元です。 </p> または start が array の長さ以上です。 </p> または コピー元の IntArray の System.Int32 数が、 start からコピー先の array の末尾までに格納できる数を超えています。 </p> GetEnumerator() public IEnumerator<int> GetEnumerator() Returns IEnumerator<int> IndexOf(int) 指定した System.Int32 を検索し、 IntArray 内で最初に見つかった位置の 0 から始まるインデックスを返します。 public int IndexOf(int item) Parameters item int IntArray 内で検索される System.Int32 。 Returns int IntArray 内で item が見つかった場合は、最初に見つかった位置の 0 から始まるインデックス番号。 それ以外の場合は -1。 Remarks 詳細については System.Collections.ArrayList.IndexOf を参照してください。 Insert(int, int) IntArray 内の指定したインデックスの位置に要素を挿入します。 public void Insert(int index, int item) Parameters index int item を挿入する位置の、0 から始まるインデックス番号。 item int 挿入する System.Int32 。 Remarks 詳細については System.Collections.ArrayList.Insert を参照してください。 Exceptions ArgumentOutOfRangeException index が 0 未満です。 </p> または index が Count より大きい値です。 </p> Remove(int) IntArray 内から指定された System.Int32 を削除します。 public void Remove(int item) Parameters item int IntArray から削除する System.Int32 。 Remarks 詳細については System.Collections.ArrayList.Remove を参照してください。 Exceptions ArgumentException item が配列内に見つかりません。 RemoveAt(int) IntArray の指定したインデックスにある System.Int32 を削除します。 public void RemoveAt(int index) Parameters index int 削除する System.Int32 の、0 から始まるインデックス番号。 Remarks 詳細については System.Collections.ArrayList.RemoveAt を参照してください。 Exceptions ArgumentOutOfRangeException index が 0 未満です。 </p> または index が Count 以上です。 </p> ToArray() IntArray の要素を System.Int32 の配列として取得します。 public int[] ToArray() Returns int[] IntArray の要素を格納する System.Int32 配列。 TrimToSize() 容量を IntArray 内にある実際の System.Int32 数に設定します。 public void TrimToSize() Remarks 詳細については System.Collections.ArrayList.TrimToSize を参照してください。"
  },
  "api/MapQuest.Collections.LongArray.html": {
    "href": "api/MapQuest.Collections.LongArray.html",
    "title": "Class LongArray | mysite",
    "keywords": "Class LongArray Namespace MapQuest.Collections Assembly MapQuest.Core.dll タイプセーフである System.Int64 の配列を定義します。 public class LongArray : ICloneable, IEnumerable<long>, IEnumerable Inheritance object LongArray Implements ICloneable IEnumerable<long> IEnumerable Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors LongArray() 空で、デフォルトの初期量を備えた、 LongArray クラスの新しいインスタンスを初期化します。 public LongArray() Remarks 詳細については System.Collections.ArrayList() を参照してください。 LongArray(LongArray) 指定した LongArray からコピーした System.Int64 を格納し、 コピーされる System.Int64 の数と同じ初期量を備えた、 LongArray クラスの新しいインスタンスを初期化します。 public LongArray(LongArray c) Parameters c LongArray 新しい配列に要素が追加された LongArray 。 Remarks 詳細については System.Collections.ArrayList(ICollection) を参照してください。 Exceptions ArgumentNullException c が null 参照 (Visual Basic では Nothing) です。 LongArray(int) 空で、指定した初期量を備えた、 LongArray クラスの新しいインスタンスを初期化します。 public LongArray(int capacity) Parameters capacity int 初期状態の新しい配列に格納できる System.Int64 の数。 Remarks 詳細については System.Collections.ArrayList(Int32) を参照してください。 Exceptions ArgumentOutOfRangeException capacity が 0 未満です。 LongArray(long[]) 指定した System.Int64 の配列からコピーした System.Int64 を格納し、 コピーされる System.Int64 の数と同じ初期量を備えた、 LongArray クラスの新しいインスタンスを初期化します。 public LongArray(long[] a) Parameters a long[] 新しい配列に要素が追加された LongArray 。 Remarks 詳細については System.Collections.ArrayList(ICollection) を参照してください。 Exceptions ArgumentNullException c が null 参照 (Visual Basic では Nothing) です。 Properties Capacity LongArray に格納できる要素の数を取得または設定します。 public int Capacity { get; set; } Property Value int LongArray に格納できる要素の数。 0 が指定された場合は規定値を設定します。 現在設定されている数より小さい場合は例外を発行します。 Remarks 詳細については System.Collections.ArrayList.Capacity を参照してください。 Exceptions ArgumentOutOfRangeException Capacity が Count より小さい値に設定されています。 Count LongArray に格納されている System.Int64 の数を取得します。 public int Count { get; } Property Value int LongArray に格納されている要素の数。 Remarks 詳細については System.Collections.ArrayList.Count を参照してください。 IsFixedSize LongArray が固定サイズかどうかを示す値を取得します。 public bool IsFixedSize { get; } Property Value bool 現在の実装では必ず false です。 Remarks 詳細については System.Collections.ArrayList.IsFixedSize を参照してください。 IsReadOnly LongArray が読み取り専用かどうかを示す値を取得します。 public bool IsReadOnly { get; } Property Value bool 現在の実装では必ず false です。 Remarks 詳細については System.Collections.ArrayList.IsReadOnly を参照してください。 IsSynchronized LongArray へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。 <p><!-- Non Support 2005/01/20 --> このプロパティは、現在サポートしていません。 </p> public bool IsSynchronized { get; } Property Value bool LongArray へのアクセスが同期されている (スレッド セーフである) 場合は true 。 それ以外の場合は false 。 Remarks 詳細については System.Collections.ArrayList.IsSynchronized を参照してください。 this[int] 指定された System.Int64 を取得または設定します。 public long this[int index] { get; set; } Parameters index int 取得または設定する要素の、0 から始まるインデックス番号。 Property Value long 指定したインデックスにある System.Int64 。 Remarks 詳細については System.Collections.IList.this を参照してください。 Exceptions ArgumentOutOfRangeException index が 0 未満です。 または index が Count 以上です。 SyncRoot LongArray へのアクセスを同期するために使用できるオブジェクトを取得します。 <p><!-- Non Support 2005/01/20 --> このプロパティは、現在サポートしていません。 </p> public object SyncRoot { get; } Property Value object LongArray へのアクセスを同期するために使用できるオブジェクト。 Remarks 詳細については System.Collections.ArrayList.SyncRoot を参照してください。 Methods Add(long) LongArray の末尾に System.Int64 を追加します。 public int Add(long item) Parameters item long LongArray の末尾に追加する System.Int64 。 Returns int item が追加された位置の LongArray インデックス。 Remarks 詳細については System.Collections.ArrayList.Add を参照してください。 AddRange(LongArray) 指定した LongArray の要素をコピーします。 public int AddRange(LongArray x) Parameters x LongArray コレクションに追加するオブジェクトを格納する LongArray 。 Returns int LongArray に格納されている要素の数。 Remarks 詳細については System.Collections.ArrayList.AddRange を参照してください。 Exceptions ArgumentNullException x が null 参照 (Visual Basic では Nothing) です。 AddRange(long[]) 指定した System.Int64 配列の要素をコピーします。 public int AddRange(long[] x) Parameters x long[] コレクションに追加するオブジェクトを格納する System.Int64 型の配列。 Returns int LongArray に格納されている要素の数。 Remarks 詳細については System.Collections.ArrayList.AddRange を参照してください。 Exceptions ArgumentNullException x が null 参照 (Visual Basic では Nothing) です。 Clear() LongArray からすべての System.Int64 を削除します。 public void Clear() Remarks 詳細については System.Collections.ArrayList.Clear を参照してください。 Clone() LongArray の簡易コピーを生成します。 public object Clone() Returns object LongArray の簡易コピーである新しいオブジェクト。 Contains(long) ある System.Int64 が LongArray 内に存在するかどうかを判断します。 public bool Contains(long item) Parameters item long LongArray 内で検索される System.Int64 。 Returns bool item が LongArray に存在する場合は true 。それ以外の場合は false 。 Remarks 詳細については System.Collections.ArrayList.Contains を参照してください。 CopyTo(long[]) LongArray 全体を互換性のある 1 次元の System.Int64 にコピーします。コピー操作は、コピー先の配列の先頭から始まります。 public void CopyTo(long[] array) Parameters array long[] LongArray から要素がコピーされる System.Int64 の 1 次元配列。この配列には、0 から始まるインデックス番号が必要です。 Remarks 詳細については System.Collections.ArrayList.CopyTo を参照してください。 Exceptions ArgumentNullException array が null 参照 (Visual Basic では Nothing) です。 ArgumentException array が多次元です。 </p> または コピー元の LongArray の System.Int64 数が、コピー先の array に格納できる要素の数を超えています。 </p> CopyTo(long[], int) LongArray 全体を互換性のある 1 次元の System.Int64 にコピーします。コピー操作は、コピー先の配列の指定したインデックスから始まります。 public void CopyTo(long[] array, int start) Parameters array long[] LongArray から要素がコピーされる System.Int64 の 1 次元配列。この配列には、0 から始まるインデックス番号が必要です。 start int コピーの開始位置となる、 0 から始まるインデックス番号。 Remarks 詳細については System.Collections.ArrayList.CopyTo を参照してください。 Exceptions ArgumentNullException array が null 参照 (Visual Basic では Nothing) です。 ArgumentOutOfRangeException start が 0 未満です。 ArgumentException array が多次元です。 </p> または start が array の長さ以上です。 </p> または コピー元の LongArray の System.Int64 数が、 start からコピー先の array の末尾までに格納できる数を超えています。 </p> GetEnumerator() public IEnumerator<long> GetEnumerator() Returns IEnumerator<long> IndexOf(long) 指定した System.Int64 を検索し、 LongArray 内で最初に見つかった位置の 0 から始まるインデックスを返します。 public int IndexOf(long item) Parameters item long LongArray 内で検索される System.Int64 。 Returns int LongArray 内で item が見つかった場合は、最初に見つかった位置の 0 から始まるインデックス番号。 それ以外の場合は -1。 Remarks 詳細については System.Collections.ArrayList.IndexOf を参照してください。 Insert(int, long) LongArray 内の指定したインデックスの位置に要素を挿入します。 public void Insert(int index, long item) Parameters index int item を挿入する位置の、0 から始まるインデックス番号。 item long 挿入する System.Int64 。 Remarks 詳細については System.Collections.ArrayList.Insert を参照してください。 Exceptions ArgumentOutOfRangeException index が 0 未満です。 </p> または index が Count より大きい値です。 </p> Remove(long) LongArray 内から指定された System.Int64 を削除します。 public void Remove(long item) Parameters item long LongArray から削除する System.Int64 。 Remarks 詳細については System.Collections.ArrayList.Remove を参照してください。 Exceptions ArgumentException item が配列内に見つかりません。 RemoveAt(int) LongArray の指定したインデックスにある System.Int64 を削除します。 public void RemoveAt(int index) Parameters index int 削除する System.Int64 の、0 から始まるインデックス番号。 Remarks 詳細については System.Collections.ArrayList.RemoveAt を参照してください。 Exceptions ArgumentOutOfRangeException index が 0 未満です。 </p> または index が Count 以上です。 </p> ToArray() IntArray の要素を System.Int64 の配列として取得します。 public long[] ToArray() Returns long[] IntArray の要素を格納する System.Int64 配列。 TrimToSize() 容量を LongArray 内にある実際の System.Int64 数に設定します。 public void TrimToSize() Remarks 詳細については System.Collections.ArrayList.TrimToSize を参照してください。"
  },
  "api/MapQuest.Collections.PropertyChangeActionType.html": {
    "href": "api/MapQuest.Collections.PropertyChangeActionType.html",
    "title": "Enum PropertyChangeActionType | mysite",
    "keywords": "Enum PropertyChangeActionType Namespace MapQuest.Collections Assembly MapQuest.Core.dll PropertyChanged イベントで定義される状態変化の種類を定義します。 public enum PropertyChangeActionType Fields Add = 1 コレクションに要素が追加されたことを表します。 Refresh = 2 コレクションが変更されたことを表します。 これは、Clear メソッドなどを使用することによって発生します。 Remove = 3 コレクションから要素が削除されたことを表します。 See Also PropertyObjects PropertyStrings"
  },
  "api/MapQuest.Collections.PropertyChangedEventArgs.html": {
    "href": "api/MapQuest.Collections.PropertyChangedEventArgs.html",
    "title": "Class PropertyChangedEventArgs | mysite",
    "keywords": "Class PropertyChangedEventArgs Namespace MapQuest.Collections Assembly MapQuest.Core.dll PropertyChanged イベントにデータを提供します。 public class PropertyChangedEventArgs : EventArgs Inheritance object EventArgs PropertyChangedEventArgs Inherited Members EventArgs.Empty object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks コレクション内の要素が変更されると、 PropertyChanged イベントが発生します。 PropertyChangedEventArgs オブジェクトは、変更された要素の名前を指定します。 PropertyChangedEventArgs は、変更された要素の名前を取得するために、 PropertyName プロパティを提供します。 Constructors PropertyChangedEventArgs(PropertyChangeActionType, string) 変更された状態と要素の名前を備えた、 PropertyChangedEventArgs クラスの新しいインスタンスを初期化します。 public PropertyChangedEventArgs(PropertyChangeActionType action, string propertyName) Parameters action PropertyChangeActionType コレクションがどう変化したかを示す値。 propertyName string 変更された要素の名前。 Properties Action コレクションがどう変化したかを示す値を取得または設定します。 public PropertyChangeActionType Action { get; set; } Property Value PropertyChangeActionType コレクションがどう変化したかを示す PropertyChangeActionType 。 PropertyName 変更された要素の名前を取得します。 public virtual string PropertyName { get; } Property Value string 変更された要素の名前。"
  },
  "api/MapQuest.Collections.PropertyChangedEventHandler.html": {
    "href": "api/MapQuest.Collections.PropertyChangedEventHandler.html",
    "title": "Delegate PropertyChangedEventHandler | mysite",
    "keywords": "Delegate PropertyChangedEventHandler Namespace MapQuest.Collections Assembly MapQuest.Core.dll コレクションで要素が変更されたときに発生する PropertyChanged イベントを処理するメソッドを表します。 public delegate void PropertyChangedEventHandler(object sender, PropertyChangedEventArgs e) Parameters sender object イベントのソース。 e PropertyChangedEventArgs イベント データを格納している PropertyChangedEventArgs 。 Remarks PropertyChangedEventHandler は、 PropertyChanged イベントへの応答として呼び出されるメソッドを指定するために使用します。 PropertyChangedEventHandler のインスタンスをイベントに関連付けるには、 そのインスタンスをそのイベントに追加します。イベントから <B>PropertyChangedEventHandler</B> を削除するまでは、アセンブリが読み込まれるたびに、 <B>PropertyChangedEventHandler</B> が参照しているメソッドが呼び出されます。 Constructors PropertyChangedEventHandler(object, IntPtr) public PropertyChangedEventHandler(object @object, IntPtr method) Parameters object object method IntPtr Methods BeginInvoke(object, PropertyChangedEventArgs, AsyncCallback, object) public virtual IAsyncResult BeginInvoke(object sender, PropertyChangedEventArgs e, AsyncCallback callback, object @object) Parameters sender object e PropertyChangedEventArgs callback AsyncCallback object object Returns IAsyncResult EndInvoke(IAsyncResult) public virtual void EndInvoke(IAsyncResult result) Parameters result IAsyncResult Invoke(object, PropertyChangedEventArgs) public virtual void Invoke(object sender, PropertyChangedEventArgs e) Parameters sender object e PropertyChangedEventArgs"
  },
  "api/MapQuest.Collections.PropertyObjects.html": {
    "href": "api/MapQuest.Collections.PropertyObjects.html",
    "title": "Class PropertyObjects | mysite",
    "keywords": "Class PropertyObjects Namespace MapQuest.Collections Assembly MapQuest.Core.dll キーのハッシュ コードに基づいて編成された、object 用のキーと値の組み合わせのコレクションを表します。 public class PropertyObjects : IDictionary, ICollection, IEnumerable, ICloneable Inheritance object PropertyObjects Implements IDictionary ICollection IEnumerable ICloneable Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks PropertyObjects は、 object 用に最適化された Hashtable を提供します。 <p> 詳細については <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> を参照してください。 </p> Constructors PropertyObjects() 既定の初期量を備え、既定のテーブル占有率、既定のハッシュ コード プロバイダ、 および既定の比較演算子を使用する、空の PropertyObjects を作成します。 public PropertyObjects() Remarks 詳細については Hashtable() を参照してください。 PropertyObjects(PropertyObjects) PropertyObjects を指定して、新しいインスタンスを初期化します。 public PropertyObjects(PropertyObjects original) Parameters original PropertyObjects PropertyObjects オブジェクト。 Remarks PropertyObjects をコピーするためのコピー コンストラクタです。 PropertyObjects(IDictionary) コピーされる要素の数と同じ初期量を備え、既定のテーブル占有率、 既定のハッシュ コード プロバイダ、および既定の比較演算子を使用する新しい PropertyObjects に、指定したディクショナリから要素をコピーします。 public PropertyObjects(IDictionary dictionary) Parameters dictionary IDictionary 新しい PropertyObjects にコピーする IDictionary 。 Remarks 詳細については Hashtable(IDictionary) を参照してください。 Exceptions ArgumentNullException dictionary が null 参照 (Visual Basic では Nothing) です。 PropertyObjects(IDictionary, IHashCodeProvider, IComparer) コピーされる要素の数と同じ初期量を備え、既定のテーブル占有率、 指定したハッシュ コード プロバイダ、および指定した比較演算子を使用する新しい PropertyObjects に、指定したディクショナリから要素をコピーします。 public PropertyObjects(IDictionary dictionary, IHashCodeProvider codeProvider, IComparer comparer) Parameters dictionary IDictionary 新しい PropertyObjects にコピーする IDictionary 。 codeProvider IHashCodeProvider PropertyObjects 内のすべてのキーにハッシュ コードを提供する IHashCodeProvider 。 または 各キーの GetHashCode() の実装である既定のハッシュ コード プロバイダを使用する場合は null 参照 (Visual Basic では Nothing) 。 comparer IComparer 2 つのキーが等しいかどうかを判断するために使用する IComparer 。 または 各キーの Equals(object) の実装である既定の比較演算子を使用する 場合は null 参照 (Visual Basic では Nothing) 。 Remarks 詳細については Hashtable(IDictionary, IHashCodeProvider, IComparer) を参照してください。 Exceptions ArgumentNullException dictionary が null 参照 (Visual Basic では Nothing) です。 PropertyObjects(IDictionary, float) コピーされる要素の数と同じ初期量を備え、指定したテーブル占有率、 既定のハッシュ コード プロバイダ、および既定の比較演算子を使用する新しい PropertyObjects に、指定したディクショナリから要素をコピーします。 public PropertyObjects(IDictionary dictionary, float loadFactor) Parameters dictionary IDictionary 新しい PropertyObjects にコピーする IDictionary 。 loadFactor float バケット数に対する要素数の最大比率を示す、0.1 から 1.0 までの範囲の数値。 Remarks 詳細については Hashtable(IDictionary, float) を参照してください。 Exceptions ArgumentNullException dictionary が null 参照 (Visual Basic では Nothing) です。 ArgumentOutOfRangeException loadFactor が 0.1 未満です。 <p>または</p><code class=\"paramref\">loadFactor</code> が 1.0 より大きい値です。 PropertyObjects(IDictionary, float, IHashCodeProvider, IComparer) コピーされる要素の数と同じ初期量を備え、指定したテーブル占有率、 指定したハッシュ コード プロバイダ、および指定した比較演算子を使用する新しい PropertyObjects に、指定したディクショナリから要素をコピーします。 public PropertyObjects(IDictionary dictionary, float loadFactor, IHashCodeProvider codeProvider, IComparer comparer) Parameters dictionary IDictionary 新しい PropertyObjects にコピーする IDictionary 。 loadFactor float バケット数に対する要素数の最大比率を示す、0.1 から 1.0 までの範囲の数値。 codeProvider IHashCodeProvider PropertyObjects 内のすべてのキーにハッシュ コードを提供する IHashCodeProvider 。 または 各キーの GetHashCode() の実装である既定のハッシュ コード プロバイダを使用する場合は null 参照 (Visual Basic では Nothing) 。 comparer IComparer 2 つのキーが等しいかどうかを判断するために使用する IComparer 。 または 各キーの Equals(object) の実装である既定の比較演算子を使用する 場合は null 参照 (Visual Basic では Nothing) 。 Remarks 詳細については Hashtable(IDictionary, float, IHashCodeProvider, IComparer) を参照してください。 Exceptions ArgumentNullException dictionary が null 参照 (Visual Basic では Nothing) です。 ArgumentOutOfRangeException loadFactor が 0.1 未満です。 <p>または</p><code class=\"paramref\">loadFactor</code> が 1.0 より大きい値です。 PropertyObjects(IHashCodeProvider, IComparer) コピーされる要素の数と同じ初期量を備え、指定したテーブル占有率、 既定のハッシュ コード プロバイダ、および既定の比較演算子を使用する新しい PropertyObjects に、指定したディクショナリから要素をコピーします。 public PropertyObjects(IHashCodeProvider codeProvider, IComparer comparer) Parameters codeProvider IHashCodeProvider PropertyObjects 内のすべてのキーにハッシュ コードを提供する IHashCodeProvider 。 または 各キーの GetHashCode() の実装である既定のハッシュ コード プロバイダを使用する場合は null 参照 (Visual Basic では Nothing) 。 comparer IComparer 2 つのキーが等しいかどうかを判断するために使用する IComparer 。 または 各キーの Equals(object) の実装である既定の比較演算子を使用する 場合は null 参照 (Visual Basic では Nothing) 。 Remarks 詳細については Hashtable(IHashCodeProvider, IComparer) を参照してください。 PropertyObjects(int) 指定した初期量を備え、既定のテーブル占有率、既定のハッシュ コード プロバイダ、 および既定の比較演算子を使用する、空の PropertyObjects を作成します。 public PropertyObjects(int capacity) Parameters capacity int PropertyObjects が初期状態で格納できる要素の概数。 Remarks 詳細については Hashtable(int) を参照してください。 Exceptions ArgumentOutOfRangeException capacity が 0 未満です。 PropertyObjects(int, IHashCodeProvider, IComparer) コピーされる要素の数と同じ初期量を備え、既定のテーブル占有率、 指定したハッシュ コード プロバイダ、および指定した比較演算子を使用する新しい PropertyObjects に、指定したディクショナリから要素をコピーします。 public PropertyObjects(int capacity, IHashCodeProvider codeProvider, IComparer comparer) Parameters capacity int PropertyObjects が初期状態で格納できる要素の概数。 codeProvider IHashCodeProvider PropertyObjects 内のすべてのキーにハッシュ コードを提供する IHashCodeProvider 。 または 各キーの GetHashCode() の実装である既定のハッシュ コード プロバイダを使用する場合は null 参照 (Visual Basic では Nothing) 。 comparer IComparer 2 つのキーが等しいかどうかを判断するために使用する IComparer 。 または 各キーの Equals(object) の実装である既定の比較演算子を使用する 場合は null 参照 (Visual Basic では Nothing) 。 Remarks 詳細については Hashtable(int, IHashCodeProvider, IComparer) を参照してください。 Exceptions ArgumentOutOfRangeException capacity が 0 未満です。 PropertyObjects(int, int) 指定した初期量を備え、指定したテーブル占有率、既定のハッシュ コード プロバイダ、 および既定の比較演算子を使用する、空の PropertyObjects を作成します。 public PropertyObjects(int capacity, int loadFactor) Parameters capacity int PropertyObjects が初期状態で格納できる要素の概数。 loadFactor int バケット数に対する要素数の最大比率を示す、0.1 から 1.0 までの範囲の数値。 Remarks 詳細については Hashtable(int, float) を参照してください。 Exceptions ArgumentOutOfRangeException capacity が 0 未満です。 <p>または</p><code class=\"paramref\">loadFactor</code> が 0.1 未満です。 <p>または</p><code class=\"paramref\">loadFactor</code> が 1.0 より大きい値です。 PropertyObjects(int, float, IHashCodeProvider, IComparer) 指定した初期量を備え、指定したテーブル占有率、指定した ハッシュ コード プロバイダ、および指定した比較演算子を使用する、 空の PropertyObjects を作成します。 public PropertyObjects(int capacity, float loadFactor, IHashCodeProvider codeProvider, IComparer comparer) Parameters capacity int PropertyObjects が初期状態で格納できる要素の概数。 loadFactor float バケット数に対する要素数の最大比率を示す、0.1 から 1.0 までの範囲の数値。 codeProvider IHashCodeProvider PropertyObjects 内のすべてのキーにハッシュ コードを提供する IHashCodeProvider 。 または 各キーの GetHashCode() の実装である既定のハッシュ コード プロバイダを使用する場合は null 参照 (Visual Basic では Nothing) 。 comparer IComparer 2 つのキーが等しいかどうかを判断するために使用する IComparer 。 または 各キーの Equals(object) の実装である既定の比較演算子を使用する 場合は null 参照 (Visual Basic では Nothing) 。 Remarks 詳細については Hashtable(int, float, IHashCodeProvider, IComparer) を参照してください。 Exceptions ArgumentOutOfRangeException capacity が 0 未満です。 <p>または</p><code class=\"paramref\">loadFactor</code> が 0.1 未満です。 <p>または</p><code class=\"paramref\">loadFactor</code> が 1.0 より大きい値です。 Properties Count PropertyObjects に格納されているキーと値の組み合わせの数を取得します。 public int Count { get; } Property Value int PropertyObjects に格納されているキーと値の組み合わせの数。 Remarks 詳細については Count を参照してください。 IsFixedSize PropertyObjects が固定サイズかどうかを示す値を取得します。 public bool IsFixedSize { get; } Property Value bool PropertyObjects が固定サイズの場合は true 。それ以外の場合は false 。 既定値は <b>false</b> です。 Remarks 詳細については IsFixedSize を参照してください。 IsReadOnly PropertyObjects が読み取り専用かどうかを示す値を取得します。 public bool IsReadOnly { get; } Property Value bool PropertyObjects が読み取り専用の場合は true 。それ以外の場合は false 。 既定値は <b>false</b> です。 Remarks 詳細については IsReadOnly を参照してください。 IsSynchronized PropertyObjects へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。 <p><!-- Non Support 2005/01/20 --> このプロパティは、現在サポートしていません。 </p> public bool IsSynchronized { get; } Property Value bool PropertyObjects へのアクセスが同期されている (スレッド セーフである) 場合は true 。 それ以外の場合は <b>false</b> 。 Remarks 詳細については IsSynchronized を参照してください。 this[string] 指定したキーに関連付けられている値を取得または設定します。 public object this[string key] { get; set; } Parameters key string 値を取得または設定する対象のキー。 Property Value object 指定したキーに関連付けられている値。指定したキーが見つからない場合、 そのキーを取得しようとした場合は null 参照 (Visual Basic では Nothing) が返され、 そのキーを設定しようとした場合は、指定したキーを使用して新しい要素が作成されます。 Remarks 詳細については this[object] を参照してください。 Exceptions ArgumentNullException key が null 参照 (Visual Basic では Nothing) です。 NotSupportedException このプロパティが設定されていますが、 PropertyObjects が読み取り専用です。 または このプロパティが設定されていますが、 key がコレクション内に存在しません。 また、 PropertyObjects が固定サイズです。 Keys PropertyObjects 内のキーを格納している ICollection を取得します。 public ICollection Keys { get; } Property Value ICollection PropertyObjects 内のキーを格納している ICollection 。 Remarks 詳細については Keys を参照してください。 SyncRoot PropertyObjects へのアクセスを同期するために使用できるオブジェクトを取得します。 <p><!-- Non Support 2005/01/20 --> このプロパティは、現在サポートしていません。 </p> public object SyncRoot { get; } Property Value object PropertyObjects へのアクセスを同期するために使用できるオブジェクト。 Remarks 詳細については SyncRoot を参照してください。 Values PropertyObjects 内の値を格納している ICollection を取得します。 public ICollection Values { get; } Property Value ICollection PropertyObjects 内の値を格納している ICollection 。 Remarks 詳細については Values を参照してください。 Methods Add(string, object) 指定したキーおよび値を持つ要素を PropertyObjects に追加します。 public void Add(string key, object value) Parameters key string 追加する要素のキー。 value object 追加する要素の値。 値は null 参照 (Visual Basic では Nothing) に設定できます。 Remarks 詳細については Add(object, object) を参照してください。 Exceptions ArgumentNullException key が null 参照 (Visual Basic では Nothing) です。 ArgumentException 同じキーを持つ要素が、 PropertyObjects に既に存在します。 NotSupportedException PropertyObjects が読み取り専用です。 <p>または</p><xref href=\"MapQuest.Collections.PropertyObjects\" data-throw-if-not-resolved=\"false\"></xref> が固定サイズです。 Clear() PropertyObjects からすべての要素を削除します。 public void Clear() Remarks 詳細については Clear() を参照してください。 Exceptions NotSupportedException PropertyObjects が読み取り専用です。 Clone() PropertyObjects の簡易コピーを生成します。 public PropertyObjects Clone() Returns PropertyObjects PropertyObjects の簡易コピーである新しいオブジェクト。 Contains(string) PropertyObjects に特定のキーが格納されているかどうかを判断します。 public bool Contains(string key) Parameters key string PropertyObjects 内で検索されるキー。 Returns bool 指定したキーを持つ要素が PropertyObjects に格納されている場合は true 。それ以外の場合は false 。 Remarks 詳細については Contains(object) を参照してください。 ContainsKey(string) PropertyObjects に特定のキーが格納されているかどうかを判断します。 public bool ContainsKey(string key) Parameters key string PropertyObjects 内で検索されるキー。 Returns bool 指定したキーを持つ要素が PropertyObjects に格納されている場合は true 。それ以外の場合は false 。 Remarks ほとんどの場合、この実装は O(1) に近くなります。 このメソッドは、 Contains(string) とまったく同じ動作をします。 See Also Contains(string) ContainsValue(object) PropertyObjects に特定の値が格納されているかどうかを判断します。 public bool ContainsValue(object value) Parameters value object PropertyObjects 内で検索される値。 値は null 参照 (Visual Basic では <B>Nothing</B>) に設定できます。 Returns bool 指定した value を持つ要素が PropertyObjects に格納されている場合は true 。それ以外の場合は false 。 Remarks 詳細については ContainsValue(object) を参照してください。 CopyTo(Array, int) 1 次元の Array インスタンスの指定したインデックスに PropertyObjects の要素をコピーします。 public void CopyTo(Array array, int index) Parameters array Array PropertyObjects から要素がコピーされる 1 次元の Array 。 この配列には、0 から始まるインデックス番号が必要です。 index int コピーの開始位置となる、array の 0 から始まるインデックス番号。 Remarks 詳細については CopyTo(Array, int) を参照してください。 Exceptions ArgumentNullException array が null 参照 (Visual Basic では Nothing) です。 ArgumentOutOfRangeException index が 0 未満です。 ArgumentException array が多次元です。 <p>または</p><code class=\"paramref\">index</code> が <code class=\"paramref\">array</code> の長さ以上です。 <p>または</p> コピー元の <xref href=\"MapQuest.Collections.PropertyObjects\" data-throw-if-not-resolved=\"false\"></xref> の <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> 数が、コピー先の <code class=\"paramref\">array</code> に格納できる要素の数を超えています。 InvalidCastException コピー元の PropertyObjects の型が、コピー先の array の型に自動的にキャストできません。 GetEnumerator() PropertyObjects を反復処理できる列挙子 PropertyObjectsEnumerator を作成します。 public PropertyObjectsEnumerator GetEnumerator() Returns PropertyObjectsEnumerator PropertyObjects の PropertyObjectsEnumerator 。 Remarks 詳細については GetEnumerator() を参照してください。 Remove(string) 指定したキーを持つ要素を PropertyObjects から削除します。 public void Remove(string key) Parameters key string 削除する要素のキー。 Remarks 詳細については Remove(object) を参照してください。 Exceptions ArgumentNullException key が null 参照 (Visual Basic では Nothing) です。 NotSupportedException PropertyObjects が読み取り専用です。 <p>または</p><xref href=\"MapQuest.Collections.PropertyObjects\" data-throw-if-not-resolved=\"false\"></xref> が固定サイズです。 Synchronized(PropertyObjects) PropertyObjects 用の同期された (スレッド セーフな) ラッパーを返します。 public static PropertyObjects Synchronized(PropertyObjects nonSync) Parameters nonSync PropertyObjects 同期する PropertyObjects 。 Returns PropertyObjects PropertyObjects 用の同期された (スレッド セーフな) ラッパー。 Remarks 詳細については Synchronized(Hashtable) を参照してください。 Exceptions ArgumentNullException nonSync が null 参照 (Visual Basic では Nothing) です。 See Also Hashtable"
  },
  "api/MapQuest.Collections.PropertyObjectsEnumerator.html": {
    "href": "api/MapQuest.Collections.PropertyObjectsEnumerator.html",
    "title": "Class PropertyObjectsEnumerator | mysite",
    "keywords": "Class PropertyObjectsEnumerator Namespace MapQuest.Collections Assembly MapQuest.Core.dll PropertyObjects に対する単純な反復処理をサポートします。 public class PropertyObjectsEnumerator : IDictionaryEnumerator, IEnumerator Inheritance object PropertyObjectsEnumerator Implements IDictionaryEnumerator IEnumerator Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks PropertyObjectsEnumerator は、PropertyObjects 用に最適化された IEnumerator を提供します。 Properties Current コレクション内の現在の要素を取得します。 public object Current { get; } Property Value object コレクション内の現在の要素。 Remarks 詳細については Current を参照してください。 ただし、コレクションが、MoveNext() または Reset() の呼び出し後に変更された場合は、エラーとなる点に注意してください。 Exceptions InvalidOperationException 列挙子が、コレクションの最初の要素の前、または最後の要素の後に位置しています。 または 列挙子が作成された後に、コレクションが変更されました。 Entry クラスによって実装された場合は、現在のディクショナリ エントリのキーと値の両方を取得します。 public DictionaryEntry Entry { get; } Property Value DictionaryEntry 現在のディクショナリ エントリのキーと値の両方を格納している DictionaryEntry 。 Remarks 詳細については Entry を参照してください。 Exceptions InvalidOperationException IDictionaryEnumerator が、ディクショナリの最初のエントリの前、 または最後のエントリの後に位置しています。 <p>または</p><xref href=\"System.Collections.IDictionaryEnumerator\" data-throw-if-not-resolved=\"false\"></xref> の作成後にディクショナリが変更されています。 Key クラスによって実装された場合は、現在のディクショナリ エントリのキーを取得します。 public string Key { get; } Property Value string 列挙体の現在の要素のキー。 Remarks 詳細については Key を参照してください。 Exceptions InvalidOperationException IDictionaryEnumerator が、ディクショナリの最初のエントリの前、 または最後のエントリの後に位置しています。 <p>または</p><xref href=\"System.Collections.IDictionaryEnumerator\" data-throw-if-not-resolved=\"false\"></xref> の作成後にディクショナリが変更されています。 Value クラスによって実装された場合は、現在のディクショナリ エントリの値を取得します。 public object Value { get; } Property Value object 列挙体の現在の要素の値。 Remarks 詳細については Value を参照してください。 Exceptions InvalidOperationException IDictionaryEnumerator が、ディクショナリの最初のエントリの前、 または最後のエントリの後に位置しています。 <p>または</p><xref href=\"System.Collections.IDictionaryEnumerator\" data-throw-if-not-resolved=\"false\"></xref> の作成後にディクショナリが変更されています。 Methods MoveNext() 列挙子をコレクションの次の要素に進めます。 public bool MoveNext() Returns bool 列挙子が次の要素に正常に進んだ場合は true 。 列挙子がコレクションの末尾を越えた場合は false 。 Remarks 詳細については MoveNext() を参照してください。 Exceptions InvalidOperationException 列挙子が作成された後に、コレクションが変更されました。 </p> Reset() 列挙子を初期位置、つまりコレクションの最初の要素の前に設定します。 public void Reset() Remarks 詳細については Reset() を参照してください。 Exceptions InvalidOperationException 列挙子が作成された後に、コレクションが変更されました。 </p> See Also IDictionaryEnumerator"
  },
  "api/MapQuest.Collections.PropertyStrings.html": {
    "href": "api/MapQuest.Collections.PropertyStrings.html",
    "title": "Class PropertyStrings | mysite",
    "keywords": "Class PropertyStrings Namespace MapQuest.Collections Assembly MapQuest.Core.dll キーのハッシュ コードに基づいて編成された、string 用のキーと値の組み合わせのコレクションを表します。 public class PropertyStrings : IDictionary, ICollection, IEnumerable, ICloneable Inheritance object PropertyStrings Implements IDictionary ICollection IEnumerable ICloneable Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks PropertyStrings は、 string 用に最適化された Hashtable を提供します。 <p> 詳細については <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> を参照してください。 </p> Constructors PropertyStrings() 既定の初期量を備え、既定のテーブル占有率、既定のハッシュ コード プロバイダ、 および既定の比較演算子を使用する、空の PropertyStrings を作成します。 public PropertyStrings() Remarks 詳細については Hashtable() を参照してください。 PropertyStrings(PropertyStrings) PropertyStrings を指定して、新しいインスタンスを初期化します。 public PropertyStrings(PropertyStrings original) Parameters original PropertyStrings PropertyStrings オブジェクト。 Remarks PropertyStrings をコピーするためのコピー コンストラクタです。 PropertyStrings(IDictionary) コピーされる要素の数と同じ初期量を備え、既定のテーブル占有率、 既定のハッシュ コード プロバイダ、および既定の比較演算子を使用する新しい PropertyStrings に、指定したディクショナリから要素をコピーします。 public PropertyStrings(IDictionary dictionary) Parameters dictionary IDictionary 新しい PropertyStrings にコピーする IDictionary 。 Remarks 詳細については Hashtable(IDictionary) を参照してください。 Exceptions ArgumentNullException dictionary が null 参照 (Visual Basic では Nothing) です。 PropertyStrings(IDictionary, IHashCodeProvider, IComparer) コピーされる要素の数と同じ初期量を備え、既定のテーブル占有率、 指定したハッシュ コード プロバイダ、および指定した比較演算子を使用する新しい PropertyStrings に、指定したディクショナリから要素をコピーします。 public PropertyStrings(IDictionary dictionary, IHashCodeProvider codeProvider, IComparer comparer) Parameters dictionary IDictionary 新しい PropertyStrings にコピーする IDictionary 。 codeProvider IHashCodeProvider PropertyStrings 内のすべてのキーにハッシュ コードを提供する IHashCodeProvider 。 または 各キーの GetHashCode() の実装である既定のハッシュ コード プロバイダを使用する場合は null 参照 (Visual Basic では Nothing) 。 comparer IComparer 2 つのキーが等しいかどうかを判断するために使用する IComparer 。 または 各キーの Equals(object) の実装である既定の比較演算子を使用する 場合は null 参照 (Visual Basic では Nothing) 。 Remarks 詳細については Hashtable(IDictionary, IHashCodeProvider, IComparer) を参照してください。 Exceptions ArgumentNullException dictionary が null 参照 (Visual Basic では Nothing) です。 PropertyStrings(IDictionary, float) コピーされる要素の数と同じ初期量を備え、指定したテーブル占有率、 既定のハッシュ コード プロバイダ、および既定の比較演算子を使用する新しい PropertyStrings に、指定したディクショナリから要素をコピーします。 public PropertyStrings(IDictionary dictionary, float loadFactor) Parameters dictionary IDictionary 新しい PropertyStrings にコピーする IDictionary 。 loadFactor float バケット数に対する要素数の最大比率を示す、0.1 から 1.0 までの範囲の数値。 Remarks 詳細については Hashtable(IDictionary, float) を参照してください。 Exceptions ArgumentNullException dictionary が null 参照 (Visual Basic では Nothing) です。 ArgumentOutOfRangeException loadFactor が 0.1 未満です。 <p>または</p><code class=\"paramref\">loadFactor</code> が 1.0 より大きい値です。 PropertyStrings(IDictionary, float, IHashCodeProvider, IComparer) コピーされる要素の数と同じ初期量を備え、指定したテーブル占有率、 指定したハッシュ コード プロバイダ、および指定した比較演算子を使用する新しい PropertyStrings に、指定したディクショナリから要素をコピーします。 public PropertyStrings(IDictionary dictionary, float loadFactor, IHashCodeProvider codeProvider, IComparer comparer) Parameters dictionary IDictionary 新しい PropertyStrings にコピーする IDictionary 。 loadFactor float バケット数に対する要素数の最大比率を示す、0.1 から 1.0 までの範囲の数値。 codeProvider IHashCodeProvider PropertyStrings 内のすべてのキーにハッシュ コードを提供する IHashCodeProvider 。 または 各キーの GetHashCode() の実装である既定のハッシュ コード プロバイダを使用する場合は null 参照 (Visual Basic では Nothing) 。 comparer IComparer 2 つのキーが等しいかどうかを判断するために使用する IComparer 。 または 各キーの Equals(object) の実装である既定の比較演算子を使用する 場合は null 参照 (Visual Basic では Nothing) 。 Remarks 詳細については Hashtable(IDictionary, float, IHashCodeProvider, IComparer) を参照してください。 Exceptions ArgumentNullException dictionary が null 参照 (Visual Basic では Nothing) です。 ArgumentOutOfRangeException loadFactor が 0.1 未満です。 <p>または</p><code class=\"paramref\">loadFactor</code> が 1.0 より大きい値です。 PropertyStrings(IHashCodeProvider, IComparer) コピーされる要素の数と同じ初期量を備え、指定したテーブル占有率、 既定のハッシュ コード プロバイダ、および既定の比較演算子を使用する新しい PropertyStrings に、指定したディクショナリから要素をコピーします。 public PropertyStrings(IHashCodeProvider codeProvider, IComparer comparer) Parameters codeProvider IHashCodeProvider PropertyStrings 内のすべてのキーにハッシュ コードを提供する IHashCodeProvider 。 または 各キーの GetHashCode() の実装である既定のハッシュ コード プロバイダを使用する場合は null 参照 (Visual Basic では Nothing) 。 comparer IComparer 2 つのキーが等しいかどうかを判断するために使用する IComparer 。 または 各キーの Equals(object) の実装である既定の比較演算子を使用する 場合は null 参照 (Visual Basic では Nothing) 。 Remarks 詳細については Hashtable(IHashCodeProvider, IComparer) を参照してください。 PropertyStrings(int) 指定した初期量を備え、既定のテーブル占有率、既定のハッシュ コード プロバイダ、 および既定の比較演算子を使用する、空の PropertyStrings を作成します。 public PropertyStrings(int capacity) Parameters capacity int PropertyStrings が初期状態で格納できる要素の概数。 Remarks 詳細については Hashtable(int) を参照してください。 Exceptions ArgumentOutOfRangeException capacity が 0 未満です。 PropertyStrings(int, IHashCodeProvider, IComparer) コピーされる要素の数と同じ初期量を備え、既定のテーブル占有率、 指定したハッシュ コード プロバイダ、および指定した比較演算子を使用する新しい PropertyStrings に、指定したディクショナリから要素をコピーします。 public PropertyStrings(int capacity, IHashCodeProvider codeProvider, IComparer comparer) Parameters capacity int PropertyStrings が初期状態で格納できる要素の概数。 codeProvider IHashCodeProvider PropertyStrings 内のすべてのキーにハッシュ コードを提供する IHashCodeProvider 。 または 各キーの GetHashCode() の実装である既定のハッシュ コード プロバイダを使用する場合は null 参照 (Visual Basic では Nothing) 。 comparer IComparer 2 つのキーが等しいかどうかを判断するために使用する IComparer 。 または 各キーの Equals(object) の実装である既定の比較演算子を使用する 場合は null 参照 (Visual Basic では Nothing) 。 Remarks 詳細については Hashtable(int, IHashCodeProvider, IComparer) を参照してください。 Exceptions ArgumentOutOfRangeException capacity が 0 未満です。 PropertyStrings(int, int) 指定した初期量を備え、指定したテーブル占有率、既定のハッシュ コード プロバイダ、 および既定の比較演算子を使用する、空の PropertyStrings を作成します。 public PropertyStrings(int capacity, int loadFactor) Parameters capacity int PropertyStrings が初期状態で格納できる要素の概数。 loadFactor int バケット数に対する要素数の最大比率を示す、0.1 から 1.0 までの範囲の数値。 Remarks 詳細については Hashtable(int, float) を参照してください。 Exceptions ArgumentOutOfRangeException capacity が 0 未満です。 <p>または</p><code class=\"paramref\">loadFactor</code> が 0.1 未満です。 <p>または</p><code class=\"paramref\">loadFactor</code> が 1.0 より大きい値です。 PropertyStrings(int, float, IHashCodeProvider, IComparer) 指定した初期量を備え、指定したテーブル占有率、指定した ハッシュ コード プロバイダ、および指定した比較演算子を使用する、 空の PropertyStrings を作成します。 public PropertyStrings(int capacity, float loadFactor, IHashCodeProvider codeProvider, IComparer comparer) Parameters capacity int PropertyStrings が初期状態で格納できる要素の概数。 loadFactor float バケット数に対する要素数の最大比率を示す、0.1 から 1.0 までの範囲の数値。 codeProvider IHashCodeProvider PropertyStrings 内のすべてのキーにハッシュ コードを提供する IHashCodeProvider 。 または 各キーの GetHashCode() の実装である既定のハッシュ コード プロバイダを使用する場合は null 参照 (Visual Basic では Nothing) 。 comparer IComparer 2 つのキーが等しいかどうかを判断するために使用する IComparer 。 または 各キーの Equals(object) の実装である既定の比較演算子を使用する 場合は null 参照 (Visual Basic では Nothing) 。 Remarks 詳細については Hashtable(int, float, IHashCodeProvider, IComparer) を参照してください。 Exceptions ArgumentOutOfRangeException capacity が 0 未満です。 <p>または</p><code class=\"paramref\">loadFactor</code> が 0.1 未満です。 <p>または</p><code class=\"paramref\">loadFactor</code> が 1.0 より大きい値です。 Properties Count PropertyStrings に格納されているキーと値の組み合わせの数を取得します。 public int Count { get; } Property Value int PropertyStrings に格納されているキーと値の組み合わせの数。 Remarks 詳細については Count を参照してください。 IsFixedSize PropertyStrings が固定サイズかどうかを示す値を取得します。 public bool IsFixedSize { get; } Property Value bool PropertyStrings が固定サイズの場合は true 。それ以外の場合は false 。 既定値は <b>false</b> です。 Remarks 詳細については IsFixedSize を参照してください。 IsReadOnly PropertyStrings が読み取り専用かどうかを示す値を取得します。 public bool IsReadOnly { get; } Property Value bool PropertyStrings が読み取り専用の場合は true 。それ以外の場合は false 。 既定値は <b>false</b> です。 Remarks 詳細については IsReadOnly を参照してください。 IsSynchronized PropertyStrings へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。 <p><!-- Non Support 2005/01/20 --> このプロパティは、現在サポートしていません。 </p> public bool IsSynchronized { get; } Property Value bool PropertyStrings へのアクセスが同期されている (スレッド セーフである) 場合は true 。 それ以外の場合は <b>false</b> 。 Remarks 詳細については IsSynchronized を参照してください。 this[string] 指定したキーに関連付けられている値を取得または設定します。 public string this[string key] { get; set; } Parameters key string 値を取得または設定する対象のキー。 Property Value string 指定したキーに関連付けられている値。指定したキーが見つからない場合、 そのキーを取得しようとした場合は null 参照 (Visual Basic では Nothing) が返され、 そのキーを設定しようとした場合は、指定したキーを使用して新しい要素が作成されます。 Remarks 詳細については this[object] を参照してください。 Exceptions ArgumentNullException key が null 参照 (Visual Basic では Nothing) です。 NotSupportedException このプロパティが設定されていますが、 PropertyStrings が読み取り専用です。 または このプロパティが設定されていますが、 key がコレクション内に存在しません。 また、 PropertyStrings が固定サイズです。 Keys PropertyStrings 内のキーを格納している ICollection を取得します。 public ICollection Keys { get; } Property Value ICollection PropertyStrings 内のキーを格納している ICollection 。 Remarks 詳細については Keys を参照してください。 SyncRoot PropertyStrings へのアクセスを同期するために使用できるオブジェクトを取得します。 <p><!-- Non Support 2005/01/20 --> このプロパティは、現在サポートしていません。 </p> public object SyncRoot { get; } Property Value object PropertyStrings へのアクセスを同期するために使用できるオブジェクト。 Remarks 詳細については SyncRoot を参照してください。 Values PropertyStrings 内の値を格納している ICollection を取得します。 public ICollection Values { get; } Property Value ICollection PropertyStrings 内の値を格納している ICollection 。 Remarks 詳細については Values を参照してください。 Methods Add(string, string) 指定したキーおよび値を持つ要素を PropertyStrings に追加します。 public void Add(string key, string value) Parameters key string 追加する要素のキー。 value string 追加する要素の値。 値は null 参照 (Visual Basic では Nothing) に設定できます。 Remarks 詳細については Add(object, object) を参照してください。 Exceptions ArgumentNullException key が null 参照 (Visual Basic では Nothing) です。 ArgumentException 同じキーを持つ要素が、 PropertyStrings に既に存在します。 NotSupportedException PropertyStrings が読み取り専用です。 <p>または</p><xref href=\"MapQuest.Collections.PropertyStrings\" data-throw-if-not-resolved=\"false\"></xref> が固定サイズです。 Clear() PropertyStrings からすべての要素を削除します。 public void Clear() Remarks 詳細については Clear() を参照してください。 Exceptions NotSupportedException PropertyStrings が読み取り専用です。 Clone() PropertyStrings の簡易コピーを生成します。 public PropertyStrings Clone() Returns PropertyStrings PropertyStrings の簡易コピーである新しいオブジェクト。 Contains(string) PropertyStrings に特定のキーが格納されているかどうかを判断します。 public bool Contains(string key) Parameters key string PropertyStrings 内で検索されるキー。 Returns bool 指定したキーを持つ要素が PropertyStrings に格納されている場合は true 。それ以外の場合は false 。 Remarks 詳細については Contains(object) を参照してください。 ContainsKey(string) PropertyStrings に特定のキーが格納されているかどうかを判断します。 public bool ContainsKey(string key) Parameters key string PropertyStrings 内で検索されるキー。 Returns bool 指定したキーを持つ要素が PropertyStrings に格納されている場合は true 。それ以外の場合は false 。 Remarks ほとんどの場合、この実装は O(1) に近くなります。 このメソッドは、 Contains(string) とまったく同じ動作をします。 See Also Contains(string) ContainsValue(string) PropertyStrings に特定の値が格納されているかどうかを判断します。 public bool ContainsValue(string value) Parameters value string PropertyStrings 内で検索される値。 値は null 参照 (Visual Basic では <B>Nothing</B>) に設定できます。 Returns bool 指定した value を持つ要素が PropertyStrings に格納されている場合は true 。それ以外の場合は false 。 Remarks 詳細については ContainsValue(object) を参照してください。 CopyTo(Array, int) 1 次元の Array インスタンスの指定したインデックスに PropertyStrings の要素をコピーします。 public void CopyTo(Array array, int index) Parameters array Array PropertyStrings から要素がコピーされる 1 次元の Array 。 この配列には、0 から始まるインデックス番号が必要です。 index int コピーの開始位置となる、array の 0 から始まるインデックス番号。 Remarks 詳細については CopyTo(Array, int) を参照してください。 Exceptions ArgumentNullException array が null 参照 (Visual Basic では Nothing) です。 ArgumentOutOfRangeException index が 0 未満です。 ArgumentException array が多次元です。 <p>または</p><code class=\"paramref\">index</code> が <code class=\"paramref\">array</code> の長さ以上です。 <p>または</p> コピー元の <xref href=\"MapQuest.Collections.PropertyStrings\" data-throw-if-not-resolved=\"false\"></xref> の <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> 数が、コピー先の <code class=\"paramref\">array</code> に格納できる要素の数を超えています。 InvalidCastException コピー元の PropertyStrings の型が、コピー先の array の型に自動的にキャストできません。 GetEnumerator() PropertyStrings を反復処理できる列挙子 PropertyStringsEnumerator を作成します。 public PropertyStringsEnumerator GetEnumerator() Returns PropertyStringsEnumerator PropertyStrings の PropertyStringsEnumerator 。 Remarks 詳細については GetEnumerator() を参照してください。 Remove(string) 指定したキーを持つ要素を PropertyStrings から削除します。 public void Remove(string key) Parameters key string 削除する要素のキー。 Remarks 詳細については Remove(object) を参照してください。 Exceptions ArgumentNullException key が null 参照 (Visual Basic では Nothing) です。 NotSupportedException PropertyStrings が読み取り専用です。 <p>または</p><xref href=\"MapQuest.Collections.PropertyStrings\" data-throw-if-not-resolved=\"false\"></xref> が固定サイズです。 Synchronized(PropertyStrings) PropertyStrings 用の同期された (スレッド セーフな) ラッパーを返します。 public static PropertyStrings Synchronized(PropertyStrings nonSync) Parameters nonSync PropertyStrings 同期する PropertyStrings 。 Returns PropertyStrings PropertyStrings 用の同期された (スレッド セーフな) ラッパー。 Remarks 詳細については Synchronized(Hashtable) を参照してください。 Exceptions ArgumentNullException nonSync が null 参照 (Visual Basic では Nothing) です。 See Also Hashtable"
  },
  "api/MapQuest.Collections.PropertyStringsEnumerator.html": {
    "href": "api/MapQuest.Collections.PropertyStringsEnumerator.html",
    "title": "Class PropertyStringsEnumerator | mysite",
    "keywords": "Class PropertyStringsEnumerator Namespace MapQuest.Collections Assembly MapQuest.Core.dll PropertyStrings に対する単純な反復処理をサポートします。 public class PropertyStringsEnumerator : IDictionaryEnumerator, IEnumerator Inheritance object PropertyStringsEnumerator Implements IDictionaryEnumerator IEnumerator Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks PropertyStringsEnumerator は、PropertyStrings 用に最適化された IEnumerator を提供します。 Properties Current コレクション内の現在の要素を取得します。 public object Current { get; } Property Value object コレクション内の現在の要素。 Remarks 詳細については Current を参照してください。 ただし、コレクションが、MoveNext() または Reset() の呼び出し後に変更された場合は、エラーとなる点に注意してください。 Exceptions InvalidOperationException 列挙子が、コレクションの最初の要素の前、または最後の要素の後に位置しています。 または 列挙子が作成された後に、コレクションが変更されました。 Entry クラスによって実装された場合は、現在のディクショナリ エントリのキーと値の両方を取得します。 public DictionaryEntry Entry { get; } Property Value DictionaryEntry 現在のディクショナリ エントリのキーと値の両方を格納している DictionaryEntry 。 Remarks 詳細については Entry を参照してください。 Exceptions InvalidOperationException IDictionaryEnumerator が、ディクショナリの最初のエントリの前、 または最後のエントリの後に位置しています。 <p>または</p><xref href=\"System.Collections.IDictionaryEnumerator\" data-throw-if-not-resolved=\"false\"></xref> の作成後にディクショナリが変更されています。 Key クラスによって実装された場合は、現在のディクショナリ エントリのキーを取得します。 public string Key { get; } Property Value string 列挙体の現在の要素のキー。 Remarks 詳細については Key を参照してください。 Exceptions InvalidOperationException IDictionaryEnumerator が、ディクショナリの最初のエントリの前、 または最後のエントリの後に位置しています。 <p>または</p><xref href=\"System.Collections.IDictionaryEnumerator\" data-throw-if-not-resolved=\"false\"></xref> の作成後にディクショナリが変更されています。 Value クラスによって実装された場合は、現在のディクショナリ エントリの値を取得します。 public string Value { get; } Property Value string 列挙体の現在の要素の値。 Remarks 詳細については Value を参照してください。 Exceptions InvalidOperationException IDictionaryEnumerator が、ディクショナリの最初のエントリの前、 または最後のエントリの後に位置しています。 <p>または</p><xref href=\"System.Collections.IDictionaryEnumerator\" data-throw-if-not-resolved=\"false\"></xref> の作成後にディクショナリが変更されています。 Methods MoveNext() 列挙子をコレクションの次の要素に進めます。 public bool MoveNext() Returns bool 列挙子が次の要素に正常に進んだ場合は true 。 列挙子がコレクションの末尾を越えた場合は false 。 Remarks 詳細については MoveNext() を参照してください。 Exceptions InvalidOperationException 列挙子が作成された後に、コレクションが変更されました。 </p> Reset() 列挙子を初期位置、つまりコレクションの最初の要素の前に設定します。 public void Reset() Remarks 詳細については Reset() を参照してください。 Exceptions InvalidOperationException 列挙子が作成された後に、コレクションが変更されました。 </p> See Also IDictionaryEnumerator"
  },
  "api/MapQuest.Collections.ShortArray.html": {
    "href": "api/MapQuest.Collections.ShortArray.html",
    "title": "Class ShortArray | mysite",
    "keywords": "Class ShortArray Namespace MapQuest.Collections Assembly MapQuest.Core.dll タイプセーフである System.Short の配列を定義します。 public class ShortArray : ICloneable, IEnumerable<short>, IEnumerable Inheritance object ShortArray Implements ICloneable IEnumerable<short> IEnumerable Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors ShortArray() 空で、デフォルトの初期量を備えた、 ShortArray クラスの新しいインスタンスを初期化します。 public ShortArray() Remarks 詳細については System.Collections.ArrayList() を参照してください。 ShortArray(ShortArray) 指定した ShortArray からコピーした System.Int16 を格納し、 コピーされる System.Int16 の数と同じ初期量を備えた、 ShortArray クラスの新しいインスタンスを初期化します。 public ShortArray(ShortArray c) Parameters c ShortArray 新しい配列に要素が追加された ShortArray 。 Remarks 詳細については System.Collections.ArrayList(ICollection) を参照してください。 Exceptions ArgumentNullException c が null 参照 (Visual Basic では Nothing) です。 ShortArray(short[]) 指定した System.Int16 の配列からコピーした System.Int16 を格納し、 コピーされる System.Int16 の数と同じ初期量を備えた、 ShortArray クラスの新しいインスタンスを初期化します。 public ShortArray(short[] a) Parameters a short[] 新しい配列に要素が追加された ShortArray 。 Remarks 詳細については System.Collections.ArrayList(ICollection) を参照してください。 Exceptions ArgumentNullException c が null 参照 (Visual Basic では Nothing) です。 ShortArray(int) 空で、指定した初期量を備えた、 ShortArray クラスの新しいインスタンスを初期化します。 public ShortArray(int capacity) Parameters capacity int 初期状態の新しい配列に格納できる System.Int16 の数。 Remarks 詳細については System.Collections.ArrayList(Int32) を参照してください。 Exceptions ArgumentOutOfRangeException capacity が 0 未満です。 Properties Capacity ShortArray に格納できる要素の数を取得または設定します。 public int Capacity { get; set; } Property Value int ShortArray に格納できる要素の数。 0 が指定された場合は規定値を設定します。 現在設定されている数より小さい場合は例外を発行します。 Remarks 詳細については System.Collections.ArrayList.Capacity を参照してください。 Exceptions ArgumentOutOfRangeException Capacity が Count より小さい値に設定されています。 Count ShortArray に格納されている System.Int16 の数を取得します。 public int Count { get; } Property Value int ShortArray に格納されている要素の数。 Remarks 詳細については System.Collections.ArrayList.Count を参照してください。 IsFixedSize ShortArray が固定サイズかどうかを示す値を取得します。 public bool IsFixedSize { get; } Property Value bool 現在の実装では必ず false です。 Remarks 詳細については System.Collections.ArrayList.IsFixedSize を参照してください。 IsReadOnly ShortArray が読み取り専用かどうかを示す値を取得します。 public bool IsReadOnly { get; } Property Value bool 現在の実装では必ず false です。 Remarks 詳細については System.Collections.ArrayList.IsReadOnly を参照してください。 IsSynchronized ShortArray へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。 <p><!-- Non Support 2005/01/20 --> このプロパティは、現在サポートしていません。 </p> public bool IsSynchronized { get; } Property Value bool ShortArray へのアクセスが同期されている (スレッド セーフである) 場合は true 。 それ以外の場合は false 。 Remarks 詳細については System.Collections.ArrayList.IsSynchronized を参照してください。 this[int] 指定された System.Int16 を取得または設定します。 public short this[int index] { get; set; } Parameters index int 取得または設定する要素の、0 から始まるインデックス番号。 Property Value short 指定したインデックスにある System.Int16 。 Remarks 詳細については System.Collections.IList.this を参照してください。 Exceptions ArgumentOutOfRangeException index が 0 未満です。 または index が Count 以上です。 SyncRoot ShortArray へのアクセスを同期するために使用できるオブジェクトを取得します。 <p><!-- Non Support 2005/01/20 --> このプロパティは、現在サポートしていません。 </p> public object SyncRoot { get; } Property Value object ShortArray へのアクセスを同期するために使用できるオブジェクト。 Remarks 詳細については System.Collections.ArrayList.SyncRoot を参照してください。 Methods Add(short) ShortArray の末尾に System.Int16 を追加します。 public int Add(short item) Parameters item short ShortArray の末尾に追加する System.Int16 。 Returns int item が追加された位置の ShortArray インデックス。 Remarks 詳細については System.Collections.ArrayList.Add を参照してください。 AddRange(ShortArray) 指定した ShortArray の要素をコピーします。 public int AddRange(ShortArray x) Parameters x ShortArray コレクションに追加するオブジェクトを格納する ShortArray 。 Returns int ShortArray に格納されている要素の数。 Remarks 詳細については System.Collections.ArrayList.AddRange を参照してください。 Exceptions ArgumentNullException x が null 参照 (Visual Basic では Nothing) です。 AddRange(short[]) 指定した System.Int16 配列の要素をコピーします。 public int AddRange(short[] x) Parameters x short[] コレクションに追加するオブジェクトを格納する System.Int16 型の配列。 Returns int ShortArray に格納されている要素の数。 Remarks 詳細については System.Collections.ArrayList.AddRange を参照してください。 Exceptions ArgumentNullException x が null 参照 (Visual Basic では Nothing) です。 Clear() ShortArray からすべての System.Int16 を削除します。 public void Clear() Remarks 詳細については System.Collections.ArrayList.Clear を参照してください。 Clone() ShortArray の簡易コピーを生成します。 public object Clone() Returns object ShortArray の簡易コピーである新しいオブジェクト。 Contains(short) ある System.Int16 が ShortArray 内に存在するかどうかを判断します。 public bool Contains(short item) Parameters item short ShortArray 内で検索される System.Int16 。 Returns bool item が ShortArray に存在する場合は true 。それ以外の場合は false 。 Remarks 詳細については System.Collections.ArrayList.Contains を参照してください。 CopyTo(short[]) ShortArray 全体を互換性のある 1 次元の System.Int16 にコピーします。コピー操作は、コピー先の配列の先頭から始まります。 public void CopyTo(short[] array) Parameters array short[] ShortArray から要素がコピーされる System.Int16 の 1 次元配列。この配列には、0 から始まるインデックス番号が必要です。 Remarks 詳細については System.Collections.ArrayList.CopyTo を参照してください。 Exceptions ArgumentNullException array が null 参照 (Visual Basic では Nothing) です。 ArgumentException array が多次元です。 </p> または コピー元の ShortArray の System.Int16 数が、コピー先の array に格納できる要素の数を超えています。 </p> CopyTo(short[], int) ShortArray 全体を互換性のある 1 次元の System.Int16 にコピーします。コピー操作は、コピー先の配列の指定したインデックスから始まります。 public void CopyTo(short[] array, int start) Parameters array short[] ShortArray から要素がコピーされる System.Int16 の 1 次元配列。この配列には、0 から始まるインデックス番号が必要です。 start int コピーの開始位置となる、 0 から始まるインデックス番号。 Remarks 詳細については System.Collections.ArrayList.CopyTo を参照してください。 Exceptions ArgumentNullException array が null 参照 (Visual Basic では Nothing) です。 ArgumentOutOfRangeException start が 0 未満です。 ArgumentException array が多次元です。 </p> または start が array の長さ以上です。 </p> または コピー元の ShortArray の System.Int16 数が、 start からコピー先の array の末尾までに格納できる数を超えています。 </p> GetEnumerator() public IEnumerator<short> GetEnumerator() Returns IEnumerator<short> IndexOf(short) 指定した System.Int16 を検索し、 ShortArray 内で最初に見つかった位置の 0 から始まるインデックスを返します。 public int IndexOf(short item) Parameters item short ShortArray 内で検索される System.Int16 。 Returns int ShortArray 内で item が見つかった場合は、最初に見つかった位置の 0 から始まるインデックス番号。 それ以外の場合は -1。 Remarks 詳細については System.Collections.ArrayList.IndexOf を参照してください。 Insert(int, short) ShortArray 内の指定したインデックスの位置に要素を挿入します。 public void Insert(int index, short item) Parameters index int item を挿入する位置の、0 から始まるインデックス番号。 item short 挿入する System.Int16 。 Remarks 詳細については System.Collections.ArrayList.Insert を参照してください。 Exceptions ArgumentOutOfRangeException index が 0 未満です。 </p> または index が Count より大きい値です。 </p> Remove(short) ShortArray 内から指定された System.Int16 を削除します。 public void Remove(short item) Parameters item short ShortArray から削除する System.Int16 。 Remarks 詳細については System.Collections.ArrayList.Remove を参照してください。 Exceptions ArgumentException item が配列内に見つかりません。 RemoveAt(int) ShortArray の指定したインデックスにある System.Int16 を削除します。 public void RemoveAt(int index) Parameters index int 削除する System.Int16 の、0 から始まるインデックス番号。 Remarks 詳細については System.Collections.ArrayList.RemoveAt を参照してください。 Exceptions ArgumentOutOfRangeException index が 0 未満です。 </p> または index が Count 以上です。 </p> ToArray() ShortArray の要素を System.Int16 の配列として取得します。 public short[] ToArray() Returns short[] ShortArray の要素を格納する System.Int16 配列。 TrimToSize() 容量を ShortArray 内にある実際の System.Int16 数に設定します。 public void TrimToSize() Remarks 詳細については System.Collections.ArrayList.TrimToSize を参照してください。"
  },
  "api/MapQuest.Collections.StringList.html": {
    "href": "api/MapQuest.Collections.StringList.html",
    "title": "Class StringList | mysite",
    "keywords": "Class StringList Namespace MapQuest.Collections Assembly MapQuest.Core.dll 必要に応じてサイズが動的に増加する配列を使用して、 IStringList インターフェイスを実装します。 public class StringList : IStringList, IStringCollection, IEnumerable<string>, IList, ICollection, IEnumerable, ICloneable Inheritance object StringList Implements IStringList IStringCollection IEnumerable<string> IList ICollection IEnumerable ICloneable Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks StringList は、 string 用に最適化された ArrayList を提供します。 Constructors StringList() 空で、デフォルトの初期量を備えた、 StringList クラスの新しいインスタンスを初期化します。 public StringList() Remarks 詳細については ArrayList() を参照してください。 StringList(StringList) 指定したコレクションからコピーした要素を格納し、 コピーされる要素の数と同じ初期量を備えた、 StringList クラスの新しいインスタンスを初期化します。 public StringList(StringList collection) Parameters collection StringList 新しいリストに要素が追加された StringList 。 Remarks 詳細については ArrayList(ICollection) を参照してください。 Exceptions ArgumentNullException collection が null 参照 (Visual Basic では Nothing) です。 StringList(int) 空で、指定した初期量を備えた、 StringList クラスの新しいインスタンスを初期化します。 public StringList(int capacity) Parameters capacity int 初期状態の新しいリストに格納できる要素の数。 Remarks 詳細については ArrayList(int) を参照してください。 Exceptions ArgumentOutOfRangeException capacity が 0 未満です。 StringList(string[]) 指定した配列からコピーした要素を格納し、 コピーされる要素の数と同じ初期量を備えた、 StringList クラスの新しいインスタンスを初期化します。 public StringList(string[] array) Parameters array string[] コレクションに追加するオブジェクトを格納する string 型の配列。 Remarks 詳細については ArrayList(ICollection) を参照してください。 Exceptions ArgumentNullException array が null 参照 (Visual Basic では Nothing) です。 Properties Capacity StringList に格納できる要素の数を取得または設定します。 public virtual int Capacity { get; set; } Property Value int StringList に格納できる要素の数。 0 が指定された場合は規定値を設定します。 現在設定されている数より小さい場合は例外を発行します。 Remarks 詳細については Capacity を参照してください。 Exceptions ArgumentOutOfRangeException Capacity が Count より小さい値に設定されています。 Count StringList に実際に格納されている要素の数を取得します。 public virtual int Count { get; } Property Value int StringList に実際に格納されている要素の数。 Remarks 詳細については Count を参照してください。 InnerArray StringList 内にある要素のリストを取得します。 protected virtual string[] InnerArray { get; } Property Value string[] StringList の Array 全ての要素を含んだ 0 から始まるインデックス番号で始まる Arraystring elements in the StringList. IsFixedSize StringList が固定サイズかどうかを示す値を取得します。 public virtual bool IsFixedSize { get; } Property Value bool StringList が固定サイズの場合は true 。それ以外の場合は false 。 既定値は <b>false</b> です。 Remarks 詳細については ArrayList.IsFixedSize を参照してください。 IsMovable StringList 内の要素が移動可能かどうかを示す値を取得します。 public bool IsMovable { get; } Property Value bool StringList 内の要素が移動可能な場合は true 。それ以外の場合は false 。 既定値は <b>true</b> です。 See Also MoveTo(int, int) MoveToTop(int) MoveToBottom(int) MoveUp(int) MoveDown(int) IsReadOnly StringList が読み取り専用かどうかを示す値を取得します。 public virtual bool IsReadOnly { get; } Property Value bool StringList が読み取り専用の場合は true 。それ以外の場合は false 。 既定値は <b>false</b> です。 Remarks 詳細については IsReadOnly を参照してください。 IsSynchronized StringList へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。 public virtual bool IsSynchronized { get; } Property Value bool リストへのアクセスが同期されている (スレッド セーフである) 場合は true 。 それ以外の場合は false 。既定値は false です。 Remarks 詳細については IsSynchronized を参照してください。 IsUnique StringList 内の要素が全てユニークであるかどうかを示す値を取得します。 public virtual bool IsUnique { get; } Property Value bool StringList 内の要素が全てユニークである場合は true 。それ以外の場合は false 。 既定値は <b>false</b> です。 Remarks StringList が、ユニークなラッパーを使用している場合、 IsUnique は true を返します。 詳細については <xref href=\"MapQuest.Collections.StringList.Unique(MapQuest.Collections.StringList)\" data-throw-if-not-resolved=\"false\"></xref> を参照してください。 <!-- IsUnique returns <c>true</c> exactly if the <see cref=\"StringList\"/> is exposed through a <see cref=\"Unique\"/> wrapper. Please refer to <see cref=\"Unique\"/> for details. --> this[int] 指定されたインデックスの要素を取得または設定します。 public virtual string this[int index] { get; set; } Parameters index int 取得または設定する要素の、0 から始まるインデックス番号。 Property Value string 指定したインデックスにある要素。 Remarks 詳細については this[int] を参照してください。 Exceptions ArgumentOutOfRangeException index が 0 未満です。 <p>または</p><code class=\"paramref\">index</code> が <xref href=\"MapQuest.Collections.StringList.Count\" data-throw-if-not-resolved=\"false\"></xref> 以上です。 NotSupportedException このプロパティが設定されていますが、 StringList が読み取り専用です。 または StringList は既に異なるインデックスで指定された要素を含んでいます。また、 StringList は含まれる要素が全てユニークであることを保障します。 SyncRoot StringList へのアクセスを同期するために使用できるオブジェクトを取得します。 public virtual object SyncRoot { get; } Property Value object StringList へのアクセスを同期するために使用できるオブジェクト。 Remarks 詳細については SyncRoot を参照してください。 Methods Add(string) StringList の末尾に string を追加します。 public virtual int Add(string value) Parameters value string StringList の末尾に追加する string 。 値は null 参照 (Visual Basic では <b>Nothing</b>) に設定できます。 Returns int value が追加された位置の StringList インデックス。 Remarks 詳細については Add(object) を参照してください。 Exceptions NotSupportedException StringList が読み取り専用です。 <p>または</p><xref href=\"MapQuest.Collections.StringList\" data-throw-if-not-resolved=\"false\"></xref> が固定サイズです。 <p>または</p><xref href=\"MapQuest.Collections.StringList\" data-throw-if-not-resolved=\"false\"></xref> は既に指定された要素を含んでいます。また、 <xref href=\"MapQuest.Collections.StringList\" data-throw-if-not-resolved=\"false\"></xref> は含まれる要素が全てユニークであることを保障します。 AddAll(ArrayList) ArrayList の要素を StringList の末尾に追加します。 <!-- Adds all the elements contained in the specified support class collection. --> public virtual void AddAll(ArrayList collection) Parameters collection ArrayList コレクションに追加するオブジェクトを格納する ArrayList 。 Exceptions InvalidCastException 追加する ICollection の要素が string と互換性がありません。 ArgumentNullException collection が null 参照 (Visual Basic では Nothing) です。 NotSupportedException StringList が読み取り専用です。 <p>または</p><xref href=\"MapQuest.Collections.StringList\" data-throw-if-not-resolved=\"false\"></xref> が固定サイズです。 <p>または</p><xref href=\"MapQuest.Collections.StringList\" data-throw-if-not-resolved=\"false\"></xref> は既に指定された要素を含んでいます。また、 <xref href=\"MapQuest.Collections.StringList\" data-throw-if-not-resolved=\"false\"></xref> は含まれる要素が全てユニークであることを保障します。 AddAll(ICollection) ICollection の要素を StringList の末尾に追加します。 <!-- Adds all the elements contained in the specified collection. --> public virtual void AddAll(ICollection collection) Parameters collection ICollection コレクションに追加するオブジェクトを格納する ICollection 。 Exceptions InvalidCastException 追加する ICollection の要素が string と互換性がありません。 ArgumentNullException collection が null 参照 (Visual Basic では Nothing) です。 NotSupportedException StringList が読み取り専用です。 <p>または</p><xref href=\"MapQuest.Collections.StringList\" data-throw-if-not-resolved=\"false\"></xref> が固定サイズです。 <p>または</p><xref href=\"MapQuest.Collections.StringList\" data-throw-if-not-resolved=\"false\"></xref> は既に指定された要素を含んでいます。また、 <xref href=\"MapQuest.Collections.StringList\" data-throw-if-not-resolved=\"false\"></xref> は含まれる要素が全てユニークであることを保障します。 AddRange(StringList) StringList の要素を StringList の末尾に追加します。 public virtual void AddRange(StringList collection) Parameters collection StringList コレクションに追加するオブジェクトを格納する StringList 。 Remarks 詳細については AddRange(ICollection) を参照してください。 Exceptions ArgumentNullException collection が null 参照 (Visual Basic では Nothing) です。 NotSupportedException StringList が読み取り専用です。 <p>または</p><xref href=\"MapQuest.Collections.StringList\" data-throw-if-not-resolved=\"false\"></xref> が固定サイズです。 <p>または</p><xref href=\"MapQuest.Collections.StringList\" data-throw-if-not-resolved=\"false\"></xref> は既に指定された要素を含んでいます。また、 <xref href=\"MapQuest.Collections.StringList\" data-throw-if-not-resolved=\"false\"></xref> は含まれる要素が全てユニークであることを保障します。 AddRange(string[]) string 配列の要素を StringList の末尾に追加します。 public virtual void AddRange(string[] array) Parameters array string[] コレクションに追加するオブジェクトを格納する string 型の配列。 Remarks 詳細については AddRange(ICollection) を参照してください。 Exceptions ArgumentNullException array が null 参照 (Visual Basic では Nothing) です。 NotSupportedException StringList が読み取り専用です。 <p>または</p><xref href=\"MapQuest.Collections.StringList\" data-throw-if-not-resolved=\"false\"></xref> が固定サイズです。 <p>または</p><xref href=\"MapQuest.Collections.StringList\" data-throw-if-not-resolved=\"false\"></xref> は既に指定された要素を含んでいます。また、 <xref href=\"MapQuest.Collections.StringList\" data-throw-if-not-resolved=\"false\"></xref> は含まれる要素が全てユニークであることを保障します。 BinarySearch(string) バイナリ サーチ アルゴリズムを使用して、並べ替えられた StringList 内の特定の要素を検索します。 public virtual int BinarySearch(string value) Parameters value string 検索する string 。 値は null 参照 (Visual Basic では Nothing) に設定できます。 Returns int 0 から始まるインデックス番号。 value が見つかった場合は、並べ替えられた StringList 内の value の 0 から始まるインデックス。 見つからなかった場合は、負の値。これは、 value の次に大きい要素のインデックスのビットごとの補数です。 ただし、大きい要素が存在しない場合は、Count のビットごとの補数です。 Remarks 詳細については BinarySearch(int, int, object, IComparer) を参照してください。 Exceptions InvalidOperationException value が、 StringList の要素と同じ型ではありません。 IComparable インターフェースがインプリメントされていません。 Clear() StringList からすべての要素を削除します。 public virtual void Clear() Remarks 詳細については Clear() を参照してください。 Exceptions NotSupportedException StringList が読み取り専用です。 <p>または</p><xref href=\"MapQuest.Collections.StringList\" data-throw-if-not-resolved=\"false\"></xref> が固定サイズです。 Clone() StringList の簡易コピーを生成します。 public virtual object Clone() Returns object A shallow copy of the StringList. Remarks 詳細については Clone() を参照してください。 Contains(string) ある要素が StringList 内に存在するかどうかを判断します。 public bool Contains(string value) Parameters value string StringList 内で検索される string 。 値は null 参照 (Visual Basic では <b>Nothing</b>) に設定できます。 Returns bool value が StringList に存在する場合は true 。それ以外の場合は false 。 Remarks 詳細については Contains(object) を参照してください。 Contains(string, bool) ある要素が StringList 内に存在するかどうかを判断します。 public bool Contains(string value, bool ignoreCase) Parameters value string StringList 内で検索される string 。 値は null 参照 (Visual Basic では Nothing) に設定できます。 ignoreCase bool 大文字と小文字を区別して比較するか、区別せずに比較するかを示す値。(true は、大文字と小文字を区別せずに比較することを示します。 Returns bool value が StringList に存在する場合は true 。それ以外の場合は false 。 Remarks 詳細については Contains(object) を参照してください。 CopyTo(string[]) StringList 全体を互換性のある 1 次元の string にコピーします。 コピー操作は、コピー先の配列の先頭から始まります。 public virtual void CopyTo(string[] array) Parameters array string[] StringList から要素がコピーされる string の 1 次元配列。 この配列には、0 から始まるインデックス番号が必要です。 Remarks 詳細については CopyTo(Array) を参照してください。 Exceptions ArgumentNullException array が null 参照 (Visual Basic では Nothing) です。 ArgumentException array が多次元です。 <p>または</p> コピー元の <xref href=\"MapQuest.Collections.StringList\" data-throw-if-not-resolved=\"false\"></xref> の要素数が、コピー先の <code class=\"paramref\">array</code> に格納できる要素の数を超えています。 CopyTo(string[], int) StringList 全体を互換性のある 1 次元の string にコピーします。 コピー操作は、コピー先の配列の指定したインデックスから始まります。 public virtual void CopyTo(string[] array, int arrayIndex) Parameters array string[] StringList から要素がコピーされる string の 1 次元配列。 この配列には、0 から始まるインデックス番号が必要です。 arrayIndex int コピーの開始位置となる、 0 から始まるインデックス番号。 Remarks 詳細については CopyTo(Array) を参照してください。 Exceptions ArgumentNullException array が null 参照 (Visual Basic では Nothing) です。 ArgumentOutOfRangeException arrayIndex が 0 未満です。 ArgumentException array が多次元です。 <p>または</p><code class=\"paramref\">arrayIndex</code> が <code class=\"paramref\">array</code> の長さ以上です。 <p>または</p> コピー元の <xref href=\"MapQuest.Collections.StringList\" data-throw-if-not-resolved=\"false\"></xref> の要素数が、 <code class=\"paramref\">arrayIndex</code> からコピー先の <code class=\"paramref\">array</code> の末尾までに格納できる数を超えています。 GetEnumerator() この StringList の列挙子を返します。 public virtual IStringEnumerator GetEnumerator() Returns IStringEnumerator StringList 全体の IStringEnumerator 。 Remarks 詳細については GetEnumerator() を参照してください。 IndexOf(string) 指定した string を検索し、 StringList 内で最初に見つかった位置の 0 から始まるインデックスを返します。 public virtual int IndexOf(string value) Parameters value string StringList 内で検索される string 。 値は null 参照 (Visual Basic では <b>Nothing</b>) に設定できます。 Returns int StringList 内で value が見つかった場合は、最初に見つかった位置の 0 から始まるインデックス番号。 それ以外の場合は -1。 Remarks 詳細については IndexOf(object) を参照してください。 IndexOf(string, bool) 指定した string を検索し、 StringList 内で最初に見つかった位置の 0 から始まるインデックスを返します。 public virtual int IndexOf(string value, bool ignoreCase) Parameters value string StringList 内で検索される string 。 値は null 参照 (Visual Basic では Nothing) に設定できます。 ignoreCase bool 大文字と小文字を区別して比較するか、区別せずに比較するかを示す値。(true は、大文字と小文字を区別せずに比較することを示します。 Returns int StringList 内で value が見つかった場合は、最初に見つかった位置の 0 から始まるインデックス番号。 それ以外の場合は -1。 Remarks 詳細については Contains(object) を参照してください。 Insert(int, string) StringList 内の指定したインデックスの位置に要素を挿入します。 public virtual void Insert(int index, string value) Parameters index int value を挿入する位置の、0 から始まるインデックス番号。 value string 挿入する string 。 値は null 参照 (Visual Basic では Nothing) に設定できます。 Remarks 詳細については Insert(int, object) を参照してください。 Exceptions ArgumentOutOfRangeException index が 0 未満です。 <p>または</p><code class=\"paramref\">index</code> が <xref href=\"MapQuest.Collections.StringList.Count\" data-throw-if-not-resolved=\"false\"></xref> より大きい値です。 NotSupportedException StringList が読み取り専用です。 <p>または</p><xref href=\"MapQuest.Collections.StringList\" data-throw-if-not-resolved=\"false\"></xref> が固定サイズです。 <p>または</p><xref href=\"MapQuest.Collections.StringList\" data-throw-if-not-resolved=\"false\"></xref> は既に指定された要素を含んでいます。また、 <xref href=\"MapQuest.Collections.StringList\" data-throw-if-not-resolved=\"false\"></xref> は含まれる要素が全てユニークであることを保障します。 MoveDown(int) StringList 内の指定したインデックスの要素を 1 つ後ろに移動します。 public virtual void MoveDown(int index) Parameters index int 移動する要素の位置を表す、0 から始まるインデックス番号。 MoveTo(int, int) StringList 内の指定したインデックスの要素を、 指定したインデックスへ移動します。 public virtual void MoveTo(int indexFrom, int indexTo) Parameters indexFrom int 移動する要素の位置を表す、0 から始まるインデックス番号。 indexTo int 移動先の位置を表す、0 から始まるインデックス番号。 Remarks 移動元と移動先のインデックスが同じ場合は何もしません。 Exceptions ArgumentOutOfRangeException indexTo が 0 未満です。 <p>または</p><code class=\"paramref\">indexTo</code> が <xref href=\"MapQuest.Collections.StringList.Count\" data-throw-if-not-resolved=\"false\"></xref> より大きい値です。 NotSupportedException StringList が読み取り専用です。 <p>または</p><xref href=\"MapQuest.Collections.StringList\" data-throw-if-not-resolved=\"false\"></xref> が固定サイズです。 MoveToBottom(int) StringList 内の指定したインデックスの要素を末尾に移動します。 public virtual void MoveToBottom(int index) Parameters index int 移動する要素の位置を表す、0 から始まるインデックス番号。 Remarks 移動元のインデックスが既に末尾になる場合は何もしません。 MoveToTop(int) StringList 内の指定したインデックスの要素を先頭に移動します。 public virtual void MoveToTop(int index) Parameters index int 移動する要素の位置を表す、0 から始まるインデックス番号。 Remarks 移動元のインデックスが既に先頭になる場合は何もしません。 MoveUp(int) StringList 内の指定したインデックスの要素を 1 つ前に移動します。 public virtual void MoveUp(int index) Parameters index int 移動する要素の位置を表す、0 から始まるインデックス番号。 OnMove(string, int, int) リスト内の要素が移動された時に実行される内部関数です。 protected virtual void OnMove(string item, int indexFrom, int indexTo) Parameters item string 移動した要素。 indexFrom int 移動元のインデックス。 indexTo int 移動先のインデックス。 ReadOnly(StringList) 読み取り専用にラップした StringList を返します。 public static StringList ReadOnly(StringList collection) Parameters collection StringList ラップする StringList 。 Returns StringList collection をラップした読み取り専用の StringList ラッパー。 Remarks 詳細については ReadOnly(IList) を参照してください。 Exceptions ArgumentNullException collection が null 参照 (Visual Basic では Nothing) です。 Remove(string) StringList 内で最初に見つかった特定のオブジェクトを削除します。 public virtual void Remove(string value) Parameters value string StringList から削除する string 。 値は null 参照 (Visual Basic では <b>Nothing</b>) に設定できます。 Remarks 詳細については Remove(object) を参照してください。 Exceptions NotSupportedException StringList が読み取り専用です。 <p>または</p><xref href=\"MapQuest.Collections.StringList\" data-throw-if-not-resolved=\"false\"></xref> が固定サイズです。 RemoveAll(ArrayList) ArrayList の要素を StringList から削除します <!-- Removes all the elements contained into the specified collection. --> public virtual bool RemoveAll(ArrayList collection) Parameters collection ArrayList コレクションから削除するオブジェクトを格納する ArrayList 。 Returns bool 全ての要素を削除できた場合は true 。 それ以外の場合は false 。 RemoveAll(ICollection) ICollection の要素を StringList から削除します。 <!-- Removes all the elements contained into the specified collection. --> public virtual bool RemoveAll(ICollection collection) Parameters collection ICollection コレクションから削除するオブジェクトを格納する ICollection 。 Returns bool 全ての要素を削除できた場合は true 。 それ以外の場合は false 。 RemoveAt(int) StringList の指定したインデックスにある要素を削除します。 public virtual void RemoveAt(int index) Parameters index int 削除する要素の、0 から始まるインデックス番号。 Remarks 詳細については RemoveAt(int) を参照してください。 Exceptions ArgumentOutOfRangeException index が 0 未満です。 <p>または</p><code class=\"paramref\">index</code> が <xref href=\"MapQuest.Collections.StringList.Count\" data-throw-if-not-resolved=\"false\"></xref> 以上です。 NotSupportedException StringList が読み取り専用です。 <p>または</p><xref href=\"MapQuest.Collections.StringList\" data-throw-if-not-resolved=\"false\"></xref> が固定サイズです。 RemoveRange(int, int) StringList から指定された範囲の要素を削除します。 public virtual void RemoveRange(int index, int count) Parameters index int 削除する要素の範囲の開始位置を示す 0 から始まるインデックス。 count int 削除する要素の数。 Remarks 詳細については RemoveRange(int, int) を参照してください。 Exceptions ArgumentOutOfRangeException index が 0 未満です。 <p>または</p><code class=\"paramref\">Count</code> が 0 未満です。 ArgumentException index および count が StringList 内の有効な範囲を指定していません。 NotSupportedException StringList が読み取り専用です。 <p>または</p><xref href=\"MapQuest.Collections.StringList\" data-throw-if-not-resolved=\"false\"></xref> が固定サイズです。 Reverse() StringList の全体の要素の順序を反転させます。 public virtual void Reverse() Remarks 詳細については Reverse() を参照してください。 Exceptions NotSupportedException StringList が読み取り専用です。 Reverse(int, int) 指定した範囲の要素の順序を反転させます。 public virtual void Reverse(int index, int count) Parameters index int 反転させる範囲の開始位置を示す 0 から始まるインデックス。 count int 反転させる範囲内にある要素の数。 Remarks 詳細については Reverse() を参照してください。 Exceptions ArgumentOutOfRangeException index が 0 未満です。 <p>または</p><code class=\"paramref\">Count</code> が 0 未満です。 ArgumentException index および count が StringList 内の有効な範囲を指定していません。 NotSupportedException StringList が読み取り専用です。 Sort() 各要素の IComparable 実装を使用して、 StringList 内の要素を並べ替えます。 public virtual void Sort() Remarks 詳細については Sort() を参照してください。 Exceptions NotSupportedException StringList が読み取り専用です。 Sort(IComparer) 指定した比較演算子を使用して、 StringList 内の要素を並べ替えます。 public virtual void Sort(IComparer comparer) Parameters comparer IComparer 要素を比較する場合に使用する IComparer 実装。 または 各要素の IComparer 実装を使用する場合は null 参照 (Visual Basic では Nothing) 。 Remarks 詳細については Sort() を参照してください。 Exceptions NotSupportedException StringList が読み取り専用です。 Sort(int, int, IComparer) 指定した比較演算子を使用して、 StringList のセクション内の要素を並べ替えます。 public virtual void Sort(int index, int count, IComparer comparer) Parameters index int 並べ替える範囲の開始位置を示す 0 から始まるインデックス。 count int 並べ替える範囲の長さ。 comparer IComparer 要素を比較する場合に使用する IComparer 実装。 または 各要素の IComparer 実装を使用する場合は null 参照 (Visual Basic では Nothing) 。 Remarks 詳細については Sort() を参照してください。 Exceptions ArgumentOutOfRangeException index が 0 未満です。 <p>または</p><code class=\"paramref\">Count</code> が 0 未満です。 ArgumentException index および count が StringList 内の有効な範囲を指定していません。 NotSupportedException StringList が読み取り専用です。 Synchronized(StringList) StringList 用の同期された (スレッド セーフな) ラッパーを返します。 public static StringList Synchronized(StringList collection) Parameters collection StringList 同期する StringList 。 Returns StringList StringList 用の同期された (スレッド セーフな) ラッパー。 Remarks 詳細については Synchronized(IList) を参照してください。 Exceptions ArgumentNullException collection が null 参照 (Visual Basic では Nothing) です。 ToArray() StringList の要素を新しい配列にコピーします。 public virtual string[] ToArray() Returns string[] StringList の要素のコピーを格納する string 型の配列。 Remarks 詳細については ToArray() を参照してください。 TrimToSize() 容量を StringList 内にある実際の要素数に設定します。 public virtual void TrimToSize() Remarks 詳細については TrimToSize() を参照してください。 Exceptions NotSupportedException StringList が読み取り専用です。 <p>または</p><xref href=\"MapQuest.Collections.StringList\" data-throw-if-not-resolved=\"false\"></xref> が固定サイズです。 Unique(StringList) 要素がすべてユニークであることを保証する StringList ラッパーを返します。 public static StringList Unique(StringList collection) Parameters collection StringList ラップする StringList 。 Returns StringList collection をラップする要素がすべてユニークであることを保障する StringList ラッパー。 Remarks Unique(StringList) は、 StringList に含まれる要素が全てユニークであることを保障する コレクションのラッパーを提供します。 <!-- The <see cref=\"StringList.Unique\"/> wrapper provides a set-like collection by ensuring that all elements in the <see cref=\"StringList\"/> are unique. --><p><xref href=\"MapQuest.Collections.StringList.Unique(MapQuest.Collections.StringList)\" data-throw-if-not-resolved=\"false\"></xref> は、 <code class=\"paramref\">collection</code> の内容が重複している場合 <xref href=\"System.ArgumentException\" data-throw-if-not-resolved=\"false\"></xref> を呼び出します。 また、<xref href=\"MapQuest.Collections.StringList\" data-throw-if-not-resolved=\"false\"></xref> に、既に含まれている要素を追加した場合は、 <xref href=\"System.NotSupportedException\" data-throw-if-not-resolved=\"false\"></xref> を呼び出します。 <!-- <see cref=\"StringList.Unique\"/> raises an <see cref=\"ArgumentException\"/> if the specified <paramref name=\"collection\"/> contains any duplicate elements. The returned wrapper raises a <see cref=\"NotSupportedException\"/> whenever the user attempts to add an element that is already contained in the <see cref=\"NotSupportedException\"/>. --></p><p><strong>Note:</strong> ラッパーは、重複する要素の生成も含む、 内部のコレクションへどのような変更も反映します。 この内部のコレクションが直接編集された場合は、 すべての要素がユニークであることを保障できません。 <!-- <strong>Note:</strong> The <see cref=\"StringList.Unique\"/> wrapper reflects any changes made to the underlying <paramref name=\"collection\"/>, including the possible creation of duplicate elements. The uniqueness of all elements is therefore no longer assured if the underlying collection is manipulated directly. --></p> Exceptions ArgumentException collection が重複する要素を含んでいます。 ArgumentNullException collection が null 参照 (Visual Basic では Nothing) です。"
  },
  "api/MapQuest.Collections.html": {
    "href": "api/MapQuest.Collections.html",
    "title": "Namespace MapQuest.Collections | mysite",
    "keywords": "Namespace MapQuest.Collections Classes BoolArray タイプセーフである System.Boolean の配列を定義します。 CacheBase オンメモリで動作する、典型的なキャッシュの実装の基礎となるクラス実装を提供します。 DisposableCacheBase オンメモリで動作する、典型的なキャッシュの実装の基礎となるクラス実装を提供します。 キャッシュ対象のオブジェクトが IDisposable を継承していることを考慮します。 DoubleArray タイプセーフである System.Double の配列を定義します。 FloatArray タイプセーフである System.Single の配列を定義します。 IntArray タイプセーフである System.Int32 の配列を定義します。 LongArray タイプセーフである System.Int64 の配列を定義します。 PropertyChangedEventArgs PropertyChanged イベントにデータを提供します。 PropertyObjects キーのハッシュ コードに基づいて編成された、object 用のキーと値の組み合わせのコレクションを表します。 PropertyObjectsEnumerator PropertyObjects に対する単純な反復処理をサポートします。 PropertyStrings キーのハッシュ コードに基づいて編成された、string 用のキーと値の組み合わせのコレクションを表します。 PropertyStringsEnumerator PropertyStrings に対する単純な反復処理をサポートします。 ShortArray タイプセーフである System.Short の配列を定義します。 StringList 必要に応じてサイズが動的に増加する配列を使用して、 IStringList インターフェイスを実装します。 Interfaces IPropertyChange コレクションの内容が変化したことを PropertyChanged イベントとして通知を可能にする 共通インターフェースです。 IStringCollection string 用に最適化されたコレクションを定義します。 IStringEnumerator StringList に対する単純な反復処理をサポートします。 IStringCollectionIStringListStringList IStringList インデックスによって個別にアクセスできる string のコレクションを定義します。 Enums PropertyChangeActionType PropertyChanged イベントで定義される状態変化の種類を定義します。 Delegates PropertyChangedEventHandler コレクションで要素が変更されたときに発生する PropertyChanged イベントを処理するメソッドを表します。"
  },
  "api/MapQuest.CoordinateSystems.AngularToLinearUnitConverter.html": {
    "href": "api/MapQuest.CoordinateSystems.AngularToLinearUnitConverter.html",
    "title": "Class AngularToLinearUnitConverter | mysite",
    "keywords": "Class AngularToLinearUnitConverter Namespace MapQuest.CoordinateSystems Assembly MapQuest.CoordinateSystems.dll IAngularUnit から ILinearUnit への値の変換機能を提供します。 public sealed class AngularToLinearUnitConverter : IAngularToLinearUnitConverter, IUnitConverter, ICloneable Inheritance object AngularToLinearUnitConverter Implements IAngularToLinearUnitConverter IUnitConverter ICloneable Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() Constructors AngularToLinearUnitConverter(IAngularUnit, ILinearUnit) 新しいインスタンスを初期化します。 public AngularToLinearUnitConverter(IAngularUnit source, ILinearUnit target) Parameters source IAngularUnit 変換元の IAngularUnit 。 target ILinearUnit 変換先の ILinearUnit 。 Exceptions ArgumentNullException source または target が null です。 Properties IsLinear LinearUnit 間の変換かどうかを取得します。 false を返します。 public bool IsLinear { get; } Property Value bool false を返します。 Source 変換元の IAngularUnit を取得します。 public IAngularUnit Source { get; } Property Value IAngularUnit 変換元の単位を示す IAngularUnit 。 読み取り専用です。 Target 変換先の ILinearUnit を取得します。 public ILinearUnit Target { get; } Property Value ILinearUnit 変換先の単位を示す ILinearUnit 。 読み取り専用です。 Methods Clone() 現在のインスタンスの詳細コピーを生成します。 public object Clone() Returns object 複製された AngularToLinearUnitConverter 。 Convert(double) 値の単位を変換します。 public double Convert(double value) Parameters value double 変換する Source の単位の値。 Returns double 変換された Target の単位の値 Remarks 引数で指定された Source の単位の値を変換して、 Target の単位の値を返します。 GetInverse() 現在の変換の「逆変換」を表す ILinearToAngularUnitConverter を取得します。 public ILinearToAngularUnitConverter GetInverse() Returns ILinearToAngularUnitConverter 現在の変換の「逆変換」を表す ILinearToAngularUnitConverter 。 Initialize(IAngularUnit, ILinearUnit) 現在のインスタンスの、変換元と変換先を初期化します。 public void Initialize(IAngularUnit sourceUnit, ILinearUnit targetUnit) Parameters sourceUnit IAngularUnit 変換元の IAngularUnit 。 targetUnit ILinearUnit 変換先の ILinearUnit 。"
  },
  "api/MapQuest.CoordinateSystems.AngularUnit.html": {
    "href": "api/MapQuest.CoordinateSystems.AngularUnit.html",
    "title": "Class AngularUnit | mysite",
    "keywords": "Class AngularUnit Namespace MapQuest.CoordinateSystems Assembly MapQuest.CoordinateSystems.dll 角度の単位を表すクラスです。 例えば、「度(Degree)」や「ラジアン(Radian)」などです。 public class AngularUnit : Unit, IAngularUnit, IUnit, IInfo, ICloneable Inheritance object Info Unit AngularUnit Implements IAngularUnit IUnit IInfo ICloneable Inherited Members Unit.Millimetre Unit.Centimetre Unit.Metre Unit.Kilometre Unit.Inch Unit.Point Unit.Radian Unit.Degree Unit.Minute Unit.Second Unit.Millisecond Unit.Gon Unit.Grad Unit.Pixel Info.GetHashCode() Info.Equals(object) Info.Remarks Info.AuthorityCode Info.Authority Info.Name Info.Alias Info.Abbreviation Info.WKT Info.XML object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Constructors AngularUnit(AngularUnit) 現在のインスタンスの詳細コピーを生成します。 public AngularUnit(AngularUnit angularUnit) Parameters angularUnit AngularUnit 複製元の AngularUnit 。 Exceptions ArgumentNullException angularUnit が null です。 AngularUnit(double) RadiansPerUnit を指定して、 新しいインスタンスを初期化します。 public AngularUnit(double radiansPerUnit) Parameters radiansPerUnit double RadiansPerUnit の値。 Remarks radiansPerUnit には 0 を指定する事はできません。 Exceptions CoordinateSystemException radiansPerUnit に 0 を指定しました。 AngularUnit(double, string) RadiansPerUnit と単位の名称を指定して、 新しいインスタンスを初期化します。 public AngularUnit(double radiansPerUnit, string name) Parameters radiansPerUnit double RadiansPerUnit の値。 name string 単位の名称。 Remarks radiansPerUnit には 0 を指定する事はできません。 Exceptions CoordinateSystemException radiansPerUnit に 0 を指定しました。 AngularUnit(double, string, string, string, string, string, string) 必要なパラメータを指定して、新しいインスタンスを初期化します。 public AngularUnit(double radiansPerUnit, string remarks, string authority, string authorityCode, string name, string alias, string abbreviation) Parameters radiansPerUnit double RadiansPerUnit の値。 remarks string 単位の説明。 authority string 単位の策定元団体・機関名。 authorityCode string authority が策定したこの単位の ID 。 name string 単位の名称。 alias string 単位の別名。 abbreviation string 単位の省略名。 Remarks radiansPerUnit には 0 を指定する事はできません。 Exceptions CoordinateSystemException radiansPerUnit に 0 を指定しました。 Properties IsLinear この単位が、LinearUnit であるかどうかを返します。 false を返します。 public override bool IsLinear { get; } Property Value bool false を返します。 RadiansPerUnit この単位のラジアンに対する比率を取得します。 public double RadiansPerUnit { get; } Property Value double この単位のラジアンに対する比率。読み取り専用です。 Remarks 全ての AngularUnit は、ラジアンをベースに考えます。 「その単位は、ラジアンに対してどの位の比率か？」を、 コンストラクタのパラメータで設定します。 例えば、「度」は、「π÷１８０」であるので、「度」を表す AngularUnit の RadiansPerUnit には、 「π÷１８０」、つまり 0.01745... を設定します。 Methods Clone() 現在のインスタンスの詳細コピーを生成します。 public override object Clone() Returns object 複製した AngularUnit 。 DegreeAdd(double, double) 角度の足し算を行います。 public static double DegreeAdd(double degree, double add) Parameters degree double 足される基となる角度(度)。 add double 足す値(度)。 Returns double 足し算の結果。必ず 0 ～ 360 の範囲の値になります。 Remarks このメソッドは、角度値は 0 ～ 360 の範囲である事を考慮して加算を行います。 例えば、340 + 30 は、通常は 370 ですが、このメソッドの結果は、 10 になります。 GetDegree(double) 「トータル度」から「度」の値を抽出します。 GetMinute(double)GetSecond(double) public static short GetDegree(double value) Parameters value double 「トータル度」の値。 Returns short トータル度から抽出した「度」だけの値。 Remarks 「トータル度」とは、度分秒の値を全て「度」の少数点形式で表したものを指します。 例えば、136度30分00秒は、トータル度では、「136.5度」と表します。 このメソッドは、トータル度から、「度」の成分だけを抽出します。 GetMinute(double) 「トータル度」から「分」の値を抽出します。 GetDegree(double)GetSecond(double) public static short GetMinute(double value) Parameters value double 「トータル度」の値。 Returns short トータル度から抽出した「分」だけの値。 Remarks 「トータル度」とは、度分秒の値を全て「度」の少数点形式で表したものを指します。 例えば、136度30分00秒は、トータル度では、「136.5度」と表します。 このメソッドは、トータル度から、「分」の成分だけを抽出します。 GetSecond(double) 「トータル度」から「秒」の値を抽出します。 GetDegree(double)GetMinute(double) public static double GetSecond(double value) Parameters value double 「トータル度」の値。 Returns double トータル度から抽出した「秒」だけの値。 Remarks 「トータル度」とは、度分秒の値を全て「度」の少数点形式で表したものを指します。 例えば、136度30分00秒は、トータル度では、「136.5度」と表します。 このメソッドは、トータル度から、「秒」の成分だけを抽出します。 GetTotalDegree(short, short, double) \"度\" \"分\" \"秒\" の値から「トータル度」の値を求めます。 public static double GetTotalDegree(short degree, short minute, double second) Parameters degree short 度 minute short 分 second double 秒 Returns double トータル度。 NormalizeDegree(ref double) 角度の値を正規化します。 public static void NormalizeDegree(ref double degree) Parameters degree double [IN/OUT]角度値。 Remarks 角度の値（度）がマイナスの値、0～360の範囲外の値を、正しく 0～360 の範囲 に納めるようにします。 例) ・390 → 30 ・-30 → 330"
  },
  "api/MapQuest.CoordinateSystems.AngularUnitConverter.html": {
    "href": "api/MapQuest.CoordinateSystems.AngularUnitConverter.html",
    "title": "Class AngularUnitConverter | mysite",
    "keywords": "Class AngularUnitConverter Namespace MapQuest.CoordinateSystems Assembly MapQuest.CoordinateSystems.dll IAngularUnit 間の値の変換を提供します。 public sealed class AngularUnitConverter : IAngularUnitConverter, IUnitConverter, ICloneable Inheritance object AngularUnitConverter Implements IAngularUnitConverter IUnitConverter ICloneable Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() Examples 下記は、値を「ラジアン」から「度」に変換するための AngularUnitConverter の使用方法を示します。 using System; using MapQuest.CoordinateSystems; namespace UnitConversion { class TestMain { [STAThread] static void Main(string[] args) { AngularUnitConverter converter = new AngularUnitConverter(Unit.Radian, Unit.Degree); double angle = Math.PI/2; // radian double result = converter.Convert(angle); Console.WriteLine(result.ToString()); IAngularUnitConverter inverse = converter.GetInverse(); angle = inverse.Convert(result); Console.WriteLine(angle.ToString()); } } } Constructors AngularUnitConverter(IAngularUnit, IAngularUnit) 新しいインスタンスを初期化します。 public AngularUnitConverter(IAngularUnit source, IAngularUnit target) Parameters source IAngularUnit 変換元の IAngularUnit 。 target IAngularUnit 変換先の IAngularUnit 。 Exceptions ArgumentNullException source または target が null です。 Properties IsLinear LinearUnit 間の変換かどうかを取得します。 false を返します。 public bool IsLinear { get; } Property Value bool false を返します。 Source 変換元の IAngularUnit を取得します。 public IAngularUnit Source { get; } Property Value IAngularUnit 変換元の単位を示す IAngularUnit 。 読み取り専用です。 Target 変換先の IAngularUnit を取得します。 public IAngularUnit Target { get; } Property Value IAngularUnit 変換先の単位を示す IAngularUnit 。 読み取り専用です。 Methods Clone() 現在のインスタンスの詳細コピーを生成します。 public object Clone() Returns object 複製された AngularUnitConverter 。 Convert(double) 値の単位を変換します。 public double Convert(double value) Parameters value double 変換する Source の単位の値。 Returns double 変換された Target の単位の値 Remarks 引数で指定された Source の単位の値を変換して、 Target の単位の値を返します。 使い方は、AngularUnitConverter の解説を見てください。 GetInverse() 現在の変換の「逆変換」を表す IAngularUnitConverter を取得します。 public IAngularUnitConverter GetInverse() Returns IAngularUnitConverter 現在の変換の「逆変換」を表す IAngularUnitConverter 。 Initialize(IAngularUnit, IAngularUnit) 現在のインスタンスの、変換元と変換先を初期化します。 public void Initialize(IAngularUnit sourceUnit, IAngularUnit targetUnit) Parameters sourceUnit IAngularUnit 変換元の IAngularUnit 。 targetUnit IAngularUnit 変換先の IAngularUnit 。 See Also IAngularUnitConverter"
  },
  "api/MapQuest.CoordinateSystems.AxisInfo.html": {
    "href": "api/MapQuest.CoordinateSystems.AxisInfo.html",
    "title": "Class AxisInfo | mysite",
    "keywords": "Class AxisInfo Namespace MapQuest.CoordinateSystems Assembly MapQuest.CoordinateSystems.dll 「軸」に関する情報を示すクラスです。 この情報は、軸に関する情報を表示したり、軸の方向を指し示すのに使用されます。 public class AxisInfo : IAxisInfo, ICloneable Inheritance object AxisInfo Implements IAxisInfo ICloneable Inherited Members object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks このクラスは２つの情報しか持っていません。 一つは軸の名称(Name)、もう一つは軸の方向(AxisOrientation)です。 Constructors AxisInfo() パラメータを指定して、新しいインスタンスを初期化します。 public AxisInfo() AxisInfo(string, AxisOrientation) 軸の名称と方向を指定して、新しいインスタンスを初期化します。 public AxisInfo(string name, AxisOrientation orientation) Parameters name string 軸の名称。 orientation AxisOrientation 軸の方向。 Properties Altitude 「標高・高さ」軸を示す軸情報を生成して取得します。 public static AxisInfo Altitude { get; } Property Value AxisInfo 「標高・高さ」軸を示す軸情報。 Remarks 座標値が増加すると、上の方向に進行します。 Latitude 「緯度」軸を示す軸情報を生成して取得します。 public static AxisInfo Latitude { get; } Property Value AxisInfo 「緯度」軸を示す軸情報。 Remarks 座標値が増加すると、北の方向に進行します。 これは、通常「Geographic Coordinate System」にて使用されます。 Longitude 「経度」軸を示す軸情報を生成して取得します。 public static AxisInfo Longitude { get; } Property Value AxisInfo 「経度」軸を示す軸情報。 Remarks 座標値が増加すると、東の方向に進行します。 これは、通常「Geographic Coordinate System」にて使用されます。 Name 軸の名称を取得します。 public string Name { get; } Property Value string 軸の名称。 Remarks 推奨される値は、「x,y,Lat,Long」などの簡単な名称です。 Orientation 軸の方向を取得します。 public AxisOrientation Orientation { get; } Property Value AxisOrientation 軸の方向を示す AxisOrientation 。 X 「x」軸を示す軸情報を生成して取得します。 public static AxisInfo X { get; } Property Value AxisInfo 「x」軸を示す軸情報。 Remarks 座標値が増加すると、東の方向に進行します。 これは、通常「Projected Coordinate System」にて使用されます。 Y 「y」軸を示す軸情報を生成して取得します。 public static AxisInfo Y { get; } Property Value AxisInfo 「y」軸を示す軸情報。 Remarks 座標値が増加すると、北の方向に進行します。 これは、通常「Projected Coordinate System」にて使用されます。 Methods Clone() 現在のインスタンスの詳細コピーを提供します。 public object Clone() Returns object コピーされた AxisInfo 。 Equals(AxisInfo) 指定した AxisInfo が、このインスタンスと同じかどうかを返します。 public bool Equals(AxisInfo obj) Parameters obj AxisInfo 比較する AxisInfo 。 Returns bool 同じであれば true 、異なっていたら false 。 Equals(IAxisInfo) 指定した IAxisInfo が、このインスタンスと同じかどうかを返します。 public bool Equals(IAxisInfo obj) Parameters obj IAxisInfo 比較する IAxisInfo 。 Returns bool 同じであれば true 、異なっていたら false 。 ToString() この AxisInfo を Well-Known Text (WKT) 形式で表します。 public override string ToString() Returns string Remarks WKT は OpenGIS' により策定されている、下記のような形式です。 AXIS[\"name\",NORTH] ."
  },
  "api/MapQuest.CoordinateSystems.AxisOrientation.html": {
    "href": "api/MapQuest.CoordinateSystems.AxisOrientation.html",
    "title": "Enum AxisOrientation | mysite",
    "keywords": "Enum AxisOrientation Namespace MapQuest.CoordinateSystems Assembly MapQuest.CoordinateSystems.dll 軸の方向の種類を示す列挙体です。 public enum AxisOrientation : short Fields Down = 6 「下」を示します。１次元座標系で使用されます。 East = 3 「東」を示します。滅多に使用されません。 North = 1 「北」を示します。Y 座標や緯度が主に相当します。 Other = 0 未定義。 South = 2 「南」を示します。滅多に使用されません。 Up = 5 「上」を示します。１次元座標系で使用されます。 West = 4 「西」を示します。X 座標や経度が主に相当します。"
  },
  "api/MapQuest.CoordinateSystems.CoordinateSystem.html": {
    "href": "api/MapQuest.CoordinateSystems.CoordinateSystem.html",
    "title": "Class CoordinateSystem | mysite",
    "keywords": "Class CoordinateSystem Namespace MapQuest.CoordinateSystems Assembly MapQuest.CoordinateSystems.dll 「地図座標系(Coordinate Reference System)」をモデル化するすべてのクラスのベースクラスです。 「地図座標系」は、1 つの座標系(Coordinate System) と 1 つの測地系(Datum)から成ります。 public abstract class CoordinateSystem : Info, ICoordinateSystem, IInfo, ICloneable Inheritance object Info CoordinateSystem Implements ICoordinateSystem IInfo ICloneable Derived HorizontalCoordinateSystem Inherited Members Info.Clone() Info.Remarks Info.AuthorityCode Info.Authority Info.Name Info.Alias Info.Abbreviation Info.WKT Info.XML object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Remarks これは、座標系をさらに拡張あるいは継承するための抽象的なクラスです。 座標系とは、数学的な空間(ここで空間の要素は位置と呼ばれる)です。 各位置は数のリストによって記述されます。リストの長さは座標系の次元に相当します。 したがって、2 次元の座標系では、各位置は 2 つの数値を含んでいるリストによって記述されます。 しかし、座標系では、数のすべてのリストは位置に相当するとは限りません。 いくつかのリストは座標系の領域の外にあるかもしれません。 例えば、2次元の緯度/経度座標系では、緯度:91度・経度:91度 という値は位置に相当しません。 いくつかの座標系は、さらに実際の世界の位置への数学的なスペースからのマッピングを持っています。 したがって、緯度/経度座標系では、数学的な位置(緯度、経度)は、地球の表面上の位置に相当します。 実際の世界の位置の中への数学的なスペースからのこのマッピングは測地系(Datum, データム)と呼ばれます。 Constructors CoordinateSystem(CoordinateSystem) 現在のインスタンスの簡易コピーを生成します。 protected CoordinateSystem(CoordinateSystem sourceCS) Parameters sourceCS CoordinateSystem 複製元の CoordinateSystem 。 CoordinateSystem(string) 座標系の名称を指定して、新しいインスタンスを初期化します。 protected CoordinateSystem(string name) Parameters name string 座標系の名称。 CoordinateSystem(string, string, string, string, string, string) 必要なパラメータを指定して、新しいインスタンスを初期化します。 protected CoordinateSystem(string remarks, string authority, string authorityCode, string name, string alias, string abbreviation) Parameters remarks string 座標系の説明。 authority string 座標系の策定元団体・機関の名称。 authorityCode string authority が策定した座標系の ID 。 name string 座標系の名称。 alias string 座標系の別名。 abbreviation string 座標系の省略名。 Properties CoordinateSystemType このインスタンスの座標系の種類を取得します。 public abstract CoordinateSystemType CoordinateSystemType { get; } Property Value CoordinateSystemType 座標系の種類を示す CoordinateSystemType 値。 DefaultEnvelope 座標系の既定の範囲を取得します。 public virtual Envelope DefaultEnvelope { get; } Property Value Envelope この座標系で定義されている範囲をしめす Envelope 。 Remarks 領域に制限のある座標系は、その領域を返します。 領域に制限のない座標系は、使用が考えられる領域を返す事が望ましいです。 Dimension 座標系の次元の数を取得します。 public abstract int Dimension { get; } Property Value int 座標系の次元の数。 Remarks 座標系中の各次元は対応する軸を持っています。 Methods Equals(object) 対象のインスタンスが、 指定したオブジェクトに等しいかどうかを返します。 public override bool Equals(object obj) Parameters obj object このインスタンスと比較するオブジェクト。 Returns bool obj が、このインスタンスと同じ値である場合は true 。 それ以外の場合は false 。 Remarks このクラスの Equals(object) メソッドは、 Authority 、 AuthorityCode 、 Name を比較し、その全てが等しければ true を返します。 GetAxis(int) 座標系の、指定した次元の「軸」の情報を取得します。 public abstract IAxisInfo GetAxis(int Dimension) Parameters Dimension int 次元を示す 0 から始まるインデックス。 Returns IAxisInfo 指定した次元の軸情報を定義する IAxisInfo オブジェクトを返します。 Remarks 座標系中の各次元は対応する軸を持っています。 GetHashCode() このインスタンスのハッシュ コードを返します。 public override int GetHashCode() Returns int base.GetHashCode() の結果を返します。 GetUnits(int) 座標系の、指定した次元の「単位」の情報を取得します。 public abstract IUnit GetUnits(int dimension) Parameters dimension int 次元を示す 0 から始まるインデックス。 Returns IUnit 座標系の軸の単位を示す IUnit 。 Remarks 座標系中の各次元は対応する「単位」を持っています。 See Also ICoordinateSystem"
  },
  "api/MapQuest.CoordinateSystems.CoordinateSystemComparer.html": {
    "href": "api/MapQuest.CoordinateSystems.CoordinateSystemComparer.html",
    "title": "Class CoordinateSystemComparer | mysite",
    "keywords": "Class CoordinateSystemComparer Namespace MapQuest.CoordinateSystems Assembly MapQuest.CoordinateSystems.dll CoordinateSystemComparer の概要の説明です。 public class CoordinateSystemComparer : IComparer Inheritance object CoordinateSystemComparer Implements IComparer Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors CoordinateSystemComparer() public CoordinateSystemComparer() Methods Compare(object, object) CoordinateSystem を比較します。 public int Compare(object x, object y) Parameters x object 比較対象の第 1 ICoordinateSystem オブジェクト。 y object 比較対象の第 2 ICoordinateSystem オブジェクト。 Returns int x と y が等しいとき 0 を、そうでない場合は -1 を返します。"
  },
  "api/MapQuest.CoordinateSystems.CoordinateSystemEpsgFactory.html": {
    "href": "api/MapQuest.CoordinateSystems.CoordinateSystemEpsgFactory.html",
    "title": "Class CoordinateSystemEpsgFactory | mysite",
    "keywords": "Class CoordinateSystemEpsgFactory Namespace MapQuest.CoordinateSystems Assembly MapQuest.CoordinateSystems.dll public class CoordinateSystemEpsgFactory Inheritance object CoordinateSystemEpsgFactory Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors CoordinateSystemEpsgFactory() public CoordinateSystemEpsgFactory() Methods Create(int) public ICoordinateSystem Create(int code) Parameters code int Returns ICoordinateSystem Create(string) public ICoordinateSystem Create(string code) Parameters code string Returns ICoordinateSystem"
  },
  "api/MapQuest.CoordinateSystems.CoordinateSystemException.html": {
    "href": "api/MapQuest.CoordinateSystems.CoordinateSystemException.html",
    "title": "Class CoordinateSystemException | mysite",
    "keywords": "Class CoordinateSystemException Namespace MapQuest.CoordinateSystems Assembly MapQuest.CoordinateSystems.dll CoordinateSystem で発生した例外を示すクラスです。 public class CoordinateSystemException : DefaultException Inheritance object CoordinateSystemException Constructors CoordinateSystemException() パラメータを指定しないで、新しいインスタンスを初期化します。 public CoordinateSystemException() CoordinateSystemException(int, Exception, params object[]) リソースID、例外の原因となった例外、例外のパラメータ群 を指定してインスタンスを初期化します。 public CoordinateSystemException(int exceptionID, Exception inner, params object[] args) Parameters exceptionID int リソースに格納されているエラーメッセージの ID 。 inner Exception 例外の原因となった Exception 。 args object[] 例外のパラメータ群。 CoordinateSystemException(int, params object[]) リソースID、例外のパラメータ群 を指定してインスタンスを初期化します。 public CoordinateSystemException(int exceptionID, params object[] args) Parameters exceptionID int リソースに格納されているエラーメッセージの ID 。 args object[] 例外のパラメータ群。 CoordinateSystemException(SerializationInfo, StreamingContext) デシリアライズの際に使用されるコンストラクタです。 protected CoordinateSystemException(SerializationInfo info, StreamingContext context) Parameters info SerializationInfo 新しいインスタンスをシリアル化するために必要な情報を格納する SerializationInfo 。 context StreamingContext 新しいインスタンスに関連付けられているシリアル化ストリームのソースを格納する StreamingContext 。 CoordinateSystemException(string) エラーメッセージを指定してインスタンスを初期化します。 public CoordinateSystemException(string message) Parameters message string 例外のメッセージ。 CoordinateSystemException(string, Exception) エラーメッセージと「この例外の原因である例外」を指定してインスタンスを初期化します。 public CoordinateSystemException(string message, Exception inner) Parameters message string 例外のメッセージ。 inner Exception 現在の例外の原因である例外。 CoordinateSystemException(string, int) 接頭辞とリソースID を指定してインスタンスを初期化します。 protected CoordinateSystemException(string prefix, int exceptionID) Parameters prefix string 例外の接頭辞。 exceptionID int リソースに格納されているエラーメッセージの ID 。 CoordinateSystemException(string, int, Exception) 接頭辞とリソースID、例外の原因となった例外を指定してインスタンスを初期化します。 protected CoordinateSystemException(string prefix, int exceptionID, Exception inner) Parameters prefix string 例外の接頭辞。 exceptionID int リソースに格納されているエラーメッセージの ID 。 inner Exception 例外の原因となった Exception 。 CoordinateSystemException(string, int, Exception, params object[]) 接頭辞とリソースID、例外のパラメータ群、例外の原因となった例外 を指定してインスタンスを初期化します。 protected CoordinateSystemException(string prefix, int exceptionID, Exception inner, params object[] args) Parameters prefix string 例外の接頭辞。 exceptionID int リソースに格納されているエラーメッセージの ID 。 inner Exception 例外の原因となった Exception 。 args object[] 例外のパラメータ群。 CoordinateSystemException(string, int, params object[]) 接頭辞とリソースID、例外のパラメータ群を指定してインスタンスを初期化します。 protected CoordinateSystemException(string prefix, int exceptionID, params object[] args) Parameters prefix string 例外の接頭辞。 exceptionID int リソースに格納されているエラーメッセージの ID 。 args object[] 例外のパラメータ群。"
  },
  "api/MapQuest.CoordinateSystems.CoordinateSystemMapQuestFactory.html": {
    "href": "api/MapQuest.CoordinateSystems.CoordinateSystemMapQuestFactory.html",
    "title": "Class CoordinateSystemMapQuestFactory | mysite",
    "keywords": "Class CoordinateSystemMapQuestFactory Namespace MapQuest.CoordinateSystems Assembly MapQuest.CoordinateSystems.dll MapQuest.co.jp 社が定める GridID により ICoordinateSystem を生成するファクトリクラスです。 public class CoordinateSystemMapQuestFactory : ICoordinateSystemSimpleFactory Inheritance object CoordinateSystemMapQuestFactory Implements ICoordinateSystemSimpleFactory Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks このクラスは、Create(int) メソッドにて、MapQuest.co.jp 社が定めた 座標系番号である GridID を指定して、 それに応じた座標系を生成して返すものです。 id として指定できる GridID とその意味を下記に示します。 1 ～ 19 - 平面直角座標系(日本測地系)を表します。 101 ～ 160 - UTM座標系を表します。楕円体は WGS84 を使用します。 値から 100 を減算したものが UTM で定められるゾーンに該当します。 例えば 105 は、「UTM ゾーン 5」を示します。 201 ～ 219 - 平面直角座標系(世界測地系)を表します (※楕円体は GRS80 を使用します)。 値から 200 を減算したものが、平面直角座標系 の 1 ～ 19 に対応します。 例えば東京都付近の世界測地系の平面直角座標系を表す GridID は 209 です。 これらの数値は定数としても用意されています。TOKYO_01 、 JGD2000_01 、 UTM_ZONE01 を参照して下さい。 Constructors CoordinateSystemMapQuestFactory() CoordinateSystemMapQuestFactory クラスの 新しいインスタンスを初期化します。 public CoordinateSystemMapQuestFactory() Fields JGD2000_01 世界測地系の平面直角座標第 1 座標系を表す GridID です。 public static readonly int JGD2000_01 Field Value int JGD2000_02 世界測地系の平面直角座標第 2 座標系を表す GridID です。 public static readonly int JGD2000_02 Field Value int JGD2000_03 世界測地系の平面直角座標第 3 座標系を表す GridID です。 public static readonly int JGD2000_03 Field Value int JGD2000_04 世界測地系の平面直角座標第 4 座標系を表す GridID です。 public static readonly int JGD2000_04 Field Value int JGD2000_05 世界測地系の平面直角座標第 5 座標系を表す GridID です。 public static readonly int JGD2000_05 Field Value int JGD2000_06 世界測地系の平面直角座標第 6 座標系を表す GridID です。 public static readonly int JGD2000_06 Field Value int JGD2000_07 世界測地系の平面直角座標第 7 座標系を表す GridID です。 public static readonly int JGD2000_07 Field Value int JGD2000_08 世界測地系の平面直角座標第 8 座標系を表す GridID です。 public static readonly int JGD2000_08 Field Value int JGD2000_09 世界測地系の平面直角座標第 9 座標系を表す GridID です。 public static readonly int JGD2000_09 Field Value int JGD2000_10 世界測地系の平面直角座標第 10 座標系を表す GridID です。 public static readonly int JGD2000_10 Field Value int JGD2000_11 世界測地系の平面直角座標第 11 座標系を表す GridID です。 public static readonly int JGD2000_11 Field Value int JGD2000_12 世界測地系の平面直角座標第 12 座標系を表す GridID です。 public static readonly int JGD2000_12 Field Value int JGD2000_13 世界測地系の平面直角座標第 13 座標系を表す GridID です。 public static readonly int JGD2000_13 Field Value int JGD2000_14 世界測地系の平面直角座標第 14 座標系を表す GridID です。 public static readonly int JGD2000_14 Field Value int JGD2000_15 世界測地系の平面直角座標第 15 座標系を表す GridID です。 public static readonly int JGD2000_15 Field Value int JGD2000_16 世界測地系の平面直角座標第 16 座標系を表す GridID です。 public static readonly int JGD2000_16 Field Value int JGD2000_17 世界測地系の平面直角座標第 17 座標系を表す GridID です。 public static readonly int JGD2000_17 Field Value int JGD2000_18 世界測地系の平面直角座標第 18 座標系を表す GridID です。 public static readonly int JGD2000_18 Field Value int JGD2000_19 世界測地系の平面直角座標第 19 座標系を表す GridID です。 public static readonly int JGD2000_19 Field Value int JGD2011_01 世界測地系(JGD2011：測地成果2011)の平面直角座標第 1 座標系を表す GridID です。 public static readonly int JGD2011_01 Field Value int JGD2011_02 世界測地系(JGD2011：測地成果2011)の平面直角座標第 2 座標系を表す GridID です。 public static readonly int JGD2011_02 Field Value int JGD2011_03 世界測地系(JGD2011：測地成果2011)の平面直角座標第 3 座標系を表す GridID です。 public static readonly int JGD2011_03 Field Value int JGD2011_04 世界測地系(JGD2011：測地成果2011)の平面直角座標第 4 座標系を表す GridID です。 public static readonly int JGD2011_04 Field Value int JGD2011_05 世界測地系(JGD2011：測地成果2011)の平面直角座標第 5 座標系を表す GridID です。 public static readonly int JGD2011_05 Field Value int JGD2011_06 世界測地系(JGD2011：測地成果2011)の平面直角座標第 6 座標系を表す GridID です。 public static readonly int JGD2011_06 Field Value int JGD2011_07 世界測地系(JGD2011：測地成果2011)の平面直角座標第 7 座標系を表す GridID です。 public static readonly int JGD2011_07 Field Value int JGD2011_08 世界測地系(JGD2011：測地成果2011)の平面直角座標第 8 座標系を表す GridID です。 public static readonly int JGD2011_08 Field Value int JGD2011_09 世界測地系(JGD2011：測地成果2011)の平面直角座標第 9 座標系を表す GridID です。 public static readonly int JGD2011_09 Field Value int JGD2011_10 世界測地系(JGD2011：測地成果2011)の平面直角座標第 10 座標系を表す GridID です。 public static readonly int JGD2011_10 Field Value int JGD2011_11 世界測地系(JGD2011：測地成果2011)の平面直角座標第 11 座標系を表す GridID です。 public static readonly int JGD2011_11 Field Value int JGD2011_12 世界測地系(JGD2011：測地成果2011)の平面直角座標第 12 座標系を表す GridID です。 public static readonly int JGD2011_12 Field Value int JGD2011_13 世界測地系(JGD2011：測地成果2011)の平面直角座標第 13 座標系を表す GridID です。 public static readonly int JGD2011_13 Field Value int JGD2011_14 世界測地系(JGD2011：測地成果2011)の平面直角座標第 14 座標系を表す GridID です。 public static readonly int JGD2011_14 Field Value int JGD2011_15 世界測地系(JGD2011：測地成果2011)の平面直角座標第 15 座標系を表す GridID です。 public static readonly int JGD2011_15 Field Value int JGD2011_16 世界測地系(JGD2011：測地成果2011)の平面直角座標第 16 座標系を表す GridID です。 public static readonly int JGD2011_16 Field Value int JGD2011_17 世界測地系(JGD2011：測地成果2011)の平面直角座標第 17 座標系を表す GridID です。 public static readonly int JGD2011_17 Field Value int JGD2011_18 世界測地系(JGD2011：測地成果2011)の平面直角座標第 18 座標系を表す GridID です。 public static readonly int JGD2011_18 Field Value int JGD2011_19 世界測地系(JGD2011：測地成果2011)の平面直角座標第 19 座標系を表す GridID です。 public static readonly int JGD2011_19 Field Value int LATLON_JGD2000 世界測地系の緯度経度座標系を表す GridID です。 public static readonly int LATLON_JGD2000 Field Value int LATLON_JGD2011 世界測地系(JGD2011：測地成果2011)の緯度経度座標系を表す GridID です。 public static readonly int LATLON_JGD2011 Field Value int LATLON_TOKYO 日本測地系の緯度経度座標系を表す GridID です。 public static readonly int LATLON_TOKYO Field Value int MERCATOR メルカトル図法を表す GridID です。 public static readonly int MERCATOR Field Value int MJGD2000_01 世界測地系の平面直角座標第 1 座標系(ミリ精度)を表す GridID です。 public static readonly int MJGD2000_01 Field Value int MJGD2000_02 世界測地系の平面直角座標第 2 座標系(ミリ精度)を表す GridID です。 public static readonly int MJGD2000_02 Field Value int MJGD2000_03 世界測地系の平面直角座標第 3 座標系(ミリ精度)を表す GridID です。 public static readonly int MJGD2000_03 Field Value int MJGD2000_04 世界測地系の平面直角座標第 4 座標系(ミリ精度)を表す GridID です。 public static readonly int MJGD2000_04 Field Value int MJGD2000_05 世界測地系の平面直角座標第 5 座標系(ミリ精度)を表す GridID です。 public static readonly int MJGD2000_05 Field Value int MJGD2000_06 世界測地系の平面直角座標第 6 座標系(ミリ精度)を表す GridID です。 public static readonly int MJGD2000_06 Field Value int MJGD2000_07 世界測地系の平面直角座標第 7 座標系(ミリ精度)を表す GridID です。 public static readonly int MJGD2000_07 Field Value int MJGD2000_08 世界測地系の平面直角座標第 8 座標系(ミリ精度)を表す GridID です。 public static readonly int MJGD2000_08 Field Value int MJGD2000_09 世界測地系の平面直角座標第 9 座標系(ミリ精度)を表す GridID です。 public static readonly int MJGD2000_09 Field Value int MJGD2000_10 世界測地系の平面直角座標第 10 座標系(ミリ精度)を表す GridID です。 public static readonly int MJGD2000_10 Field Value int MJGD2000_11 世界測地系の平面直角座標第 11 座標系(ミリ精度)を表す GridID です。 public static readonly int MJGD2000_11 Field Value int MJGD2000_12 世界測地系の平面直角座標第 12 座標系(ミリ精度)を表す GridID です。 public static readonly int MJGD2000_12 Field Value int MJGD2000_13 世界測地系の平面直角座標第 13 座標系(ミリ精度)を表す GridID です。 public static readonly int MJGD2000_13 Field Value int MJGD2000_14 世界測地系の平面直角座標第 14 座標系(ミリ精度)を表す GridID です。 public static readonly int MJGD2000_14 Field Value int MJGD2000_15 世界測地系の平面直角座標第 15 座標系(ミリ精度)を表す GridID です。 public static readonly int MJGD2000_15 Field Value int MJGD2000_16 世界測地系の平面直角座標第 16 座標系(ミリ精度)を表す GridID です。 public static readonly int MJGD2000_16 Field Value int MJGD2000_17 世界測地系の平面直角座標第 17 座標系(ミリ精度)を表す GridID です。 public static readonly int MJGD2000_17 Field Value int MJGD2000_18 世界測地系の平面直角座標第 18 座標系(ミリ精度)を表す GridID です。 public static readonly int MJGD2000_18 Field Value int MJGD2000_19 世界測地系の平面直角座標第 19 座標系(ミリ精度)を表す GridID です。 public static readonly int MJGD2000_19 Field Value int MJGD2011_01 世界測地系(JGD2011：測地成果2011)の平面直角座標第 1 座標系(ミリ精度)を表す GridID です。 public static readonly int MJGD2011_01 Field Value int MJGD2011_02 世界測地系(JGD2011：測地成果2011)の平面直角座標第 2 座標系(ミリ精度)を表す GridID です。 public static readonly int MJGD2011_02 Field Value int MJGD2011_03 世界測地系(JGD2011：測地成果2011)の平面直角座標第 3 座標系(ミリ精度)を表す GridID です。 public static readonly int MJGD2011_03 Field Value int MJGD2011_04 世界測地系(JGD2011：測地成果2011)の平面直角座標第 4 座標系(ミリ精度)を表す GridID です。 public static readonly int MJGD2011_04 Field Value int MJGD2011_05 世界測地系(JGD2011：測地成果2011)の平面直角座標第 5 座標系(ミリ精度)を表す GridID です。 public static readonly int MJGD2011_05 Field Value int MJGD2011_06 世界測地系(JGD2011：測地成果2011)の平面直角座標第 6 座標系(ミリ精度)を表す GridID です。 public static readonly int MJGD2011_06 Field Value int MJGD2011_07 世界測地系(JGD2011：測地成果2011)の平面直角座標第 7 座標系(ミリ精度)を表す GridID です。 public static readonly int MJGD2011_07 Field Value int MJGD2011_08 世界測地系(JGD2011：測地成果2011)の平面直角座標第 8 座標系(ミリ精度)を表す GridID です。 public static readonly int MJGD2011_08 Field Value int MJGD2011_09 世界測地系(JGD2011：測地成果2011)の平面直角座標第 9 座標系(ミリ精度)を表す GridID です。 public static readonly int MJGD2011_09 Field Value int MJGD2011_10 世界測地系(JGD2011：測地成果2011)の平面直角座標第 10 座標系(ミリ精度)を表す GridID です。 public static readonly int MJGD2011_10 Field Value int MJGD2011_11 世界測地系(JGD2011：測地成果2011)の平面直角座標第 11 座標系(ミリ精度)を表す GridID です。 public static readonly int MJGD2011_11 Field Value int MJGD2011_12 世界測地系(JGD2011：測地成果2011)の平面直角座標第 12 座標系(ミリ精度)を表す GridID です。 public static readonly int MJGD2011_12 Field Value int MJGD2011_13 世界測地系(JGD2011：測地成果2011)の平面直角座標第 13 座標系(ミリ精度)を表す GridID です。 public static readonly int MJGD2011_13 Field Value int MJGD2011_14 世界測地系(JGD2011：測地成果2011)の平面直角座標第 14 座標系(ミリ精度)を表す GridID です。 public static readonly int MJGD2011_14 Field Value int MJGD2011_15 世界測地系(JGD2011：測地成果2011)の平面直角座標第 15 座標系(ミリ精度)を表す GridID です。 public static readonly int MJGD2011_15 Field Value int MJGD2011_16 世界測地系(JGD2011：測地成果2011)の平面直角座標第 16 座標系(ミリ精度)を表す GridID です。 public static readonly int MJGD2011_16 Field Value int MJGD2011_17 世界測地系(JGD2011：測地成果2011)の平面直角座標第 17 座標系(ミリ精度)を表す GridID です。 public static readonly int MJGD2011_17 Field Value int MJGD2011_18 世界測地系(JGD2011：測地成果2011)の平面直角座標第 18 座標系(ミリ精度)を表す GridID です。 public static readonly int MJGD2011_18 Field Value int MJGD2011_19 世界測地系(JGD2011：測地成果2011)の平面直角座標第 19 座標系(ミリ精度)を表す GridID です。 public static readonly int MJGD2011_19 Field Value int MTOKYO_01 日本測地系の平面直角座標第 1 座標系(ミリ精度)を表す GridID です。 public static readonly int MTOKYO_01 Field Value int MTOKYO_02 日本測地系の平面直角座標第 2 座標系(ミリ精度)を表す GridID です。 public static readonly int MTOKYO_02 Field Value int MTOKYO_03 日本測地系の平面直角座標第 3 座標系(ミリ精度)を表す GridID です。 public static readonly int MTOKYO_03 Field Value int MTOKYO_04 日本測地系の平面直角座標第 4 座標系(ミリ精度)を表す GridID です。 public static readonly int MTOKYO_04 Field Value int MTOKYO_05 日本測地系の平面直角座標第 5 座標系(ミリ精度)を表す GridID です。 public static readonly int MTOKYO_05 Field Value int MTOKYO_06 日本測地系の平面直角座標第 6 座標系(ミリ精度)を表す GridID です。 public static readonly int MTOKYO_06 Field Value int MTOKYO_07 日本測地系の平面直角座標第 7 座標系(ミリ精度)を表す GridID です。 public static readonly int MTOKYO_07 Field Value int MTOKYO_08 日本測地系の平面直角座標第 8 座標系(ミリ精度)を表す GridID です。 public static readonly int MTOKYO_08 Field Value int MTOKYO_09 日本測地系の平面直角座標第 9 座標系(ミリ精度)を表す GridID です。 public static readonly int MTOKYO_09 Field Value int MTOKYO_10 日本測地系の平面直角座標第 10 座標系(ミリ精度)を表す GridID です。 public static readonly int MTOKYO_10 Field Value int MTOKYO_11 日本測地系の平面直角座標第 11 座標系(ミリ精度)を表す GridID です。 public static readonly int MTOKYO_11 Field Value int MTOKYO_12 日本測地系の平面直角座標第 12 座標系(ミリ精度)を表す GridID です。 public static readonly int MTOKYO_12 Field Value int MTOKYO_13 日本測地系の平面直角座標第 13 座標系(ミリ精度)を表す GridID です。 public static readonly int MTOKYO_13 Field Value int MTOKYO_14 日本測地系の平面直角座標第 14 座標系(ミリ精度)を表す GridID です。 public static readonly int MTOKYO_14 Field Value int MTOKYO_15 日本測地系の平面直角座標第 15 座標系(ミリ精度)を表す GridID です。 public static readonly int MTOKYO_15 Field Value int MTOKYO_16 日本測地系の平面直角座標第 16 座標系(ミリ精度)を表す GridID です。 public static readonly int MTOKYO_16 Field Value int MTOKYO_17 日本測地系の平面直角座標第 17 座標系(ミリ精度)を表す GridID です。 public static readonly int MTOKYO_17 Field Value int MTOKYO_18 日本測地系の平面直角座標第 18 座標系(ミリ精度)を表す GridID です。 public static readonly int MTOKYO_18 Field Value int MTOKYO_19 日本測地系の平面直角座標第 19 座標系(ミリ精度)を表す GridID です。 public static readonly int MTOKYO_19 Field Value int TOKYO_01 日本測地系の平面直角座標第 1 座標系を表す GridID です。 public static readonly int TOKYO_01 Field Value int TOKYO_02 日本測地系の平面直角座標第 2 座標系を表す GridID です。 public static readonly int TOKYO_02 Field Value int TOKYO_03 日本測地系の平面直角座標第 3 座標系を表す GridID です。 public static readonly int TOKYO_03 Field Value int TOKYO_04 日本測地系の平面直角座標第 4 座標系を表す GridID です。 public static readonly int TOKYO_04 Field Value int TOKYO_05 日本測地系の平面直角座標第 5 座標系を表す GridID です。 public static readonly int TOKYO_05 Field Value int TOKYO_06 日本測地系の平面直角座標第 6 座標系を表す GridID です。 public static readonly int TOKYO_06 Field Value int TOKYO_07 日本測地系の平面直角座標第 7 座標系を表す GridID です。 public static readonly int TOKYO_07 Field Value int TOKYO_08 日本測地系の平面直角座標第 8 座標系を表す GridID です。 public static readonly int TOKYO_08 Field Value int TOKYO_09 日本測地系の平面直角座標第 9 座標系を表す GridID です。 public static readonly int TOKYO_09 Field Value int TOKYO_10 日本測地系の平面直角座標第 10 座標系を表す GridID です。 public static readonly int TOKYO_10 Field Value int TOKYO_11 日本測地系の平面直角座標第 11 座標系を表す GridID です。 public static readonly int TOKYO_11 Field Value int TOKYO_12 日本測地系の平面直角座標第 12 座標系を表す GridID です。 public static readonly int TOKYO_12 Field Value int TOKYO_13 日本測地系の平面直角座標第 13 座標系を表す GridID です。 public static readonly int TOKYO_13 Field Value int TOKYO_14 日本測地系の平面直角座標第 14 座標系を表す GridID です。 public static readonly int TOKYO_14 Field Value int TOKYO_15 日本測地系の平面直角座標第 15 座標系を表す GridID です。 public static readonly int TOKYO_15 Field Value int TOKYO_16 日本測地系の平面直角座標第 16 座標系を表す GridID です。 public static readonly int TOKYO_16 Field Value int TOKYO_17 日本測地系の平面直角座標第 17 座標系を表す GridID です。 public static readonly int TOKYO_17 Field Value int TOKYO_18 日本測地系の平面直角座標第 18 座標系を表す GridID です。 public static readonly int TOKYO_18 Field Value int TOKYO_19 日本測地系の平面直角座標第 19 座標系を表す GridID です。 public static readonly int TOKYO_19 Field Value int UTM_ZONE01 UTM座標系の ゾーン 1 を表す GridID です。 public static readonly int UTM_ZONE01 Field Value int UTM_ZONE02 UTM座標系の ゾーン 2 を表す GridID です。 public static readonly int UTM_ZONE02 Field Value int UTM_ZONE03 UTM座標系の ゾーン 3 を表す GridID です。 public static readonly int UTM_ZONE03 Field Value int UTM_ZONE04 UTM座標系の ゾーン 4 を表す GridID です。 public static readonly int UTM_ZONE04 Field Value int UTM_ZONE05 UTM座標系の ゾーン 5 を表す GridID です。 public static readonly int UTM_ZONE05 Field Value int UTM_ZONE06 UTM座標系の ゾーン 6 を表す GridID です。 public static readonly int UTM_ZONE06 Field Value int UTM_ZONE07 UTM座標系の ゾーン 7 を表す GridID です。 public static readonly int UTM_ZONE07 Field Value int UTM_ZONE08 UTM座標系の ゾーン 8 を表す GridID です。 public static readonly int UTM_ZONE08 Field Value int UTM_ZONE09 UTM座標系の ゾーン 9 を表す GridID です。 public static readonly int UTM_ZONE09 Field Value int UTM_ZONE10 UTM座標系の ゾーン 10 を表す GridID です。 public static readonly int UTM_ZONE10 Field Value int UTM_ZONE11 UTM座標系の ゾーン 11 を表す GridID です。 public static readonly int UTM_ZONE11 Field Value int UTM_ZONE12 UTM座標系の ゾーン 12 を表す GridID です。 public static readonly int UTM_ZONE12 Field Value int UTM_ZONE13 UTM座標系の ゾーン 13 を表す GridID です。 public static readonly int UTM_ZONE13 Field Value int UTM_ZONE14 UTM座標系の ゾーン 14 を表す GridID です。 public static readonly int UTM_ZONE14 Field Value int UTM_ZONE15 UTM座標系の ゾーン 15 を表す GridID です。 public static readonly int UTM_ZONE15 Field Value int UTM_ZONE16 UTM座標系の ゾーン 16 を表す GridID です。 public static readonly int UTM_ZONE16 Field Value int UTM_ZONE17 UTM座標系の ゾーン 17 を表す GridID です。 public static readonly int UTM_ZONE17 Field Value int UTM_ZONE18 UTM座標系の ゾーン 18 を表す GridID です。 public static readonly int UTM_ZONE18 Field Value int UTM_ZONE19 UTM座標系の ゾーン 19 を表す GridID です。 public static readonly int UTM_ZONE19 Field Value int UTM_ZONE20 UTM座標系の ゾーン 20 を表す GridID です。 public static readonly int UTM_ZONE20 Field Value int UTM_ZONE21 UTM座標系の ゾーン 21 を表す GridID です。 public static readonly int UTM_ZONE21 Field Value int UTM_ZONE22 UTM座標系の ゾーン 22 を表す GridID です。 public static readonly int UTM_ZONE22 Field Value int UTM_ZONE23 UTM座標系の ゾーン 23 を表す GridID です。 public static readonly int UTM_ZONE23 Field Value int UTM_ZONE24 UTM座標系の ゾーン 24 を表す GridID です。 public static readonly int UTM_ZONE24 Field Value int UTM_ZONE25 UTM座標系の ゾーン 25 を表す GridID です。 public static readonly int UTM_ZONE25 Field Value int UTM_ZONE26 UTM座標系の ゾーン 26 を表す GridID です。 public static readonly int UTM_ZONE26 Field Value int UTM_ZONE27 UTM座標系の ゾーン 27 を表す GridID です。 public static readonly int UTM_ZONE27 Field Value int UTM_ZONE28 UTM座標系の ゾーン 28 を表す GridID です。 public static readonly int UTM_ZONE28 Field Value int UTM_ZONE29 UTM座標系の ゾーン 29 を表す GridID です。 public static readonly int UTM_ZONE29 Field Value int UTM_ZONE30 UTM座標系の ゾーン 30 を表す GridID です。 public static readonly int UTM_ZONE30 Field Value int UTM_ZONE31 UTM座標系の ゾーン 31 を表す GridID です。 public static readonly int UTM_ZONE31 Field Value int UTM_ZONE32 UTM座標系の ゾーン 32 を表す GridID です。 public static readonly int UTM_ZONE32 Field Value int UTM_ZONE33 UTM座標系の ゾーン 33 を表す GridID です。 public static readonly int UTM_ZONE33 Field Value int UTM_ZONE34 UTM座標系の ゾーン 34 を表す GridID です。 public static readonly int UTM_ZONE34 Field Value int UTM_ZONE35 UTM座標系の ゾーン 35 を表す GridID です。 public static readonly int UTM_ZONE35 Field Value int UTM_ZONE36 UTM座標系の ゾーン 36 を表す GridID です。 public static readonly int UTM_ZONE36 Field Value int UTM_ZONE37 UTM座標系の ゾーン 37 を表す GridID です。 public static readonly int UTM_ZONE37 Field Value int UTM_ZONE38 UTM座標系の ゾーン 38 を表す GridID です。 public static readonly int UTM_ZONE38 Field Value int UTM_ZONE39 UTM座標系の ゾーン 39 を表す GridID です。 public static readonly int UTM_ZONE39 Field Value int UTM_ZONE40 UTM座標系の ゾーン 40 を表す GridID です。 public static readonly int UTM_ZONE40 Field Value int UTM_ZONE41 UTM座標系の ゾーン 41 を表す GridID です。 public static readonly int UTM_ZONE41 Field Value int UTM_ZONE42 UTM座標系の ゾーン 42 を表す GridID です。 public static readonly int UTM_ZONE42 Field Value int UTM_ZONE43 UTM座標系の ゾーン 43 を表す GridID です。 public static readonly int UTM_ZONE43 Field Value int UTM_ZONE44 UTM座標系の ゾーン 44 を表す GridID です。 public static readonly int UTM_ZONE44 Field Value int UTM_ZONE45 UTM座標系の ゾーン 45 を表す GridID です。 public static readonly int UTM_ZONE45 Field Value int UTM_ZONE46 UTM座標系の ゾーン 46 を表す GridID です。 public static readonly int UTM_ZONE46 Field Value int UTM_ZONE47 UTM座標系の ゾーン 47 を表す GridID です。 public static readonly int UTM_ZONE47 Field Value int UTM_ZONE48 UTM座標系の ゾーン 48 を表す GridID です。 public static readonly int UTM_ZONE48 Field Value int UTM_ZONE49 UTM座標系の ゾーン 49 を表す GridID です。 public static readonly int UTM_ZONE49 Field Value int UTM_ZONE50 UTM座標系の ゾーン 50 を表す GridID です。 public static readonly int UTM_ZONE50 Field Value int UTM_ZONE51 UTM座標系の ゾーン 51 を表す GridID です。 public static readonly int UTM_ZONE51 Field Value int UTM_ZONE52 UTM座標系の ゾーン 52 を表す GridID です。 public static readonly int UTM_ZONE52 Field Value int UTM_ZONE53 UTM座標系の ゾーン 53 を表す GridID です。 public static readonly int UTM_ZONE53 Field Value int UTM_ZONE54 UTM座標系の ゾーン 54 を表す GridID です。 public static readonly int UTM_ZONE54 Field Value int UTM_ZONE55 UTM座標系の ゾーン 55 を表す GridID です。 public static readonly int UTM_ZONE55 Field Value int UTM_ZONE56 UTM座標系の ゾーン 56 を表す GridID です。 public static readonly int UTM_ZONE56 Field Value int UTM_ZONE57 UTM座標系の ゾーン 57 を表す GridID です。 public static readonly int UTM_ZONE57 Field Value int UTM_ZONE58 UTM座標系の ゾーン 58 を表す GridID です。 public static readonly int UTM_ZONE58 Field Value int UTM_ZONE59 UTM座標系の ゾーン 59 を表す GridID です。 public static readonly int UTM_ZONE59 Field Value int UTM_ZONE60 UTM座標系の ゾーン 60 を表す GridID です。 public static readonly int UTM_ZONE60 Field Value int WEB_MERCATOR Webメルカトル図法を表す GridID です。 public static readonly int WEB_MERCATOR Field Value int Properties AngularUnit Tokyo/Jgd2000/Wgs84 の GeographicCoordinateSystem を生成する際の、 角度の単位を指定します。 public IAngularUnit AngularUnit { get; set; } Property Value IAngularUnit 既定値は MilliSecond（ミリ秒）です。 Remarks 通常、このプロパティの値を変更する必要はありません。 Methods Create(int) 数値の GridID を指定して、座標系を生成します。 public virtual ICoordinateSystem Create(int gridID) Parameters gridID int MapQuest.co.jp 社が定める座標系番号。 詳細は、CoordinateSystemMapQuestFactory を参照して下さい。 Returns ICoordinateSystem 生成された ICoordinateSystem 。 Create(string) 文字列の GridID を指定して、座標系を生成します。 public virtual ICoordinateSystem Create(string gridID) Parameters gridID string MapQuest.co.jp 社が定める座標系番号を 文字列にキャストしたもの。 詳細は、CoordinateSystemMapQuestFactory を参照して下さい。 Returns ICoordinateSystem 生成された ICoordinateSystem 。 Exceptions InvalidCastException gridID に数値以外を指定しました。 CreateJgd2000Geographic(int) protected virtual ICoordinateSystem CreateJgd2000Geographic(int code) Parameters code int Returns ICoordinateSystem CreateJgd2000Projected(int) protected virtual ICoordinateSystem CreateJgd2000Projected(int code) Parameters code int Returns ICoordinateSystem CreateJgd2000Projected(int, LinearUnit) protected virtual ICoordinateSystem CreateJgd2000Projected(int code, LinearUnit linearUnit) Parameters code int linearUnit LinearUnit Returns ICoordinateSystem CreateJgd2011Geographic(int) protected virtual ICoordinateSystem CreateJgd2011Geographic(int code) Parameters code int Returns ICoordinateSystem CreateJgd2011Projected(int) protected virtual ICoordinateSystem CreateJgd2011Projected(int code) Parameters code int Returns ICoordinateSystem CreateJgd2011Projected(int, LinearUnit) protected virtual ICoordinateSystem CreateJgd2011Projected(int code, LinearUnit linearUnit) Parameters code int linearUnit LinearUnit Returns ICoordinateSystem CreateMercatorProjected(int) protected virtual ICoordinateSystem CreateMercatorProjected(int code) Parameters code int Returns ICoordinateSystem CreateTokyoGeographic(int) protected virtual ICoordinateSystem CreateTokyoGeographic(int code) Parameters code int Returns ICoordinateSystem CreateTokyoProjected(int) protected virtual ICoordinateSystem CreateTokyoProjected(int code) Parameters code int Returns ICoordinateSystem CreateTokyoProjected(int, LinearUnit) protected virtual ICoordinateSystem CreateTokyoProjected(int code, LinearUnit linearUnit) Parameters code int linearUnit LinearUnit Returns ICoordinateSystem CreateUtmProjected(int) protected virtual ICoordinateSystem CreateUtmProjected(int code) Parameters code int Returns ICoordinateSystem CreateWebMercatorProjected(int) protected virtual ICoordinateSystem CreateWebMercatorProjected(int code) Parameters code int Returns ICoordinateSystem CreateWgs84Geographic(int) protected virtual ICoordinateSystem CreateWgs84Geographic(int code) Parameters code int Returns ICoordinateSystem CreateWgs84Projected(int) protected virtual ICoordinateSystem CreateWgs84Projected(int code) Parameters code int Returns ICoordinateSystem GetJapanParameters(int) protected virtual IProjection GetJapanParameters(int code) Parameters code int Returns IProjection GetJgd2000Geographic() protected virtual IGeographicCoordinateSystem GetJgd2000Geographic() Returns IGeographicCoordinateSystem GetJgd2011Geographic() protected virtual IGeographicCoordinateSystem GetJgd2011Geographic() Returns IGeographicCoordinateSystem GetMercatorParameters(int) protected virtual IProjection GetMercatorParameters(int code) Parameters code int Returns IProjection GetTokyoGeographic() protected virtual IGeographicCoordinateSystem GetTokyoGeographic() Returns IGeographicCoordinateSystem GetWebMercatorParameters(int) protected virtual IProjection GetWebMercatorParameters(int code) Parameters code int Returns IProjection GetWgs84Geographic() protected virtual IGeographicCoordinateSystem GetWgs84Geographic() Returns IGeographicCoordinateSystem GetWgs84Parameters(int) protected virtual IProjection GetWgs84Parameters(int code) Parameters code int Returns IProjection GetWgs84SphereGeographic() protected virtual IGeographicCoordinateSystem GetWgs84SphereGeographic() Returns IGeographicCoordinateSystem"
  },
  "api/MapQuest.CoordinateSystems.CoordinateSystemType.html": {
    "href": "api/MapQuest.CoordinateSystems.CoordinateSystemType.html",
    "title": "Enum CoordinateSystemType | mysite",
    "keywords": "Enum CoordinateSystemType Namespace MapQuest.CoordinateSystems Assembly MapQuest.CoordinateSystems.dll 座標系の種類を示す列挙体です。 public enum CoordinateSystemType : short Fields Geographic = 2 「GeographicCoordinateSystem」を示します。 Horizontal = 1 「HorizontalCoordinateSystem」を示します。 None = 0 未定義。 Projected = 3 「ProjectedCoordinateSystem」を示します。"
  },
  "api/MapQuest.CoordinateSystems.Datum.html": {
    "href": "api/MapQuest.CoordinateSystems.Datum.html",
    "title": "Class Datum | mysite",
    "keywords": "Class Datum Namespace MapQuest.CoordinateSystems Assembly MapQuest.CoordinateSystems.dll 「測地系」の基本的な共通の実装を提供する抽象クラスです。 IDatum インターフェースをインプリメントします。 測地系(Datum) は、ある座標を地球上の実際の位置として定義するためのものです。 座標系の、地球に対しての位置および方向を定義するパラメーターとも言えます。 ここでは、あらかじめ定められた物理的な位置、 また、物理的な指示(回転の軸など)と、 座標系との関係について記述するパラメーター群を指します。 測地系の定義はさらに、一時的な振る舞い (軸の方向の変化率など)を含んでいる場合もあります。 public abstract class Datum : Info, IDatum, IInfo, ICloneable Inheritance object Info Datum Implements IDatum IInfo ICloneable Derived HorizontalDatum Inherited Members Info.GetHashCode() Info.Equals(object) Info.Clone() Info.Remarks Info.AuthorityCode Info.Authority Info.Name Info.Alias Info.Abbreviation Info.WKT Info.XML object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Constructors Datum(Datum) コピーコンストラクタ。 Datum の簡易コピーを生成します。 protected Datum(Datum datum) Parameters datum Datum コピー元の測地系。 Datum(DatumType) 測地系の種類を指定して、新しいインスタンスを初期化します。 protected Datum(DatumType datumType) Parameters datumType DatumType The datum type. Datum(DatumType, string, string, string, string, string, string) 必要な全てのパラメータを指定して、新しいインスタンスを初期化します。 protected Datum(DatumType datumType, string remarks, string authorityCode, string authority, string name, string alias, string abbreviation) Parameters datumType DatumType 測地系の種類。 remarks string 測地系の解説。 authorityCode string authority によって策定されたこの測地系を識別する ID 。 authority string この測地系を策定した機関や団体の名称。 name string この測地系の名称。 alias string name 以外の別名。 abbreviation string 測地系の短縮名。 Datum(string, DatumType) 測地系の名前と種類を指定して、新しいインスタンスを初期化します。 protected Datum(string name, DatumType datumType) Parameters name string 測地系の名称。(例：JGD2000, WGS84 など) datumType DatumType 測地系の種類。 Properties DatumType 測地系の種類を取得します。 public DatumType DatumType { get; } Property Value DatumType 測地系の種類を示す DatumType 。 See Also HorizontalDatum"
  },
  "api/MapQuest.CoordinateSystems.DatumType.html": {
    "href": "api/MapQuest.CoordinateSystems.DatumType.html",
    "title": "Enum DatumType | mysite",
    "keywords": "Enum DatumType Namespace MapQuest.CoordinateSystems Assembly MapQuest.CoordinateSystems.dll 測地系の種類を示す列挙体です。 public enum DatumType : short Fields IHDClassic = 1001 ED50, NAD27 などの古い測地系を示します。 IHDGeocentric = 1002 ITRF 系や WGS 系など、衛星によって得られた測地系を示します。 IVDOther = 2000 その他の測地系を示します。 Remarks The enumeration is split into ranges which indicate the datum's type. The value should be one of the predefined values, or within the range for local types. This is part of the OpenGIS specification to allow them to coordinate the addition of new interoperable codes."
  },
  "api/MapQuest.CoordinateSystems.Ellipsoid.html": {
    "href": "api/MapQuest.CoordinateSystems.Ellipsoid.html",
    "title": "Class Ellipsoid | mysite",
    "keywords": "Class Ellipsoid Namespace MapQuest.CoordinateSystems Assembly MapQuest.CoordinateSystems.dll 「楕円体」を表すクラスです。 public class Ellipsoid : Info, IEllipsoid, IInfo, ICloneable Inheritance object Info Ellipsoid Implements IEllipsoid IInfo ICloneable Inherited Members Info.GetHashCode() Info.Equals(object) Info.Remarks Info.AuthorityCode Info.Authority Info.Name Info.Alias Info.Abbreviation Info.WKT Info.XML object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Remarks 楕円体とは、地球を数学的に表すために、ジオイドに厳密に接近させた、 測地・測量で使うための図形です。 日本では、次の楕円体が一般的によく利用されます。 Bessel 1841 日本測地系の平面直角座標系で使われる楕円体です。 GRS 1980 測地成果2000 で使用される楕円体です。 Constructors Ellipsoid(Ellipsoid) コピーコンストラクタ。指定したインスタンスの詳細コピーを提供します。 public Ellipsoid(Ellipsoid sourceEllipsoid) Parameters sourceEllipsoid Ellipsoid コピー元のインスタンス。 Ellipsoid(double, double, double, bool, ILinearUnit) 楕円体のパラメータを指定して、新しいインスタンスを初期化します。 public Ellipsoid(double semiMajorAxis, double semiMinorAxis, double inverseFlattening, bool isIvfDefinitive, ILinearUnit linearUnit) Parameters semiMajorAxis double 楕円体の長半径。 semiMinorAxis double 楕円体の短半径。 inverseFlattening double 楕円体の「扁平率の逆数」。 isIvfDefinitive bool inverseFlattening を明示的に設定した場合は true 、 それ以外の場合は false 。 linearUnit ILinearUnit 楕円体の距離の単位。 Ellipsoid(double, double, double, bool, ILinearUnit, string, string, string, string, string, string) 楕円体のパラメータと、名称などの情報を指定して、 新しいインスタンスを初期化します。 public Ellipsoid(double semiMajorAxis, double semiMinorAxis, double inverseFlattening, bool isIvfDefinitive, ILinearUnit linearUnit, string remarks, string authority, string authorityCode, string name, string alias, string abbreviation) Parameters semiMajorAxis double 楕円体の長半径。 semiMinorAxis double 楕円体の短半径。 inverseFlattening double 楕円体の「扁平率の逆数」。 isIvfDefinitive bool inverseFlattening を明示的に設定した場合は true 、 それ以外の場合は false 。 linearUnit ILinearUnit 楕円体の距離の単位。 remarks string 楕円体の説明。 authority string この楕円体を策定した機関や団体の名称。 authorityCode string authority によって策定されたこの楕円体を識別する ID 。 name string 楕円体の名称。 alias string 楕円体の名称以外の別名。 abbreviation string 楕円体の短縮名。 Ellipsoid(string, double, double, ILinearUnit) 楕円体の、名前・長半径・短半径・単位を指定して、 新しいインスタンスを初期化します。 public Ellipsoid(string name, double semiMajorAxis, double semiMinorAxis, ILinearUnit linearUnit) Parameters name string 楕円体の名称。 semiMajorAxis double 楕円体の長半径。 semiMinorAxis double 楕円体の短半径。 linearUnit ILinearUnit 楕円体の距離の単位。 Ellipsoid(string, double, double, double, bool, ILinearUnit) Constructs a new ellipsoid using the specified axis length. public Ellipsoid(string name, double semiMajorAxis, double semiMinorAxis, double inverseFlattening, bool isIvfDefinitive, ILinearUnit linearUnit) Parameters name string 楕円体の名称。 semiMajorAxis double 楕円体の長半径。 semiMinorAxis double 楕円体の短半径。 inverseFlattening double 楕円体の「扁平率の逆数」。 isIvfDefinitive bool inverseFlattening を明示的に設定した場合は true 、 それ以外の場合は false 。 linearUnit ILinearUnit 楕円体の距離の単位。 Properties AxisUnit 楕円体の長半径・短半径の単位を取得します。 public ILinearUnit AxisUnit { get; } Property Value ILinearUnit 楕円体の軸の単位を示す ILinearUnit 。 Bessel1841 「Bessel 1841」楕円体を取得します。古い日本測地系で使用されます。 public static Ellipsoid Bessel1841 { get; } Property Value Ellipsoid 「Bessel 1841」楕円体を示す Ellipsoid 。 Eccentricity 偏心率を取得します。 public double Eccentricity { get; } Property Value double この楕円体の偏心率。 Remarks 偏心率は、以下の計算式によって表されます。 a, b, は楕円体の長半径と短半径を示します。 f, flattening = (a - b)/a. e = sqrt(2 * f - f * f) GRS80 「GRS80」楕円体を取得します。日本の「測地成果2000(JGD2000)」や アメリカの「American datum system (NAD83)」で使用されます。 public static Ellipsoid GRS80 { get; } Property Value Ellipsoid 「GRS80」楕円体を示す Ellipsoid 。 InverseFlattening 楕円体のつぶれ方を示す「扁平率の逆数」を取得します。 public double InverseFlattening { get; } Property Value double 楕円体の扁平率の逆数。 IsIvfDefinitive 「楕円体のつぶれ方」を示す「扁平率の逆数」が、 明示的にパラメータとして与えられているかどうかを取得します。 public bool IsIvfDefinitive { get; } Property Value bool true の場合、「楕円体のつぶれ方」は、明確に与えられます。 false の場合は、長半径・短半径から計算されます。 Remarks いくつかの楕円体は定義する値として「扁平率の逆数」を使用します。 他の楕円体は、「扁平率の逆数」を計算するために極半径を使用します。 この区別は浮動小数点での丸め誤差を回避するのに重要になります。 IsSphere 完全な球体かどうかを取得します。 public bool IsSphere { get; } Property Value bool true の場合、この楕円体は完全な「球体」である事を示します。 それ以外の場合は false を返します。 SemiMajorAxis 楕円体の長半径を取得します。 public double SemiMajorAxis { get; } Property Value double 楕円体の長半径。 単位は AxisUnit で定義されます。 SemiMinorAxis 楕円体の短半径を取得します。 public double SemiMinorAxis { get; } Property Value double 楕円体の短半径。 単位は AxisUnit で定義されます。 WGS84 「WGS84 楕円体」を取得します。GPS などで使われる楕円体です。 public static Ellipsoid WGS84 { get; } Property Value Ellipsoid 「WGS84 楕円体」を示す Ellipsoid 。 Methods Clone() 現在のインスタンスの詳細コピーを提供します。 public override object Clone() Returns object 複製された Ellipsoid 。 Create(string, double, double, ILinearUnit) 新しい楕円体を生成します。 public static Ellipsoid Create(string name, double semiMajorAxis, double inverseFlattening, ILinearUnit linearUnit) Parameters name string 楕円体の名称。 semiMajorAxis double 楕円体の長半径。 inverseFlattening double 扁平率の逆数。 linearUnit ILinearUnit 楕円体の座標の単位。 Returns Ellipsoid OrthodromicDistance(double, double, double, double) 楕円体上の 2 つの座標間の距離（大圏コースの距離）を計算します。 public virtual double OrthodromicDistance(double x1, double y1, double x2, double y2) Parameters x1 double 第 1 の経度(度)。 y1 double 第 1 の緯度(度)。 x2 double 第 2 の経度(度)。 y2 double 第 2 の緯度(度)。 Returns double 楕円体上の 2 つの座標間の距離(単位は AxisUnit 。) 計算に失敗した場合は NaN を返します。 例外は発生しません。 Remarks 「Orthodromic Distance」とは、楕円体の表面の 2 つの座標間の、最も近い距離の事です。 この距離で示されるコースを「大圏コース」といいます。 大圏コースは、「航程線(loxodromic)」とは異なります。 航程線は、経線と常に一定の角度で進んでいくため、大圏コースよりも長くなります。"
  },
  "api/MapQuest.CoordinateSystems.EpsgDbConnection.html": {
    "href": "api/MapQuest.CoordinateSystems.EpsgDbConnection.html",
    "title": "Class EpsgDbConnection | mysite",
    "keywords": "Class EpsgDbConnection Namespace MapQuest.CoordinateSystems Assembly MapQuest.CoordinateSystems.dll public static class EpsgDbConnection Inheritance object EpsgDbConnection Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Fields Create public static Func<IDbConnection> Create Field Value Func<IDbConnection>"
  },
  "api/MapQuest.CoordinateSystems.EpsgParameterFile.OpenParameterFile.html": {
    "href": "api/MapQuest.CoordinateSystems.EpsgParameterFile.OpenParameterFile.html",
    "title": "Delegate EpsgParameterFile.OpenParameterFile | mysite",
    "keywords": "Delegate EpsgParameterFile.OpenParameterFile Namespace MapQuest.CoordinateSystems Assembly MapQuest.CoordinateSystems.dll EPSG の座標変換に必要なパラメータファイルを読み込むためのデリゲートです。 指定されたメソッド名およびパラメータファイル名に対応するストリームリーダーを返す必要があります。 public delegate StreamReader EpsgParameterFile.OpenParameterFile(string methodName, string fileName) Parameters methodName string 変換メソッド名 fileName string パラメータファイル名 Returns StreamReader パラメータファイルのリーダー Remarks 引数には例として次のような値が渡されます。 変換メソッド名：\"NTv2\" ファイル名：\"tky2jgd.gsb\" Constructors OpenParameterFile(object, IntPtr) public OpenParameterFile(object @object, IntPtr method) Parameters object object method IntPtr Methods BeginInvoke(string, string, AsyncCallback, object) public virtual IAsyncResult BeginInvoke(string methodName, string fileName, AsyncCallback callback, object @object) Parameters methodName string fileName string callback AsyncCallback object object Returns IAsyncResult EndInvoke(IAsyncResult) public virtual StreamReader EndInvoke(IAsyncResult result) Parameters result IAsyncResult Returns StreamReader Invoke(string, string) public virtual StreamReader Invoke(string methodName, string fileName) Parameters methodName string fileName string Returns StreamReader"
  },
  "api/MapQuest.CoordinateSystems.EpsgParameterFile.html": {
    "href": "api/MapQuest.CoordinateSystems.EpsgParameterFile.html",
    "title": "Class EpsgParameterFile | mysite",
    "keywords": "Class EpsgParameterFile Namespace MapQuest.CoordinateSystems Assembly MapQuest.CoordinateSystems.dll public static class EpsgParameterFile Inheritance object EpsgParameterFile Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Fields Open 引数：変換メソッド名、パラメータファイル名 返り値：パラメータファイルのストリーム public static EpsgParameterFile.OpenParameterFile Open Field Value EpsgParameterFile.OpenParameterFile"
  },
  "api/MapQuest.CoordinateSystems.GeographicCoordinateSystem.html": {
    "href": "api/MapQuest.CoordinateSystems.GeographicCoordinateSystem.html",
    "title": "Class GeographicCoordinateSystem | mysite",
    "keywords": "Class GeographicCoordinateSystem Namespace MapQuest.CoordinateSystems Assembly MapQuest.CoordinateSystems.dll 緯度経度値がベースとなる座標系のクラスです。 public class GeographicCoordinateSystem : HorizontalCoordinateSystem, IGeographicCoordinateSystem, IHorizontalCoordinateSystem, ICoordinateSystem, IInfo, ICloneable Inheritance object Info CoordinateSystem HorizontalCoordinateSystem GeographicCoordinateSystem Implements IGeographicCoordinateSystem IHorizontalCoordinateSystem ICoordinateSystem IInfo ICloneable Inherited Members HorizontalCoordinateSystem.Dimension HorizontalCoordinateSystem.HorizontalDatum HorizontalCoordinateSystem.GeodesicHorizontalDatum CoordinateSystem.Equals(object) CoordinateSystem.GetHashCode() Info.Remarks Info.AuthorityCode Info.Authority Info.Name Info.Alias Info.Abbreviation Info.WKT Info.XML object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Remarks 大抵の Geographic Coordinate System の座標系は 緯度/経度です。しかし、経度/緯度 であるものもあります。 このように、すべての Geographic Coordinate System が「度」を使用するとは限らないので、角度の単位を確認してください。 Constructors GeographicCoordinateSystem(GeographicCoordinateSystem) コピーコンストラクタ。 public GeographicCoordinateSystem(GeographicCoordinateSystem sourceCS) Parameters sourceCS GeographicCoordinateSystem コピー元の座標系。 GeographicCoordinateSystem(IAngularUnit, IHorizontalDatum, IPrimeMeridian, IAxisInfo, IAxisInfo, string, string, string, string, string, string) 全ての必要なパラメータを指定して、新しいインスタンスを初期化します。 public GeographicCoordinateSystem(IAngularUnit angularUnit, IHorizontalDatum horizontalDatum, IPrimeMeridian primeMeridian, IAxisInfo axis0, IAxisInfo axis1, string remarks, string authority, string authorityCode, string name, string alias, string abbreviation) Parameters angularUnit IAngularUnit 緯度経度座標の単位。 horizontalDatum IHorizontalDatum 使用する測地系。 primeMeridian IPrimeMeridian 基準子午線。 axis0 IAxisInfo 1 つめの軸の情報。 axis1 IAxisInfo 2 つめの軸の情報。 remarks string 座標系の説明。 authority string このオブジェクトを策定した機関や団体の名称を取得します。 authorityCode string authority によって策定されたこのクラスを識別する ID を取得します。 name string 座標系の名前。 alias string 名前以外の別名。 abbreviation string 座標系の短縮名。 GeographicCoordinateSystem(string, HorizontalDatum) 座標系の名前と、使用する測地系を指定して、新しいインスタンスを初期化します。 public GeographicCoordinateSystem(string name, HorizontalDatum datum) Parameters name string 座標系の名前。 datum HorizontalDatum 使用する測地系。 Remarks この座標系は、緯度/経度座標を使用します。 角度の単位は「度」です。また、基準子午線はグリニッジです。 GeographicCoordinateSystem(string, IAngularUnit, IHorizontalDatum, IPrimeMeridian, IAxisInfo, IAxisInfo) 座標系に関する必要なパラメータを指定して、新しいインスタンスを初期化します。 public GeographicCoordinateSystem(string name, IAngularUnit angularUnit, IHorizontalDatum horizontalDatum, IPrimeMeridian primeMeridian, IAxisInfo axis0, IAxisInfo axis1) Parameters name string 座標系の名前。 angularUnit IAngularUnit 緯度経度座標の単位。 horizontalDatum IHorizontalDatum 使用する測地系。 primeMeridian IPrimeMeridian 基準子午線。 axis0 IAxisInfo 1 つめの軸の情報。 axis1 IAxisInfo 2 つめの軸の情報。 Properties AngularUnit 緯度経度の単位を取得します。 public IAngularUnit AngularUnit { get; } Property Value IAngularUnit この座標系で使用する IAngularUnit 。 CoordinateSystemType このインスタンスの座標系の種類を取得します。 public override CoordinateSystemType CoordinateSystemType { get; } Property Value CoordinateSystemType 座標系の種類を示す CoordinateSystemType 値。 Geographic を返します。 DefaultEnvelope 座標系の既定の範囲を取得します。 public override Envelope DefaultEnvelope { get; } Property Value Envelope この座標系で定義されている範囲をしめす Envelope 。 NumConversionToWGS84 WGS-1984 測地系へのデータ変換に必要な変換パラメータの数を取得します。 public int NumConversionToWGS84 { get; } Property Value int 現在は対応していません。 0 を返します。 PrimeMeridian 本初子午線を表す IPrimeMeridian を取得します。 public IPrimeMeridian PrimeMeridian { get; } Property Value IPrimeMeridian この座標系の本初子午線を表す IPrimeMeridian WGS84 WGS84 測地系を使用した緯度経度座標系を生成して返します。 public static GeographicCoordinateSystem WGS84 { get; } Property Value GeographicCoordinateSystem WGS84 測地系を使用した GeographicCoordinateSystem 。 Methods Clone() 現在のインスタンスの詳細コピーを生成します。 public override object Clone() Returns object 複製された GeographicCoordinateSystem 。 GetAxis(int) 指定した次元の軸に関する情報を取得します。 public override IAxisInfo GetAxis(int Dimension) Parameters Dimension int 取得する次元の 0 から始まるインデックス。 Returns IAxisInfo 指定した次元の IAxisInfo 。 GetUnits(int) 指定した次元の単位に関する情報を取得します。 public override IUnit GetUnits(int dimension) Parameters dimension int 取得する次元の 0 から始まるインデックス。 Returns IUnit 指定した次元の IUnit 。 GetWGS84ConversionInfo(int) WGS84 への変換に必要な情報を取得します。 public WGS84ConversionInfo GetWGS84ConversionInfo(int index) Parameters index int Returns WGS84ConversionInfo Remarks 現在は対応していません。 空の WGS84ConversionInfo を返します。"
  },
  "api/MapQuest.CoordinateSystems.HorizontalCoordinateSystem.html": {
    "href": "api/MapQuest.CoordinateSystems.HorizontalCoordinateSystem.html",
    "title": "Class HorizontalCoordinateSystem | mysite",
    "keywords": "Class HorizontalCoordinateSystem Namespace MapQuest.CoordinateSystems Assembly MapQuest.CoordinateSystems.dll 地球表面上の位置に相当する２次元の座標系を示すクラスです。 最もよく使われる ProjectedCoordinateSystem のベースとなるクラスです。 public abstract class HorizontalCoordinateSystem : CoordinateSystem, IHorizontalCoordinateSystem, ICoordinateSystem, IInfo, ICloneable Inheritance object Info CoordinateSystem HorizontalCoordinateSystem Implements IHorizontalCoordinateSystem ICoordinateSystem IInfo ICloneable Derived GeographicCoordinateSystem ProjectedCoordinateSystem Inherited Members CoordinateSystem.GetUnits(int) CoordinateSystem.Equals(object) CoordinateSystem.GetHashCode() CoordinateSystem.DefaultEnvelope Info.Remarks Info.AuthorityCode Info.Authority Info.Name Info.Alias Info.Abbreviation Info.WKT Info.XML object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Constructors HorizontalCoordinateSystem(HorizontalCoordinateSystem) コピーコンストラクタ。 protected HorizontalCoordinateSystem(HorizontalCoordinateSystem sourceCS) Parameters sourceCS HorizontalCoordinateSystem コピー元の座標系。 HorizontalCoordinateSystem(IHorizontalDatum, IAxisInfo[]) 測地系と軸の情報を指定して、新しいインスタンスを初期化します。 protected HorizontalCoordinateSystem(IHorizontalDatum horizontalDatum, IAxisInfo[] axisInfoArray) Parameters horizontalDatum IHorizontalDatum 使用する測地系。 axisInfoArray IAxisInfo[] 軸の情報の配列。 例えば 2 次元なら 2 つの要素を持つ必要があります。 HorizontalCoordinateSystem(IHorizontalDatum, IAxisInfo[], string, string, string, string, string, string) 必要な全てのパラメータを指定して、新しいインスタンスを初期化します。 protected HorizontalCoordinateSystem(IHorizontalDatum horizontalDatum, IAxisInfo[] axisInfoArray, string remarks, string authority, string authorityCode, string name, string alias, string abbreviation) Parameters horizontalDatum IHorizontalDatum 使用する測地系。 axisInfoArray IAxisInfo[] 軸の情報の配列。 例えば 2 次元なら 2 つの要素を持つ必要があります。 remarks string 座標系の説明。 authority string このオブジェクトを策定した機関や団体の名称。 authorityCode string authority によって策定されたこのクラスを識別する ID 。 name string 座標系の名前。 alias string 名前以外の別名。 abbreviation string 座標系の短縮名。 HorizontalCoordinateSystem(string) 座標系の名前を指定して、新しいインスタンスを初期化します。 protected HorizontalCoordinateSystem(string name) Parameters name string 座標系の名前。 HorizontalCoordinateSystem(string, IHorizontalDatum, AxisInfo, AxisInfo) 座標系の名前、使用する測地系、2 つの軸の情報を指定して、 新しいインスタンスを初期化します。 protected HorizontalCoordinateSystem(string name, IHorizontalDatum datum, AxisInfo axis0, AxisInfo axis1) Parameters name string 座標系の名前。 datum IHorizontalDatum 使用する測地系。 axis0 AxisInfo 最初の次元の軸の情報。 axis1 AxisInfo 2 番目の次元の軸の情報。 HorizontalCoordinateSystem(string, string, string, string, string, string) 座標系の情報を指定して、新しいインスタンスを初期化します。 protected HorizontalCoordinateSystem(string remarks, string authority, string authorityCode, string name, string alias, string abbreviation) Parameters remarks string 座標系の説明。 authority string このオブジェクトを策定した機関や団体の名称。 authorityCode string authority によって策定されたこのクラスを識別する ID 。 name string 座標系の名前。 alias string 名前以外の別名。 abbreviation string 座標系の短縮名。 Properties CoordinateSystemType このインスタンスの座標系の種類を取得します。 public override CoordinateSystemType CoordinateSystemType { get; } Property Value CoordinateSystemType 座標系の種類を示す CoordinateSystemType 値。 Horizontal を返します。 Dimension 座標系の次元の数を取得します。 public override int Dimension { get; } Property Value int 座標系の次元の数。2 を返します。 GeodesicHorizontalDatum 測地線計測用のIHorizontalDatum です。 public IHorizontalDatum GeodesicHorizontalDatum { get; set; } Property Value IHorizontalDatum HorizontalDatum この座標系で使用する測地系を取得します。 public IHorizontalDatum HorizontalDatum { get; } Property Value IHorizontalDatum この座標系で使用する IHorizontalDatum 。 Methods Clone() 現在のインスタンスの詳細コピーを生成します。 現在はサポートされていません。 public override object Clone() Returns object null を返します。 GetAxis(int) 指定した次元の軸に関する情報を取得します。 public override IAxisInfo GetAxis(int dimension) Parameters dimension int 取得する次元の 0 から始まるインデックス。 Returns IAxisInfo 指定した次元の IAxisInfo 。 See Also ProjectedCoordinateSystem GeographicCoordinateSystem"
  },
  "api/MapQuest.CoordinateSystems.HorizontalDatum.html": {
    "href": "api/MapQuest.CoordinateSystems.HorizontalDatum.html",
    "title": "Class HorizontalDatum | mysite",
    "keywords": "Class HorizontalDatum Namespace MapQuest.CoordinateSystems Assembly MapQuest.CoordinateSystems.dll 地球の表面上で位置を測定するために使用される測地系を示すクラスです。 ２次元の地図においては最もよく利用される測地系です。 public class HorizontalDatum : Datum, IHorizontalDatum, IDatum, IInfo, ICloneable Inheritance object Info Datum HorizontalDatum Implements IHorizontalDatum IDatum IInfo ICloneable Inherited Members Datum.DatumType Info.GetHashCode() Info.Equals(object) Info.Remarks Info.AuthorityCode Info.Authority Info.Name Info.Alias Info.Abbreviation Info.WKT Info.XML object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Constructors HorizontalDatum(HorizontalDatum) コピーコンストラクタ。 public HorizontalDatum(HorizontalDatum sourceD) Parameters sourceD HorizontalDatum コピー元の測地系。 Exceptions CoordinateSystemException sourceD が null です。 HorizontalDatum(string, DatumType, IEllipsoid, WGS84ConversionInfo) 測地系の情報を指定して、新しいインスタンスを初期化します。 public HorizontalDatum(string name, DatumType horizontalDatumType, IEllipsoid ellipsoid, WGS84ConversionInfo toWGS84) Parameters name string 測地系の名前。 horizontalDatumType DatumType 測地系の種類。 ellipsoid IEllipsoid 測地系で使用する楕円体。 toWGS84 WGS84ConversionInfo WGS84 への変換パラメータ。 Exceptions CoordinateSystemException ellipsoid が null です。 HorizontalDatum(string, DatumType, IEllipsoid, WGS84ConversionInfo, string, string, string, string, string) 必要な全てのパラメータを指定して、新しいインスタンスを初期化します。 public HorizontalDatum(string name, DatumType horizontalDatumType, IEllipsoid ellipsoid, WGS84ConversionInfo toWGS84, string remarks, string authority, string authorityCode, string alias, string abbreviation) Parameters name string 測地系の名前。 horizontalDatumType DatumType 測地系の種類。 ellipsoid IEllipsoid 測地系で使用する楕円体。 toWGS84 WGS84ConversionInfo WGS84 への変換パラメータ。 remarks string 測地系の説明。 authority string このオブジェクトを策定した機関や団体の名称。 authorityCode string authority によって策定されたこのクラスを識別する ID 。 alias string 名前以外の別名。 abbreviation string 測地系の短縮名。 Exceptions CoordinateSystemException ellipsoid が null です。 Properties Ellipsoid この測地系で使用する楕円体を取得します。 public IEllipsoid Ellipsoid { get; } Property Value IEllipsoid この測地系で使用される IEllipsoid 。 WGS84 WGS84 測地系を生成して取得します。 public static HorizontalDatum WGS84 { get; } Property Value HorizontalDatum WGS84 測地系示す HorizontalDatum 。 WGS84Parameters WGS84 測地系へのブルサ・ウルフ(Bulsa Wolf)変換パラメータを取得します。 public WGS84ConversionInfo WGS84Parameters { get; } Property Value WGS84ConversionInfo WGS84 測地系への変換パラメータを示す WGS84ConversionInfo 。 Methods Clone() 現在のインスタンスの詳細コピーを生成します。 public override object Clone() Returns object 複製された HorizontalDatum 。"
  },
  "api/MapQuest.CoordinateSystems.IAngularToLinearUnitConverter.html": {
    "href": "api/MapQuest.CoordinateSystems.IAngularToLinearUnitConverter.html",
    "title": "Interface IAngularToLinearUnitConverter | mysite",
    "keywords": "Interface IAngularToLinearUnitConverter Namespace MapQuest.CoordinateSystems Assembly MapQuest.CoordinateSystems.dll IAngularUnit から ILinearUnit への値の変換機能を提供クラスの ベースとなるインターフェースです。 public interface IAngularToLinearUnitConverter : IUnitConverter, ICloneable Inherited Members IUnitConverter.Initialize(IUnit, IUnit) IUnitConverter.Convert(double) IUnitConverter.IsLinear ICloneable.Clone() Properties Source 変換元の IAngularUnit を取得します。 IAngularUnit Source { get; } Property Value IAngularUnit 変換元の単位を示す IAngularUnit 。 読み取り専用です。 Target 変換先の ILinearUnit を取得します。 ILinearUnit Target { get; } Property Value ILinearUnit 変換先の単位を示す ILinearUnit 。 読み取り専用です。 Methods GetInverse() 現在の変換の「逆変換」を表す ILinearToAngularUnitConverter を取得します。 ILinearToAngularUnitConverter GetInverse() Returns ILinearToAngularUnitConverter 現在の変換の「逆変換」を表す ILinearToAngularUnitConverter 。 See Also AngularToLinearUnitConverter"
  },
  "api/MapQuest.CoordinateSystems.IAngularUnit.html": {
    "href": "api/MapQuest.CoordinateSystems.IAngularUnit.html",
    "title": "Interface IAngularUnit | mysite",
    "keywords": "Interface IAngularUnit Namespace MapQuest.CoordinateSystems Assembly MapQuest.CoordinateSystems.dll AngularUnit のインターフェースを定義します。 public interface IAngularUnit : IUnit, IInfo, ICloneable Inherited Members IUnit.IsLinear IInfo.Abbreviation IInfo.Alias IInfo.Authority IInfo.AuthorityCode IInfo.Name IInfo.Remarks IInfo.WKT IInfo.XML ICloneable.Clone() Properties RadiansPerUnit この単位のラジアンに対する比率を取得します。 double RadiansPerUnit { get; } Property Value double この単位のラジアンに対する比率。読み取り専用です。 Remarks 全ての AngularUnit は、ラジアンをベースに考えます。 「その単位は、ラジアンに対してどの位の比率か？」を、 コンストラクタのパラメータで設定します。 例えば、「度」は、「π÷１８０」であるので、「度」を表す AngularUnit の RadiansPerUnit には、 「π÷１８０」、つまり 0.01745... を設定します。"
  },
  "api/MapQuest.CoordinateSystems.IAngularUnitConverter.html": {
    "href": "api/MapQuest.CoordinateSystems.IAngularUnitConverter.html",
    "title": "Interface IAngularUnitConverter | mysite",
    "keywords": "Interface IAngularUnitConverter Namespace MapQuest.CoordinateSystems Assembly MapQuest.CoordinateSystems.dll IAngularUnit 間の単位変換を行うクラスの ベースとなるインターフェースです。 public interface IAngularUnitConverter : IUnitConverter, ICloneable Inherited Members IUnitConverter.Initialize(IUnit, IUnit) IUnitConverter.Convert(double) IUnitConverter.IsLinear ICloneable.Clone() Properties Source 変換元の IAngularUnit を取得します。 IAngularUnit Source { get; } Property Value IAngularUnit 変換元の単位を示す IAngularUnit 。 読み取り専用です。 Target 変換先の IAngularUnit を取得します。 IAngularUnit Target { get; } Property Value IAngularUnit 変換先の単位を示す IAngularUnit 。 読み取り専用です。 Methods GetInverse() 現在の変換の「逆変換」を表す IAngularUnitConverter を取得します。 IAngularUnitConverter GetInverse() Returns IAngularUnitConverter 現在の変換の「逆変換」を表す IAngularUnitConverter 。 See Also AngularUnitConverter"
  },
  "api/MapQuest.CoordinateSystems.IAxisInfo.html": {
    "href": "api/MapQuest.CoordinateSystems.IAxisInfo.html",
    "title": "Interface IAxisInfo | mysite",
    "keywords": "Interface IAxisInfo Namespace MapQuest.CoordinateSystems Assembly MapQuest.CoordinateSystems.dll 「軸」に関する情報を示すインターフェースです。 この情報は、軸に関する情報を表示したり、軸の方向を指し示すのに使用されます。 public interface IAxisInfo : ICloneable Inherited Members ICloneable.Clone() Properties Name 軸の名称を取得します。 string Name { get; } Property Value string 軸の名称。 Remarks 推奨される値は、「x,y,Lat,Long」などの簡単な名称です。 Orientation 軸の方向を取得します。 AxisOrientation Orientation { get; } Property Value AxisOrientation 軸の方向を示す AxisOrientation 。"
  },
  "api/MapQuest.CoordinateSystems.ICoordinateSystem.html": {
    "href": "api/MapQuest.CoordinateSystems.ICoordinateSystem.html",
    "title": "Interface ICoordinateSystem | mysite",
    "keywords": "Interface ICoordinateSystem Namespace MapQuest.CoordinateSystems Assembly MapQuest.CoordinateSystems.dll 全ての 座標系(CoordinateSystem) クラスのベースとなるインターフェースです。 public interface ICoordinateSystem : IInfo, ICloneable Inherited Members IInfo.Abbreviation IInfo.Alias IInfo.Authority IInfo.AuthorityCode IInfo.Name IInfo.Remarks IInfo.WKT IInfo.XML ICloneable.Clone() Remarks 座標系とは、数学的な空間(ここで空間の要素は位置と呼ばれる)です。 各位置は数のリストによって記述されます。リストの長さは座標系の次元に相当します。 したがって、2 次元の座標系では、各位置は 2 つの数値を含んでいるリストによって記述されます。 しかし、座標系では、数のすべてのリストは位置に相当するとは限りません。 いくつかのリストは座標系の領域の外にあるかもしれません。 例えば、2次元の緯度/経度座標系では、緯度:91度・経度:91度 という値は位置に相当しません。 いくつかの座標系は、さらに実際の世界の位置への数学的なスペースからのマッピングを持っています。 したがって、緯度/経度座標系では、数学的な位置(緯度、経度)は、地球の表面上の位置に相当します。 実際の世界の位置の中への数学的なスペースからのこのマッピングは測地系(Datum, データム)と呼ばれます。 Properties CoordinateSystemType このインスタンスの座標系の種類を取得します。 CoordinateSystemType CoordinateSystemType { get; } Property Value CoordinateSystemType 座標系の種類を示す CoordinateSystemType 値。 DefaultEnvelope 座標系の既定の範囲を取得します。 Envelope DefaultEnvelope { get; } Property Value Envelope この座標系で定義されている範囲をしめす Envelope 。 Remarks 領域に制限のある座標系は、その領域を返します。 領域に制限のない座標系は、使用が考えられる領域を返す事が望ましいです。 Dimension 座標系の次元の数を取得します。 int Dimension { get; } Property Value int 座標系の次元の数。 Remarks 座標系中の各次元は対応する軸を持っています。 Methods GetAxis(int) 座標系の、指定した次元の「軸」の情報を取得します。 IAxisInfo GetAxis(int dimension) Parameters dimension int 次元を示す 0 から始まるインデックス。 Returns IAxisInfo 指定した次元の軸情報を定義する IAxisInfo オブジェクトを返します。 Remarks 座標系中の各次元は対応する軸を持っています。 GetUnits(int) 座標系の、指定した次元の「単位」の情報を取得します。 IUnit GetUnits(int dimension) Parameters dimension int 次元を示す 0 から始まるインデックス。 Returns IUnit 座標系の軸の単位を示す IUnit 。 Remarks 座標系中の各次元は対応する「単位」を持っています。 See Also IProjectedCoordinateSystem"
  },
  "api/MapQuest.CoordinateSystems.ICoordinateSystemSimpleFactory.html": {
    "href": "api/MapQuest.CoordinateSystems.ICoordinateSystemSimpleFactory.html",
    "title": "Interface ICoordinateSystemSimpleFactory | mysite",
    "keywords": "Interface ICoordinateSystemSimpleFactory Namespace MapQuest.CoordinateSystems Assembly MapQuest.CoordinateSystems.dll 指定した ID から CoordinateSystem を生成するための、 最もシンプルなインターフェースです。 public interface ICoordinateSystemSimpleFactory Remarks ICoordinateSystemSimpleFactory は、 ICoordinateSystemFactory や ICoordinateSystemAuthorityFactory よりも更に簡単に座標系を生成できるインターフェースです。 Factory により生成されるのは、 ICoordinateSystem のみであり、 また、指定する引数も、数値か文字列による ID だけです。 その ID に対してどんな ICoordinateSystem を生成するのかは、 このインターフェースの実装クラスにより決定されます。 例えば、実装クラスの一つである CoordinateSystemMapQuestFactory では、 指定する ID は、GridID であり、平面直角座標系(1～19)、UTM座標系 などに対応します。 Methods Create(int) 数値による ID から、 ICoordinateSystem を生成します。 ICoordinateSystem Create(int id) Parameters id int 座標系の ID である数値。 Returns ICoordinateSystem 生成された ICoordinateSystem 。 Create(string) 文字列による ID から、 ICoordinateSystem を生成します。 ICoordinateSystem Create(string id) Parameters id string 座標系の ID である文字列。 Returns ICoordinateSystem 生成された ICoordinateSystem 。"
  },
  "api/MapQuest.CoordinateSystems.IDatum.html": {
    "href": "api/MapQuest.CoordinateSystems.IDatum.html",
    "title": "Interface IDatum | mysite",
    "keywords": "Interface IDatum Namespace MapQuest.CoordinateSystems Assembly MapQuest.CoordinateSystems.dll ある座標を地球上の実際の位置として定義するための「測地系」を表すクラスです。 public interface IDatum : IInfo, ICloneable Inherited Members IInfo.Abbreviation IInfo.Alias IInfo.Authority IInfo.AuthorityCode IInfo.Name IInfo.Remarks IInfo.WKT IInfo.XML ICloneable.Clone() Remarks 測地系(Datum) は、ある座標を地球上の実際の位置として定義するためのものです。 座標系の、地球に対しての位置および方向を定義するパラメーターとも言えます。 ここでは、あらかじめ定められた物理的な位置、 また、物理的な指示(回転の軸など)と、 座標系との関係について記述するパラメーター群を指します。 測地系の定義はさらに、一時的な振る舞い (軸の方向の変化率など)を含んでいる場合もあります。 Properties DatumType 測地系の種類を取得します。 DatumType. DatumType DatumType { get; } Property Value DatumType 座標系の種類を示す DatumType 値。 読み取り専用です。 See Also Datum"
  },
  "api/MapQuest.CoordinateSystems.IEllipsoid.html": {
    "href": "api/MapQuest.CoordinateSystems.IEllipsoid.html",
    "title": "Interface IEllipsoid | mysite",
    "keywords": "Interface IEllipsoid Namespace MapQuest.CoordinateSystems Assembly MapQuest.CoordinateSystems.dll 「楕円体」を表すインターフェースです。 public interface IEllipsoid : IInfo, ICloneable Inherited Members IInfo.Abbreviation IInfo.Alias IInfo.Authority IInfo.AuthorityCode IInfo.Name IInfo.Remarks IInfo.WKT IInfo.XML ICloneable.Clone() Properties AxisUnit 楕円体の長半径・短半径の単位を取得します。 ILinearUnit AxisUnit { get; } Property Value ILinearUnit 楕円体の軸の単位を示す ILinearUnit 。 InverseFlattening 楕円体のつぶれ方を示す「扁平率の逆数」を取得します。 double InverseFlattening { get; } Property Value double 楕円体の扁平率の逆数。 IsIvfDefinitive 「楕円体のつぶれ方」を示す「扁平率の逆数」が、 明示的にパラメータとして与えられているかどうかを取得します。 bool IsIvfDefinitive { get; } Property Value bool true の場合、「楕円体のつぶれ方」は、明確に与えられます。 false の場合は、長半径・短半径から計算されます。 Remarks いくつかの楕円体は定義する値として「扁平率の逆数」を使用します。 他の楕円体は、「扁平率の逆数」を計算するために極半径を使用します。 この区別は浮動小数点での丸め誤差を回避するのに重要になります。 SemiMajorAxis 楕円体の長半径を取得します。 double SemiMajorAxis { get; } Property Value double 楕円体の長半径。 単位は AxisUnit で定義されます。 SemiMinorAxis 楕円体の短半径を取得します。 double SemiMinorAxis { get; } Property Value double 楕円体の短半径。 単位は AxisUnit で定義されます。"
  },
  "api/MapQuest.CoordinateSystems.IGeographicCoordinateSystem.html": {
    "href": "api/MapQuest.CoordinateSystems.IGeographicCoordinateSystem.html",
    "title": "Interface IGeographicCoordinateSystem | mysite",
    "keywords": "Interface IGeographicCoordinateSystem Namespace MapQuest.CoordinateSystems Assembly MapQuest.CoordinateSystems.dll 緯度経度値がベースとなる座標系のインターフェースです。 public interface IGeographicCoordinateSystem : IHorizontalCoordinateSystem, ICoordinateSystem, IInfo, ICloneable Inherited Members IHorizontalCoordinateSystem.HorizontalDatum ICoordinateSystem.GetAxis(int) ICoordinateSystem.GetUnits(int) ICoordinateSystem.DefaultEnvelope ICoordinateSystem.Dimension ICoordinateSystem.CoordinateSystemType IInfo.Abbreviation IInfo.Alias IInfo.Authority IInfo.AuthorityCode IInfo.Name IInfo.Remarks IInfo.WKT IInfo.XML ICloneable.Clone() Remarks 大抵の Geographic Coordinate System の座標系は 緯度/経度です。しかし、経度/緯度 であるものもあります。 このように、すべての Geographic Coordinate System が「度」を使用するとは限らないので、角度の単位を確認してください。 Properties AngularUnit 緯度経度の単位を取得します。 IAngularUnit AngularUnit { get; } Property Value IAngularUnit この座標系で使用する IAngularUnit 。 NumConversionToWGS84 WGS-1984 測地系へのデータ変換に必要な変換パラメータの数を取得します。 int NumConversionToWGS84 { get; } Property Value int WGS-1984 測地系へのデータ変換に必要な変換パラメータの数。 PrimeMeridian 本初子午線を表す IPrimeMeridian を取得します。 IPrimeMeridian PrimeMeridian { get; } Property Value IPrimeMeridian この座標系の本初子午線を表す IPrimeMeridian Methods GetWGS84ConversionInfo(int) WGS84 への変換に必要な情報を取得します。 WGS84ConversionInfo GetWGS84ConversionInfo(int Index) Parameters Index int Zero based index of conversion to fetch. Returns WGS84ConversionInfo Remarks いくつかの地理的な座標系は WGS84 への変換を何種類か提供します。 それは、異なる分野においてよりよい精度を提供するためです。 第1の変換(インデックス=0)は、できるだけどんな分野にも対応できるようなものを提供するべきです。"
  },
  "api/MapQuest.CoordinateSystems.IHorizontalCoordinateSystem.html": {
    "href": "api/MapQuest.CoordinateSystems.IHorizontalCoordinateSystem.html",
    "title": "Interface IHorizontalCoordinateSystem | mysite",
    "keywords": "Interface IHorizontalCoordinateSystem Namespace MapQuest.CoordinateSystems Assembly MapQuest.CoordinateSystems.dll 地球表面上の位置に相当する２次元の座標系を示すインターフェースです。 public interface IHorizontalCoordinateSystem : ICoordinateSystem, IInfo, ICloneable Inherited Members ICoordinateSystem.GetAxis(int) ICoordinateSystem.GetUnits(int) ICoordinateSystem.DefaultEnvelope ICoordinateSystem.Dimension ICoordinateSystem.CoordinateSystemType IInfo.Abbreviation IInfo.Alias IInfo.Authority IInfo.AuthorityCode IInfo.Name IInfo.Remarks IInfo.WKT IInfo.XML ICloneable.Clone() Properties HorizontalDatum IHorizontalDatum を取得します。 IHorizontalDatum HorizontalDatum { get; } Property Value IHorizontalDatum A IHorizontalDatum object specifying the horizontal datum for this horizontal coordinate reference system."
  },
  "api/MapQuest.CoordinateSystems.IHorizontalDatum.html": {
    "href": "api/MapQuest.CoordinateSystems.IHorizontalDatum.html",
    "title": "Interface IHorizontalDatum | mysite",
    "keywords": "Interface IHorizontalDatum Namespace MapQuest.CoordinateSystems Assembly MapQuest.CoordinateSystems.dll 地球の表面上で位置を測定するために使用される測地系を示すインターフェースです。 ２次元の地図においては最もよく利用される測地系です。 public interface IHorizontalDatum : IDatum, IInfo, ICloneable Inherited Members IDatum.DatumType IInfo.Abbreviation IInfo.Alias IInfo.Authority IInfo.AuthorityCode IInfo.Name IInfo.Remarks IInfo.WKT IInfo.XML ICloneable.Clone() Properties Ellipsoid この測地系に関連する楕円体を取得します。 IEllipsoid Ellipsoid { get; } Property Value IEllipsoid この測地系に関連する楕円体を示す IEllipsoid 。 WGS84Parameters WGS84 測地系への変換パラメータを取得します。 WGS84ConversionInfo WGS84Parameters { get; } Property Value WGS84ConversionInfo WGS84 測地系への変換パラメータを示す WGS84ConversionInfo 構造体。"
  },
  "api/MapQuest.CoordinateSystems.IInfo.html": {
    "href": "api/MapQuest.CoordinateSystems.IInfo.html",
    "title": "Interface IInfo | mysite",
    "keywords": "Interface IInfo Namespace MapQuest.CoordinateSystems Assembly MapQuest.CoordinateSystems.dll 座標系に適用可能なメタデータのための基礎インターフェースです。 public interface IInfo : ICloneable Inherited Members ICloneable.Clone() Remarks メタデータ Abbreviation, Alias, Authority, AuthorityCode, Name , Remarks は、 「OpenGIS Simple Features interfaces specifications」で定義されています。 そのため、これらの項目は、このクラスにより保持することができます。 仕様では、これらの項目の内容は何でなければならないかは厳密に定められていません。 しかし、次のガイドラインが用意されています。 ICoordinateSystemAuthorityFactory により座標系を作成する場合、 Authority は、 ファクトリオブジェクトの生成者によって Authority 名に設定されるべきです。 また、AuthorityCode は、 ファクトリオブジェクトの使用者によって供給されます。 (Authority が EPSG ならば、ファクトリの開発者は、 「EPSG」テーブルの中から対応する情報を取り出し使用する事が考えられます。) ICoordinateSystemFactory が CoordinateSystem オブジェクトを作成する場合、 名前はクライアントによって供給された値に設定されるべきです。 他の項目はすべて空にすることが望ましいです。 Properties Abbreviation このオブジェクトの省略名を取得します。 string Abbreviation { get; } Property Value string Name の省略名。存在しない場合は空文字を返します。読み取り専用です。 Alias Name の別名を取得します。 string Alias { get; } Property Value string Name の別名。 Name に対して別の呼び方、別の名称があれば返します。 存在しない場合は空文字を返します。読み取り専用です。 Authority このオブジェクトを策定した機関や団体の名称を取得します。 string Authority { get; } Property Value string 機関や団体の名称。 Remarks Authority は、 AuthorityCode を策定した機関・組織・団体の名称です。 例えば、ヨーロッパの石油調査グループである \"European Petroleum Survey Group (EPSG)\" では、座標系やその他の空間に 関する定義情報をコード付けして策定しています。 例えば、「WGS84 緯度経度座標系」の EPSG コードは '4326' です。 この場合、Authority は \"EPSG\" 、 AuthorityCode は \"4326\" になります。 AuthorityCode Authority によって策定されたこのクラスを識別する ID を取得します。 string AuthorityCode { get; } Property Value string Authority によって策定されたこのクラスを識別する ID となる文字列。 Remarks Authority は、 AuthorityCode を策定した機関・組織・団体の名称です。 例えば、ヨーロッパの石油調査グループである \"European Petroleum Survey Group (EPSG)\" では、座標系やその他の空間に 関する定義情報をコード付けして策定しています。 例えば、「WGS84 緯度経度座標系」の EPSG コードは '4326' です。 この場合、Authority は \"EPSG\" 、 AuthorityCode は \"4326\" になります。 Name このオブジェクトの名称を取得します。 string Name { get; } Property Value string このオブジェクトの名称。 Remarks このオブジェクトの説明を取得します。 string Remarks { get; } Property Value string このオブジェクトの説明。 WKT このオブジェクトを WKT(Well-Known Text) 化した文字列を取得します。 string WKT { get; } Property Value string このオブジェクトを WKT(Well-Known Text) 化した文字列。 XML このオブジェクトを XML 化した文字列を取得します。 string XML { get; } Property Value string このオブジェクトを XML 化した文字列。 See Also European Petroleum Survey Group (EPSG) OpenGIS Coordinate Transformation Services"
  },
  "api/MapQuest.CoordinateSystems.ILinearToAngularUnitConverter.html": {
    "href": "api/MapQuest.CoordinateSystems.ILinearToAngularUnitConverter.html",
    "title": "Interface ILinearToAngularUnitConverter | mysite",
    "keywords": "Interface ILinearToAngularUnitConverter Namespace MapQuest.CoordinateSystems Assembly MapQuest.CoordinateSystems.dll ILinearUnit から IAngularUnit への値の変換機能を提供クラスの ベースとなるインターフェースです。 public interface ILinearToAngularUnitConverter : IUnitConverter, ICloneable Inherited Members IUnitConverter.Initialize(IUnit, IUnit) IUnitConverter.Convert(double) IUnitConverter.IsLinear ICloneable.Clone() Properties Source 変換元の ILinearUnit を取得します。 ILinearUnit Source { get; } Property Value ILinearUnit 変換元の単位を示す ILinearUnit 。 読み取り専用です。 Target 変換先の IAngularUnit を取得します。 IAngularUnit Target { get; } Property Value IAngularUnit 変換先の単位を示す IAngularUnit 。 読み取り専用です。 Methods GetInverse() 現在の変換の「逆変換」を表す IAngularToLinearUnitConverter を取得します。 IAngularToLinearUnitConverter GetInverse() Returns IAngularToLinearUnitConverter 現在の変換の「逆変換」を表す IAngularToLinearUnitConverter 。 See Also LinearToAngularUnitConverter"
  },
  "api/MapQuest.CoordinateSystems.ILinearUnit.html": {
    "href": "api/MapQuest.CoordinateSystems.ILinearUnit.html",
    "title": "Interface ILinearUnit | mysite",
    "keywords": "Interface ILinearUnit Namespace MapQuest.CoordinateSystems Assembly MapQuest.CoordinateSystems.dll LinearUnit のインターフェースを定義します。 public interface ILinearUnit : IUnit, IInfo, ICloneable Inherited Members IUnit.IsLinear IInfo.Abbreviation IInfo.Alias IInfo.Authority IInfo.AuthorityCode IInfo.Name IInfo.Remarks IInfo.WKT IInfo.XML ICloneable.Clone() Properties MetersPerUnit この単位のメートルに対する比率を取得します。 double MetersPerUnit { get; } Property Value double この単位のメートルに対する比率。読み取り専用です。 Remarks 全ての LinearUnit は、メートルをベースに考えます。 「その単位は、メートルに対してどの位の比率か？」を、 コンストラクタのパラメータで設定します。 例えば、「キロメートル」は、「1000 メートル」であるので、 「キロメートル」を表す LinearUnit の MetersPerUnit には、 1000 を設定します。"
  },
  "api/MapQuest.CoordinateSystems.ILinearUnitConverter.html": {
    "href": "api/MapQuest.CoordinateSystems.ILinearUnitConverter.html",
    "title": "Interface ILinearUnitConverter | mysite",
    "keywords": "Interface ILinearUnitConverter Namespace MapQuest.CoordinateSystems Assembly MapQuest.CoordinateSystems.dll ILinearUnit 間の単位変換を行うクラスの ベースとなるインターフェースです。 public interface ILinearUnitConverter : IUnitConverter, ICloneable Inherited Members IUnitConverter.Initialize(IUnit, IUnit) IUnitConverter.Convert(double) IUnitConverter.IsLinear ICloneable.Clone() Properties Source 変換元の ILinearUnit を取得します。 ILinearUnit Source { get; } Property Value ILinearUnit 変換元の単位を示す ILinearUnit 。 読み取り専用です。 Target 変換先の ILinearUnit を取得します。 ILinearUnit Target { get; } Property Value ILinearUnit 変換先の単位を示す ILinearUnit 。 読み取り専用です。 Methods GetInverse() 現在の変換の「逆変換」を表す ILinearUnitConverter を取得します。 ILinearUnitConverter GetInverse() Returns ILinearUnitConverter 現在の変換の「逆変換」を表す ILinearUnitConverter 。 See Also LinearUnitConverter"
  },
  "api/MapQuest.CoordinateSystems.IO.CoordinateSystemWktReader.html": {
    "href": "api/MapQuest.CoordinateSystems.IO.CoordinateSystemWktReader.html",
    "title": "Class CoordinateSystemWktReader | mysite",
    "keywords": "Class CoordinateSystemWktReader Namespace MapQuest.CoordinateSystems.IO Assembly MapQuest.CoordinateSystems.dll Well-known text (WKT) で記述された、 座標系、単位、投影法などの情報を読み出してインスタンス化します。 public class CoordinateSystemWktReader : MarshalByRefObject Inheritance object MarshalByRefObject CoordinateSystemWktReader Inherited Members MarshalByRefObject.MemberwiseClone(bool) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.CreateObjRef(Type) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods Create(TextReader) 指定した TextReader から、座標系に関連するオブジェクトを生成します。 public static object Create(TextReader reader) Parameters reader TextReader 座標系に関連する WKT 文字列を読み出す TextReader 。 Returns object WKT 文字列が示す座標系関連のオブジェクト。 Exceptions CoordinateSystemException wkt が空、または、正しくない文字列です。 Create(string) 指定した WKT 文字列から、座標系に関連するオブジェクトを生成します。 public static object Create(string wkt) Parameters wkt string 座標系に関連する WKT 文字列。 Returns object WKT 文字列が示す座標系関連のオブジェクト。 Exceptions CoordinateSystemException wkt が空、または、正しくない文字列です。"
  },
  "api/MapQuest.CoordinateSystems.IO.html": {
    "href": "api/MapQuest.CoordinateSystems.IO.html",
    "title": "Namespace MapQuest.CoordinateSystems.IO | mysite",
    "keywords": "Namespace MapQuest.CoordinateSystems.IO Classes CoordinateSystemWktReader Well-known text (WKT) で記述された、 座標系、単位、投影法などの情報を読み出してインスタンス化します。"
  },
  "api/MapQuest.CoordinateSystems.IPrimeMeridian.html": {
    "href": "api/MapQuest.CoordinateSystems.IPrimeMeridian.html",
    "title": "Interface IPrimeMeridian | mysite",
    "keywords": "Interface IPrimeMeridian Namespace MapQuest.CoordinateSystems Assembly MapQuest.CoordinateSystems.dll 「本初子午線」を示すインターフェースです。 殆どの場合、本初子午線はグリニッジ子午線と同一です。 public interface IPrimeMeridian : IInfo, ICloneable Inherited Members IInfo.Abbreviation IInfo.Alias IInfo.Authority IInfo.AuthorityCode IInfo.Name IInfo.Remarks IInfo.WKT IInfo.XML ICloneable.Clone() Properties AngularUnit Longitude の単位を取得します。 IAngularUnit AngularUnit { get; } Property Value IAngularUnit Longitude の単位。 Longitude この PrimeMeridian が示す子午線の経度を、 グリニッジ子午線からの相対角度で取得します。 double Longitude { get; } Property Value double Remarks 殆どの場合、本初子午線はグリニッジ子午線と同一です。 つまり、このプロパティは 0 を返します。"
  },
  "api/MapQuest.CoordinateSystems.IProjectedCoordinateSystem.html": {
    "href": "api/MapQuest.CoordinateSystems.IProjectedCoordinateSystem.html",
    "title": "Interface IProjectedCoordinateSystem | mysite",
    "keywords": "Interface IProjectedCoordinateSystem Namespace MapQuest.CoordinateSystems Assembly MapQuest.CoordinateSystems.dll ２次元の地図座標系を示すインターフェースです。 最もよく使われる座標系です。 public interface IProjectedCoordinateSystem : IHorizontalCoordinateSystem, ICoordinateSystem, IInfo, ICloneable Inherited Members IHorizontalCoordinateSystem.HorizontalDatum ICoordinateSystem.GetAxis(int) ICoordinateSystem.GetUnits(int) ICoordinateSystem.DefaultEnvelope ICoordinateSystem.Dimension ICoordinateSystem.CoordinateSystemType IInfo.Abbreviation IInfo.Alias IInfo.Authority IInfo.AuthorityCode IInfo.Name IInfo.Remarks IInfo.WKT IInfo.XML ICloneable.Clone() Properties GeographicCoordinateSystem この ProjectedCoordinateSystem で定義された IGeographicCoordinateSystem を取得します。 IGeographicCoordinateSystem GeographicCoordinateSystem { get; } Property Value IGeographicCoordinateSystem この ProjectedCoordinateSystem で定義された IGeographicCoordinateSystem 。 LinearUnit この座標系の座標値 X/Y(あるいは North/East) の単位を取得します。 ILinearUnit LinearUnit { get; } Property Value ILinearUnit この座標系の座標値 X/Y(あるいは North/East) の単位を示す ILinearUnit を取得します。 Projection この座標系の投影法の種類とそのパラメータ群を示す IProjection を取得します。 IProjection Projection { get; } Property Value IProjection この座標系の投影法の種類とそのパラメータ群を示す IProjection 。"
  },
  "api/MapQuest.CoordinateSystems.IProjection.html": {
    "href": "api/MapQuest.CoordinateSystems.IProjection.html",
    "title": "Interface IProjection | mysite",
    "keywords": "Interface IProjection Namespace MapQuest.CoordinateSystems Assembly MapQuest.CoordinateSystems.dll 投影法の情報を取得するためのインターフェースです。 public interface IProjection : IInfo, ICloneable Inherited Members IInfo.Abbreviation IInfo.Alias IInfo.Authority IInfo.AuthorityCode IInfo.Name IInfo.Remarks IInfo.WKT IInfo.XML ICloneable.Clone() Properties ClassName 投影法の名称を取得します。（例： \"Transverse_Mercator\"、\"横メルカトル図法\"） string ClassName { get; } Property Value string 投影法の名称。読み取り専用です。 NumParameters 投影法が持つパラメータの数を取得します。 int NumParameters { get; } Property Value int 投影法が持つパラメータの数。読み取り専用です。 Methods GetParameter(int) 指定したインデックスの投影法のパラメータを取得します。 ProjectionParameter GetParameter(int Index) Parameters Index int 取得するパラメータの 0 から始まるインデックス番号。 Returns ProjectionParameter 投影法のパラメータを示す ProjectionParameter 。"
  },
  "api/MapQuest.CoordinateSystems.IUnit.html": {
    "href": "api/MapQuest.CoordinateSystems.IUnit.html",
    "title": "Interface IUnit | mysite",
    "keywords": "Interface IUnit Namespace MapQuest.CoordinateSystems Assembly MapQuest.CoordinateSystems.dll 「単位」のベースとなるインターフェースです。 public interface IUnit : IInfo, ICloneable Inherited Members IInfo.Abbreviation IInfo.Alias IInfo.Authority IInfo.AuthorityCode IInfo.Name IInfo.Remarks IInfo.WKT IInfo.XML ICloneable.Clone() Properties IsLinear この単位が、ILinearUnit であるかどうかを返します。 bool IsLinear { get; } Property Value bool 単位が ILinearUnit である場合は true を返します。 単位が 角度 である場合には false を返します。"
  },
  "api/MapQuest.CoordinateSystems.IUnitConverter.html": {
    "href": "api/MapQuest.CoordinateSystems.IUnitConverter.html",
    "title": "Interface IUnitConverter | mysite",
    "keywords": "Interface IUnitConverter Namespace MapQuest.CoordinateSystems Assembly MapQuest.CoordinateSystems.dll 単位を変換するクラスのベースとなるインターフェースです。 public interface IUnitConverter : ICloneable Inherited Members ICloneable.Clone() Remarks ILinearUnit 間で値を変換する ILinearUnitConverter や、 IAngularUnit 間で値を変換する IAngularUnitConverter のベースとなるインターフェースです。 Properties IsLinear LinearUnit 間の変換かどうかを取得します。 bool IsLinear { get; } Property Value bool LinearUnit 間の変換である場合は true を返します。 それ以外の場合は false を返します。読み取り専用です。 Source 変換元の単位を取得します。 IUnit Source { get; } Property Value IUnit 変換元の単位を示す IUnit 。 読み取り専用です。 Target 変換先の単位を取得します。 IUnit Target { get; } Property Value IUnit 変換先の単位を示す IUnit 。 読み取り専用です。 Methods Convert(double) 値の単位を変換します。 double Convert(double value) Parameters value double 変換する Source の単位の値。 Returns double 変換された Target の単位の値 Remarks 引数で指定された Source の単位の値を変換して、 Target の単位の値を返します。 使い方は、LinearUnitConverter または AngularUnitConverter の解説を見てください。 GetInverse() 現在の変換の「逆変換」を表す IUnitConverter を取得します。 IUnitConverter GetInverse() Returns IUnitConverter 現在の変換の「逆変換」を表す IUnitConverter 。 Initialize(IUnit, IUnit) 現在のインスタンスの、変換元と変換先を初期化します。 void Initialize(IUnit sourceUnit, IUnit targetUnit) Parameters sourceUnit IUnit 変換元の単位。 targetUnit IUnit 変換先の単位。 See Also ILinearUnitConverter IAngularUnitConverter"
  },
  "api/MapQuest.CoordinateSystems.Info.html": {
    "href": "api/MapQuest.CoordinateSystems.Info.html",
    "title": "Class Info | mysite",
    "keywords": "Class Info Namespace MapQuest.CoordinateSystems Assembly MapQuest.CoordinateSystems.dll 座標系オブジェクトのメタデータに、基礎的な実装を供給する abstract クラスです。 public abstract class Info : IInfo, ICloneable Inheritance object Info Implements IInfo ICloneable Derived CoordinateSystem Datum Ellipsoid PrimeMeridian Projection Unit Inherited Members object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Remarks メタデータ Abbreviation, Alias, Authority, AuthorityCode, Name , Remarks は、 「OpenGIS Simple Features interfaces specifications」で定義されています。 そのため、これらの項目は、このクラスにより保持することができます。 仕様では、これらの項目の内容は何でなければならないかは厳密に定められていません。 しかし、次のガイドラインが用意されています。 ICoordinateSystemAuthorityFactory により座標系を作成する場合、 Authority は、 ファクトリオブジェクトの生成者によって Authority 名に設定されるべきです。 また、AuthorityCode は、 ファクトリオブジェクトの使用者によって供給されます。 (Authority が EPSG ならば、ファクトリの開発者は、 「EPSG」テーブルの中から対応する情報を取り出し使用する事が考えられます。) ICoordinateSystemFactory が CoordinateSystem オブジェクトを作成する場合、 名前はクライアントによって供給された値に設定されるべきです。 他の項目はすべて空にすることが望ましいです。 Constructors Info() 新しいインスタンスを初期化します。 protected Info() Info(Info) インスタンスを複製します。 protected Info(Info info) Parameters info Info 複製元の Info 。 Remarks このコンストラクタは拡張クラスが ICloneable インターフェースを実装するのを支援します。 Info(string) 名称を指定して、新しいインスタンスを初期化します。 protected Info(string name) Parameters name string このオブジェクトの名称。 Info(string, string, string, string, string, string) 必要なパラメータを指定して、インスタンスを初期化します。 protected Info(string remarks, string authority, string authorityCode, string name, string alias, string abbreviation) Parameters remarks string このオブジェクトの説明。 authority string このオブジェクトを策定した機関や団体の名称。 authorityCode string authority によって策定された、このオブジェクトの ID 。 name string このオブジェクトの名称。 alias string name の別名。 abbreviation string name の省略名。 Properties Abbreviation このオブジェクトの省略名を取得します。 public string Abbreviation { get; } Property Value string Name の省略名。存在しない場合は空文字を返します。読み取り専用です。 Alias Name の別名を取得します。 public string Alias { get; } Property Value string Name の別名。 Name に対して別の呼び方、別の名称があれば返します。 存在しない場合は空文字を返します。読み取り専用です。 Authority このオブジェクトを策定した機関や団体の名称を取得します。 public string Authority { get; } Property Value string 機関や団体の名称。 Remarks Authority は、 AuthorityCode を策定した機関・組織・団体の名称です。 例えば、ヨーロッパの石油調査グループである \"European Petroleum Survey Group (EPSG)\" では、座標系やその他の空間に 関する定義情報をコード付けして策定しています。 例えば、「WGS84 緯度経度座標系」の EPSG コードは '4326' です。 この場合、Authority は \"EPSG\" 、 AuthorityCode は \"4326\" になります。 AuthorityCode Authority によって策定されたこのクラスを識別する ID を取得します。 public string AuthorityCode { get; } Property Value string Authority によって策定されたこのクラスを識別する ID となる文字列。 Remarks Authority は、 AuthorityCode を策定した機関・組織・団体の名称です。 例えば、ヨーロッパの石油調査グループである \"European Petroleum Survey Group (EPSG)\" では、座標系やその他の空間に 関する定義情報をコード付けして策定しています。 例えば、「WGS84 緯度経度座標系」の EPSG コードは '4326' です。 この場合、Authority は \"EPSG\" 、 AuthorityCode は \"4326\" になります。 Name このオブジェクトの名称を取得します。 public string Name { get; set; } Property Value string このオブジェクトの名称。 Remarks このオブジェクトの説明を取得します。 public string Remarks { get; } Property Value string このオブジェクトの説明。 WKT このオブジェクトを WKT(Well-Known Text) 化した文字列を取得します。 public virtual string WKT { get; } Property Value string このオブジェクトを WKT(Well-Known Text) 化した文字列。 XML このオブジェクトを XML 化した文字列を取得します。 public virtual string XML { get; } Property Value string このオブジェクトを XML 化した文字列。 Methods Clone() 現在のインスタンスの詳細コピーを生成します。 public abstract object Clone() Returns object 複製した Info 。 Equals(object) 対象のインスタンスが、 指定したオブジェクトに等しいかどうかを返します。 public override bool Equals(object obj) Parameters obj object このインスタンスと比較するオブジェクト。 Returns bool o が、このインスタンスと同じ値である場合は true 。 それ以外の場合は false 。 Remarks このクラスの Equals(object) メソッドは、 Authority 、 AuthorityCode 、 Name を比較し、その全てが等しければ true を返します。 GetHashCode() この Info クラスのハッシュ コードを返します。 public override int GetHashCode() Returns int この Info クラスのハッシュ コードを指定する整数値。 See Also European Petroleum Survey Group (EPSG) OpenGIS Coordinate Transformation Services"
  },
  "api/MapQuest.CoordinateSystems.LinearToAngularUnitConverter.html": {
    "href": "api/MapQuest.CoordinateSystems.LinearToAngularUnitConverter.html",
    "title": "Class LinearToAngularUnitConverter | mysite",
    "keywords": "Class LinearToAngularUnitConverter Namespace MapQuest.CoordinateSystems Assembly MapQuest.CoordinateSystems.dll ILinearUnit から IAngularUnit への値の変換機能を提供します。 public sealed class LinearToAngularUnitConverter : ILinearToAngularUnitConverter, IUnitConverter, ICloneable Inheritance object LinearToAngularUnitConverter Implements ILinearToAngularUnitConverter IUnitConverter ICloneable Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() Constructors LinearToAngularUnitConverter(ILinearUnit, IAngularUnit) 新しいインスタンスを初期化します。 public LinearToAngularUnitConverter(ILinearUnit source, IAngularUnit target) Parameters source ILinearUnit 変換元の ILinearUnit 。 target IAngularUnit 変換先の IAngularUnit 。 Exceptions ArgumentNullException source または target が null です。 Properties IsLinear LinearUnit 間の変換かどうかを取得します。 false を返します。 public bool IsLinear { get; } Property Value bool false を返します。 Source 変換元の ILinearUnit を取得します。 public ILinearUnit Source { get; } Property Value ILinearUnit 変換元の単位を示す ILinearUnit 。 読み取り専用です。 Target 変換先の IAngularUnit を取得します。 public IAngularUnit Target { get; } Property Value IAngularUnit 変換先の単位を示す IAngularUnit 。 読み取り専用です。 Methods Clone() 現在のインスタンスの詳細コピーを生成します。 public object Clone() Returns object 複製された LinearToAngularUnitConverter 。 Convert(double) 値の単位を変換します。 public double Convert(double value) Parameters value double 変換する Source の単位の値。 Returns double 変換された Target の単位の値 Remarks 引数で指定された Source の単位の値を変換して、 Target の単位の値を返します。 GetInverse() 現在の変換の「逆変換」を表す IAngularToLinearUnitConverter を取得します。 public IAngularToLinearUnitConverter GetInverse() Returns IAngularToLinearUnitConverter 現在の変換の「逆変換」を表す IAngularToLinearUnitConverter 。 Initialize(ILinearUnit, IAngularUnit) 現在のインスタンスの、変換元と変換先を初期化します。 public void Initialize(ILinearUnit sourceUnit, IAngularUnit targetUnit) Parameters sourceUnit ILinearUnit 変換元の ILinearUnit 。 targetUnit IAngularUnit 変換先の IAngularUnit 。"
  },
  "api/MapQuest.CoordinateSystems.LinearUnit.html": {
    "href": "api/MapQuest.CoordinateSystems.LinearUnit.html",
    "title": "Class LinearUnit | mysite",
    "keywords": "Class LinearUnit Namespace MapQuest.CoordinateSystems Assembly MapQuest.CoordinateSystems.dll 線形の単位を表すクラスです。 例えば、メートル、キロメートルなどです。 public class LinearUnit : Unit, ILinearUnit, IUnit, IInfo, ICloneable Inheritance object Info Unit LinearUnit Implements ILinearUnit IUnit IInfo ICloneable Inherited Members Unit.Millimetre Unit.Centimetre Unit.Metre Unit.Kilometre Unit.Inch Unit.Point Unit.Radian Unit.Degree Unit.Minute Unit.Second Unit.Millisecond Unit.Gon Unit.Grad Unit.Pixel Info.GetHashCode() Info.Equals(object) Info.Remarks Info.AuthorityCode Info.Authority Info.Name Info.Alias Info.Abbreviation Info.WKT Info.XML object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Constructors LinearUnit(LinearUnit) 現在のインスタンスの詳細コピーを生成します。 public LinearUnit(LinearUnit linearUnit) Parameters linearUnit LinearUnit 複製元の LinearUnit 。 Exceptions ArgumentNullException linearUnit が null です。 LinearUnit(double) MetersPerUnit を指定して、新しいインスタンスを初期化します。 public LinearUnit(double metersPerUnit) Parameters metersPerUnit double メートルとの比率。 Remarks metersPerUnit には 0 を指定する事はできません。 Exceptions CoordinateSystemException metersPerUnit に 0 を指定しました。 LinearUnit(double, string) MetersPerUnit と単位の名称を指定して、 新しいインスタンスを初期化します。 public LinearUnit(double metersPerUnit, string name) Parameters metersPerUnit double メートルとの比率。 name string 単位の名称。 Remarks metersPerUnit には 0 を指定する事はできません。 Exceptions CoordinateSystemException metersPerUnit に 0 を指定しました。 LinearUnit(double, string, string, string, string, string, string) 必要なパラメータを指定して、新しいインスタンスを初期化します。 public LinearUnit(double metersPerUnit, string remarks, string authority, string authorityCode, string name, string alias, string abbreviation) Parameters metersPerUnit double MetersPerUnit の値。 remarks string 単位の説明。 authority string 単位の策定元団体・機関名。 authorityCode string authority が策定したこの単位の ID 。 name string 単位の名称。 alias string 単位の別名。 abbreviation string 単位の省略名。 Remarks metersPerUnit には 0 を指定する事はできません。 Exceptions CoordinateSystemException metersPerUnit に 0 を指定しました。 Properties IsLinear この単位が、LinearUnit であるかどうかを返します。 true を返します。 public override bool IsLinear { get; } Property Value bool true を返します。 MetersPerUnit この単位のメートルに対する比率を取得します。 public double MetersPerUnit { get; } Property Value double この単位のメートルに対する比率。読み取り専用です。 Remarks 全ての LinearUnit は、メートルをベースに考えます。 「その単位は、メートルに対してどの位の比率か？」を、 コンストラクタのパラメータで設定します。 例えば、「キロメートル」は、「1000 メートル」であるので、 「キロメートル」を表す LinearUnit の MetersPerUnit には、 1000 を設定します。 Methods Clone() 現在のインスタンスの詳細コピーを生成します。 public override object Clone() Returns object 複製した LinearUnit 。"
  },
  "api/MapQuest.CoordinateSystems.LinearUnitConverter.html": {
    "href": "api/MapQuest.CoordinateSystems.LinearUnitConverter.html",
    "title": "Class LinearUnitConverter | mysite",
    "keywords": "Class LinearUnitConverter Namespace MapQuest.CoordinateSystems Assembly MapQuest.CoordinateSystems.dll ILinearUnit 間の値の変換を提供します。 public class LinearUnitConverter : ILinearUnitConverter, IUnitConverter, ICloneable Inheritance object LinearUnitConverter Implements ILinearUnitConverter IUnitConverter ICloneable Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Examples 下記は、値を「センチメートル」から「ミリメートル」に変換するための LinearUnitConverter の使用方法を示します。 using System; using MapQuest.CoordinateSystems; namespace UnitConversion { class TestMain { [STAThread] static void Main(string[] args) { LinearUnitConverter converter = new LinearUnitConverter(Unit.Centimetre, Unit.Millimetre); double distance = 10; // cm double result = converter.Convert(distance); Console.WriteLine(result.ToString()); ILinearUnitConverter inverse = converter.GetInverse(); distance = inverse.Convert(result); Console.WriteLine(distance.ToString()); } } } Constructors LinearUnitConverter(ILinearUnit, ILinearUnit) 新しいインスタンスを初期化します。 public LinearUnitConverter(ILinearUnit source, ILinearUnit target) Parameters source ILinearUnit 変換元の ILinearUnit 。 target ILinearUnit 変換先の ILinearUnit 。 Exceptions ArgumentNullException source または target が null です。 Properties IsLinear LinearUnit 間の変換かどうかを取得します。 true を返します。 public bool IsLinear { get; } Property Value bool true を返します。 Source 変換元の ILinearUnit を取得します。 public ILinearUnit Source { get; } Property Value ILinearUnit 変換元の単位を示す ILinearUnit 。 読み取り専用です。 Target 変換先の ILinearUnit を取得します。 public ILinearUnit Target { get; } Property Value ILinearUnit 変換先の単位を示す ILinearUnit 。 読み取り専用です。 Methods Clone() 現在のインスタンスの詳細コピーを生成します。 public object Clone() Returns object 複製された LinearUnitConverter 。 Convert(double) 値の単位を変換します。 public double Convert(double value) Parameters value double 変換する Source の単位の値。 Returns double 変換された Target の単位の値 Remarks 引数で指定された Source の単位の値を変換して、 Target の単位の値を返します。 使い方は、LinearUnitConverter の解説を見てください。 GetInverse() 現在の変換の「逆変換」を表す ILinearUnitConverter を取得します。 public ILinearUnitConverter GetInverse() Returns ILinearUnitConverter 現在の変換の「逆変換」を表す ILinearUnitConverter 。 Initialize(ILinearUnit, ILinearUnit) 現在のインスタンスの、変換元と変換先を初期化します。 public void Initialize(ILinearUnit sourceUnit, ILinearUnit targetUnit) Parameters sourceUnit ILinearUnit 変換元の ILinearUnit 。 targetUnit ILinearUnit 変換先の ILinearUnit 。 See Also ILinearUnitConverter"
  },
  "api/MapQuest.CoordinateSystems.ParameterList.html": {
    "href": "api/MapQuest.CoordinateSystems.ParameterList.html",
    "title": "Class ParameterList | mysite",
    "keywords": "Class ParameterList Namespace MapQuest.CoordinateSystems Assembly MapQuest.CoordinateSystems.dll IDictionary を実装したリンクリストです。 10 未満の項目でパフォーマンスが最適化されます。 public class ParameterList : ListDictionary, IDictionary, ICollection, IEnumerable Inheritance object ListDictionary ParameterList Implements IDictionary ICollection IEnumerable Inherited Members ListDictionary.Add(object, object) ListDictionary.Clear() ListDictionary.Contains(object) ListDictionary.CopyTo(Array, int) ListDictionary.GetEnumerator() ListDictionary.Remove(object) ListDictionary.this[object] ListDictionary.Count ListDictionary.Keys ListDictionary.IsReadOnly ListDictionary.IsFixedSize ListDictionary.IsSynchronized ListDictionary.SyncRoot ListDictionary.Values object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Examples このクラスの使用方法を示します。 using System; using System.Collections; using MapQuest.CoordinateSystems; public class SamplesParameterList { public static void Main() { // Creates and initializes a new ParameterList. ParameterList listParameters = new ParameterList(); listParameters.Add(\"Braeburn Apples\", \"1.49\" ); listParameters.Add(\"Fuji Apples\", \"1.29\" ); listParameters.Add(\"Gala Apples\", \"1.49\" ); listParameters.Add(\"Golden Delicious Apples\", \"1.29\"); listParameters.Add(\"Granny Smith Apples\", \"0.89\"); listParameters.Add(\"Red Delicious Apples\", \"0.99\"); // Displays the values in the ParameterList. Console.WriteLine(\"Displays the elements using the IEnumerator:\"); PrintKeysAndValues(listParameters); // Copies the ParameterList to an array with DictionaryEntry elements. DictionaryEntry[] myArr = new DictionaryEntry[listParameters.Count]; listParameters.CopyTo( myArr, 0 ); // Displays the values in the array. Console.WriteLine( \"Displays the elements in the array:\" ); Console.WriteLine( \" KEY VALUE\" ); for ( int i = 0; i < myArr.Length; i++ ) Console.WriteLine(\" {0,-25} {1}\", myArr[i].Key, myArr[i].Value ); Console.WriteLine(); // Searches for a key. if (listParameters.Contains(\"Kiwis\")) Console.WriteLine(\"The collection contains the key \\\"Kiwis\\\".\"); else Console.WriteLine(\"The collection does not contain the key \\\"Kiwis\\\".\"); Console.WriteLine(); // Deletes a key. listParameters.Remove(\"Plums\"); Console.WriteLine(\"The collection contains the following elements after removing \\\"Plums\\\":\" ); PrintKeysAndValues(listParameters); // Clears the entire collection. listParameters.Clear(); Console.WriteLine(\"The collection contains the following elements after it is cleared:\" ); PrintKeysAndValues(listParameters); } public static void PrintKeysAndValues(IEnumerable listParameters) { IEnumerator myEnumerator = listParameters.GetEnumerator(); Console.WriteLine(\" KEY VALUE\"); foreach (DictionaryEntry de in listParameters) Console.WriteLine(\" {0,-25} {1}\", de.Key, de.Value); Console.WriteLine(); } } Remarks 座標系に必要なパラメータは、通常、10 未満です。 そのような状況下で最も速いパフォーマンスが得られるよう、 このクラスは ListDictionary から派生して作成されています。 Constructors ParameterList() 空の ParameterList を生成・初期化します。 public ParameterList() ParameterList(IComparer) 指定した Comparer を持つ、空の ParameterList を生成・初期化します。 public ParameterList(IComparer comparer) Parameters comparer IComparer 要素の並び替えに使われる IComparer 。 または null を指定すると既定の Comparer が使用されます。 Methods GetDouble(string) 指定したキーの要素の値を double 型で取得します。 public double GetDouble(string key) Parameters key string 取得する要素のキー。 Returns double 指定したキーの要素を double にキャストした値。 Exceptions InvalidCastException 値を double 型に変換できませんでした。 ArgumentNullException key が null です。 GetDouble(string, double) 指定したキーの要素の値を double 型で取得します。 public double GetDouble(string key, double defaultValue) Parameters key string 取得する要素のキー。 defaultValue double キーが存在しなかった時に返される値。 Returns double 指定したキーの要素を double にキャストした値。 Exceptions InvalidCastException 値を double 型に変換できませんでした。 ArgumentNullException key が null です。 GetString(string) 指定したキーの要素の値を string 型で取得します。 public string GetString(string key) Parameters key string 取得する要素のキー。 Returns string 指定したキーの要素を string にキャストした値。 Exceptions InvalidCastException 値を string 型に変換できませんでした。 ArgumentNullException key が null です。 GetString(string, string) 指定したキーの要素の値を string 型で取得します。 public string GetString(string key, string defaultValue) Parameters key string 取得する要素のキー。 defaultValue string キーが存在しなかった時に返される値。 Returns string 指定したキーの要素を string にキャストした値。 Exceptions InvalidCastException 値を string 型に変換できませんでした。 ArgumentNullException key が null です。"
  },
  "api/MapQuest.CoordinateSystems.PrimeMeridian.html": {
    "href": "api/MapQuest.CoordinateSystems.PrimeMeridian.html",
    "title": "Class PrimeMeridian | mysite",
    "keywords": "Class PrimeMeridian Namespace MapQuest.CoordinateSystems Assembly MapQuest.CoordinateSystems.dll 「本初子午線」を示すクラスです。 殆どの場合、本初子午線はグリニッジ子午線と同一です。 public class PrimeMeridian : Info, IPrimeMeridian, IInfo, ICloneable Inheritance object Info PrimeMeridian Implements IPrimeMeridian IInfo ICloneable Inherited Members Info.GetHashCode() Info.Equals(object) Info.Remarks Info.AuthorityCode Info.Authority Info.Name Info.Alias Info.Abbreviation Info.WKT Info.XML object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Constructors PrimeMeridian(PrimeMeridian) コピーコンストラクタ。 public PrimeMeridian(PrimeMeridian sourcePM) Parameters sourcePM PrimeMeridian 複製元の PrimeMeridian 。 PrimeMeridian(string, IAngularUnit, double) 子午線の、名前、単位、経度を指定して、 新しいインスタンスを初期化します。 public PrimeMeridian(string name, IAngularUnit angularUnit, double longitude) Parameters name string この子午線の名前。 angularUnit IAngularUnit 子午線の経度の単位。 longitude double 子午線の経度。 PrimeMeridian(string, IAngularUnit, double, string, string, string, string, string) 必要な情報を指定して、新しいインスタンスを初期化します。 public PrimeMeridian(string name, IAngularUnit angularUnit, double longitude, string remarks, string authority, string authorityCode, string alias, string abbreviation) Parameters name string この子午線の名前。 angularUnit IAngularUnit 子午線の経度の単位。 longitude double 子午線の経度。 remarks string 子午線の説明。 authority string このオブジェクトを策定した機関や団体の名称。 authorityCode string authority によって策定されたこのクラスを識別する ID 。 alias string 名前以外の別名。 abbreviation string 子午線の短縮名。 Exceptions CoordinateSystemException angularUnit が null です。 Properties AngularUnit Longitude の単位を取得します。 public IAngularUnit AngularUnit { get; } Property Value IAngularUnit Longitude の単位。 Greenwich グリニッジ子午線を生成して取得します。 public static PrimeMeridian Greenwich { get; } Property Value PrimeMeridian グリニッジ標準子午線を示す PrimeMeridian 。 Longitude この PrimeMeridian が示す子午線の経度を、 グリニッジ子午線からの相対角度で取得します。 public double Longitude { get; } Property Value double Remarks 殆どの場合、本初子午線はグリニッジ子午線と同一です。 つまり、このプロパティは 0 を返します。 Methods Clone() 現在のインスタンスの詳細コピーを生成します。 public override object Clone() Returns object 複製された PrimeMeridian 。"
  },
  "api/MapQuest.CoordinateSystems.ProjectedCoordinateSystem.html": {
    "href": "api/MapQuest.CoordinateSystems.ProjectedCoordinateSystem.html",
    "title": "Class ProjectedCoordinateSystem | mysite",
    "keywords": "Class ProjectedCoordinateSystem Namespace MapQuest.CoordinateSystems Assembly MapQuest.CoordinateSystems.dll ２次元の地図座標系を示すクラスです。 最もよく使われる座標系です。 public class ProjectedCoordinateSystem : HorizontalCoordinateSystem, IProjectedCoordinateSystem, IHorizontalCoordinateSystem, ICoordinateSystem, IInfo, ICloneable Inheritance object Info CoordinateSystem HorizontalCoordinateSystem ProjectedCoordinateSystem Implements IProjectedCoordinateSystem IHorizontalCoordinateSystem ICoordinateSystem IInfo ICloneable Inherited Members HorizontalCoordinateSystem.GetAxis(int) HorizontalCoordinateSystem.Dimension HorizontalCoordinateSystem.HorizontalDatum HorizontalCoordinateSystem.GeodesicHorizontalDatum CoordinateSystem.Equals(object) CoordinateSystem.GetHashCode() CoordinateSystem.DefaultEnvelope Info.Remarks Info.AuthorityCode Info.Authority Info.Name Info.Alias Info.Abbreviation Info.WKT Info.XML object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Remarks ProjectedCoordinateSystem は、地球の楕円体を平面に投影した XY 座標で表される座標系です。 投影法の種類には、「横メルカトル」、「メルカトル」、「ランベルト」などがあります。 Constructors ProjectedCoordinateSystem(IHorizontalDatum, IAxisInfo[], IGeographicCoordinateSystem, ILinearUnit, IProjection) 測地系などの情報を指定して、新しいインスタンスを初期化します。 、 public ProjectedCoordinateSystem(IHorizontalDatum horizontalDatum, IAxisInfo[] axisInfoArray, IGeographicCoordinateSystem geographicCoordSystem, ILinearUnit linearUnit, IProjection projection) Parameters horizontalDatum IHorizontalDatum 使用する測地系。 axisInfoArray IAxisInfo[] 軸の情報。2 つの要素を持つ必要があります。 geographicCoordSystem IGeographicCoordinateSystem 使用する緯度経度座標系。 linearUnit ILinearUnit XY 座標の単位。 projection IProjection 使用する投影法。 ProjectedCoordinateSystem(IHorizontalDatum, IAxisInfo[], IGeographicCoordinateSystem, ILinearUnit, IProjection, string, string, string, string, string, string) 必要な全てのパラメータを指定して、新しいインスタンスを初期化します。 public ProjectedCoordinateSystem(IHorizontalDatum horizontalDatum, IAxisInfo[] axisInfoArray, IGeographicCoordinateSystem geographicCoordSystem, ILinearUnit linearUnit, IProjection projection, string remarks, string authority, string authorityCode, string name, string alias, string abbreviation) Parameters horizontalDatum IHorizontalDatum 使用する測地系。 axisInfoArray IAxisInfo[] 軸の情報。2 つの要素を持つ必要があります。 geographicCoordSystem IGeographicCoordinateSystem 使用する緯度経度座標系。 linearUnit ILinearUnit XY 座標の単位。 projection IProjection 使用する投影法。 remarks string 座標系の説明。 authority string このオブジェクトを策定した機関や団体の名称。 authorityCode string authority によって策定されたこのクラスを識別する ID 。 name string 座標系の名前。 alias string 名前以外の別名。 abbreviation string 座標系の短縮名。 ProjectedCoordinateSystem(ProjectedCoordinateSystem) コピーコンストラクタ。簡易コピーを提供します。 public ProjectedCoordinateSystem(ProjectedCoordinateSystem sourceCS) Parameters sourceCS ProjectedCoordinateSystem コピー元の ProjectedCoordinateSystem 。 Remarks 詳細コピーを行うには Clone() を使用してください。 Properties CoordinateSystemType このインスタンスの座標系の種類を取得します。 public override CoordinateSystemType CoordinateSystemType { get; } Property Value CoordinateSystemType 座標系の種類を示す CoordinateSystemType 値。 Projected を返します。 GeographicCoordinateSystem この ProjectedCoordinateSystem で定義された IGeographicCoordinateSystem を取得します。 public IGeographicCoordinateSystem GeographicCoordinateSystem { get; } Property Value IGeographicCoordinateSystem この ProjectedCoordinateSystem で定義された IGeographicCoordinateSystem 。 LinearUnit この座標系の座標値 X/Y(あるいは North/East) の単位を取得します。 public ILinearUnit LinearUnit { get; } Property Value ILinearUnit この座標系の座標値 X/Y(あるいは North/East) の単位を示す ILinearUnit を取得します。 Projection この座標系の投影法の種類とそのパラメータ群を示す IProjection を取得します。 public IProjection Projection { get; } Property Value IProjection この座標系の投影法の種類とそのパラメータ群を示す IProjection 。 Methods Clone() 現在のインスタンスの詳細コピーを生成します。 public override object Clone() Returns object 複製された ProjectedCoordinateSystem 。 GetUnits(int) 座標系の、指定した次元の「単位」の情報を取得します。 public override IUnit GetUnits(int dimension) Parameters dimension int 次元を示す 0 から始まるインデックス。 Returns IUnit 座標系の軸の単位を示す IUnit 。 Remarks 座標系中の各次元は対応する「単位」を持っています。 See Also IProjectedCoordinateSystem"
  },
  "api/MapQuest.CoordinateSystems.Projection.html": {
    "href": "api/MapQuest.CoordinateSystems.Projection.html",
    "title": "Class Projection | mysite",
    "keywords": "Class Projection Namespace MapQuest.CoordinateSystems Assembly MapQuest.CoordinateSystems.dll 緯度経度座標から XY 座標への投影を示すクラスです。 public class Projection : Info, IProjection, IInfo, ICloneable Inheritance object Info Projection Implements IProjection IInfo ICloneable Inherited Members Info.GetHashCode() Info.Equals(object) Info.Remarks Info.AuthorityCode Info.Authority Info.Name Info.Alias Info.Abbreviation Info.WKT Info.XML object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Constructors Projection(Projection) コピーコンストラクタ。簡易コピーを提供します。 public Projection(Projection projection) Parameters projection Projection コピー元の Projection 。 Projection(string, ProjectionParameter[], string, string, string, string) 必要なパラメータを指定して、新しいインスタンスを初期化します。 public Projection(string name, ProjectionParameter[] projectionParameters, string classification, string remarks, string authority, string authorityCode) Parameters name string 投影の名前。 projectionParameters ProjectionParameter[] 投影法のパラメータリスト。 classification string WKT で定義されている投影法の名前。 例えば横メルカトル図法は「Transverse_Mercator」です。 remarks string 投影法の説明。 authority string 投影法の策定元団体・機関の名称。 authorityCode string authority が策定した投影法の ID 。 Projection(string, string, ProjectionParameter[]) 投影の名前と WKT で定義されている投影法の名前を指定して、 新しいインスタンスを初期化します。 public Projection(string name, string wktProjectionClass, ProjectionParameter[] parameters) Parameters name string 投影の名前。 wktProjectionClass string WKT で定義されている投影法の名前。 例えば横メルカトル図法は「Transverse_Mercator」です。 parameters ProjectionParameter[] 投影法のパラメータリスト。 Properties ClassName 投影法の名称を取得します。（例： \"Transverse_Mercator\"、\"横メルカトル図法\"） public string ClassName { get; } Property Value string 投影法の名称。読み取り専用です。 NumParameters 投影法が持つパラメータの数を取得します。 public int NumParameters { get; } Property Value int 投影法が持つパラメータの数。読み取り専用です。 Methods Clone() 現在のインスタンスの詳細コピーを生成します。 public override object Clone() Returns object 複製された Projection 。 GetParameter(int) 指定したインデックスの投影法のパラメータを取得します。 public ProjectionParameter GetParameter(int index) Parameters index int 取得するパラメータの 0 から始まるインデックス番号。 Returns ProjectionParameter 投影法のパラメータを示す ProjectionParameter 。"
  },
  "api/MapQuest.CoordinateSystems.ProjectionParameter.html": {
    "href": "api/MapQuest.CoordinateSystems.ProjectionParameter.html",
    "title": "Struct ProjectionParameter | mysite",
    "keywords": "Struct ProjectionParameter Namespace MapQuest.CoordinateSystems Assembly MapQuest.CoordinateSystems.dll 投影法のパラメータを示す名前と値のセットです。 public struct ProjectionParameter : IComparable Implements IComparable Inherited Members object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Constructors ProjectionParameter(string, double) 名前と値を指定して、新しいインスタンスを初期化します。 public ProjectionParameter(string name, double value) Parameters name string パラメータの名前。 value double パラメータの値。 Fields Empty 空の ProjectionParameter を取得します。 public static readonly ProjectionParameter Empty Field Value ProjectionParameter Properties Name パラメータの名前を設定・取得します。 public string Name { get; set; } Property Value string パラメータの名前。 Value パラメータの値を設定・取得します。 public double Value { get; set; } Property Value double パラメータの値 Methods CompareTo(object) 現在のオブジェクトと、渡されたオブジェクトの大小関係を比較します。 public int CompareTo(object obj) Parameters obj object 比較するオブジェクト。 ProjectionParameter である必要があります。 Returns int 値 内容 0 より小さい値 現在のオブジェクトは obj より小さいです。 0 現在のオブジェクトは obj と等しいです。 0 より大きい値 現在のオブジェクトは obj より大きいです。 Remarks パラメータの値(Value)だけが比較対象です。 名称は使われません。 Exceptions ArgumentException obj が ProjectionParameter ではありません。 Equals(ProjectionParameter) 指定した ProjectionParameter が、このインスタンスと同じかどうかを返します。 public bool Equals(ProjectionParameter obj) Parameters obj ProjectionParameter 比較する ProjectionParameter 。 Returns bool 同じであれば true 、異なっていたら false 。 Equals(object) 指定した ProjectionParameter が、このインスタンスと同じかどうかを返します。 public override bool Equals(object obj) Parameters obj object 比較する ProjectionParameter 。 Returns bool 同じであれば true 、異なっていたら false 。 GetHashCode() この ProjectionParameter のハッシュ コードを返します。 public override int GetHashCode() Returns int この ProjectionParameter のハッシュ コード。 ToString() この ProjectionParameter を Well-Known Text (WKT) 形式で表します。 public override string ToString() Returns string Remarks WKT は OpenGIS' により策定されている、下記のような形式です。 PARAMETER[\"Name\",Value] . Operators operator ==(ProjectionParameter, ProjectionParameter) 二つの ProjectionParameter が等しいかどうかを調べます。 public static bool operator ==(ProjectionParameter left, ProjectionParameter right) Parameters left ProjectionParameter 1 つ目の ProjectionParameter 。 right ProjectionParameter 2 つ目の ProjectionParameter 。 Returns bool 二つの ProjectionParameter が等しければ true 、 等しくなければ false を返します。 Remarks left.Equals(right) を実行した結果を返します。 operator !=(ProjectionParameter, ProjectionParameter) 二つの ProjectionParameter が等しくないかどうかを調べます。 public static bool operator !=(ProjectionParameter left, ProjectionParameter right) Parameters left ProjectionParameter 1 つ目の ProjectionParameter 。 right ProjectionParameter 2 つ目の ProjectionParameter 。 Returns bool 二つの ProjectionParameter が等しくなければ true 、 等しければ false を返します。 Remarks !left.Equals(right) を実行した結果を返します。"
  },
  "api/MapQuest.CoordinateSystems.Unit.html": {
    "href": "api/MapQuest.CoordinateSystems.Unit.html",
    "title": "Class Unit | mysite",
    "keywords": "Class Unit Namespace MapQuest.CoordinateSystems Assembly MapQuest.CoordinateSystems.dll 単位を示すクラスの、共通な実装を提供する abstract クラスです。 public abstract class Unit : Info, IUnit, IInfo, ICloneable Inheritance object Info Unit Implements IUnit IInfo ICloneable Derived AngularUnit LinearUnit Inherited Members Info.GetHashCode() Info.Equals(object) Info.Clone() Info.Remarks Info.AuthorityCode Info.Authority Info.Name Info.Alias Info.Abbreviation Info.WKT Info.XML object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Remarks このクラスの現在の拡張クラスは、下記の通りです。 AngularUnit クラスは、「角度」の単位を示すクラスです。 LinearUnit クラスは、「直線上の距離」の単位を示すクラスです。 またこのクラスは、「ｍ」、「ｃｍ」、「度」といった、一般的によく使われる 単位を示すクラスを取得する Static プロパティも提供します。 Constructors Unit() 新しいインスタンスを初期化します。 protected Unit() Unit(Unit) インスタンスを複製します。 protected Unit(Unit unit) Parameters unit Unit 複製元の Unit 。 Remarks このコンストラクタは拡張クラスが ICloneable インターフェースを実装するのを支援します。 Unit(string) 単位の名前を指定して、新しいインスタンスを初期化します。 protected Unit(string name) Parameters name string 単位の名前。 Unit(string, string, string, string, string, string) 必要なパラメータを指定して、新しいインスタンスを初期化します。 protected Unit(string remarks, string authority, string authorityCode, string name, string alias, string abbreviation) Parameters remarks string 単位の説明。 authority string 単位の策定元機関・団体など。 authorityCode string 団体により決められた、単位のユニークな ID 。 name string 単位の名前。 alias string 単位の別名。 abbreviation string 単位の省略名。 Properties Centimetre 「センチメートル」を示す LinearUnit を取得します。 public static LinearUnit Centimetre { get; } Property Value LinearUnit 「センチメートル」を示す LinearUnit 。 Remarks この単位のメタ情報は以下のように設定されます。 Name - centimetre Alias - centimeter Abbreviation - cm Degree 「度」を示す AngularUnit を取得します。 public static AngularUnit Degree { get; } Property Value AngularUnit 「度」を示す AngularUnit 。 Remarks この単位のメタ情報は以下のように設定されます。 Authority - EPSG AuthorityCode - 9102 Name - degree Alias - deg Abbreviation - deg Gon 「ゴン(Gon)」を示す AngularUnit を取得します。 public static AngularUnit Gon { get; } Property Value AngularUnit 「ゴン(Gon)」を示す AngularUnit 。 Remarks この単位のメタ情報は以下のように設定されます。 Name - gon Alias - gon Abbreviation - gon Grad 「グラッド(Grad)」を示す AngularUnit を取得します。 public static AngularUnit Grad { get; } Property Value AngularUnit 「グラッド(Grad)」を示す AngularUnit 。 Remarks この単位のメタ情報は以下のように設定されます。 Authority - EPSG AuthorityCode - 9105 Name - grad Alias - gr Abbreviation - gr Inch 「インチ」を示す LinearUnit を取得します。 public static LinearUnit Inch { get; } Property Value LinearUnit 「インチ」を示す LinearUnit 。 Remarks この単位のメタ情報は以下のように設定されます。 MetersPerUnit - 0.0254 Name - inch Alias - inch Abbreviation - inch IsLinear この単位が、LinearUnit であるかどうかを返します。 public abstract bool IsLinear { get; } Property Value bool 単位が LinearUnit である場合は true を返します。 単位が 角度 である場合には false を返します。 Kilometre 「キロメートル」を示す LinearUnit を取得します。 public static LinearUnit Kilometre { get; } Property Value LinearUnit 「キロメートル」を示す LinearUnit 。 Remarks この単位のメタ情報は以下のように設定されます。 Authority - EPSG AuthorityCode - 9036 Name - kilometre Alias - kilometer Abbreviation - km Metre 「メートル」を示す LinearUnit を取得します。 public static LinearUnit Metre { get; } Property Value LinearUnit 「メートル」を示す LinearUnit 。 Remarks この単位のメタ情報は以下のように設定されます。 Authority - EPSG AuthorityCode - 9001 Name - metre Alias - International metre Abbreviation - m Millimetre 「ミリメートル」を示す LinearUnit を取得します。 public static LinearUnit Millimetre { get; } Property Value LinearUnit 「ミリメートル」を示す LinearUnit 。 Remarks この単位のメタ情報は以下のように設定されます。 Name - millimetre Alias - millimeter Abbreviation - mm Millisecond 「ミリ秒」を示す AngularUnit を取得します。 public static AngularUnit Millisecond { get; } Property Value AngularUnit 「ミリ秒」を示す AngularUnit 。 Remarks この単位のメタ情報は以下のように設定されます。 Name - millisecond Alias - ms Abbreviation - ms Minute 「分」を示す AngularUnit を取得します。 public static AngularUnit Minute { get; } Property Value AngularUnit 「分」を示す AngularUnit 。 Remarks この単位のメタ情報は以下のように設定されます。 Name - minute Alias - min Abbreviation - min Pixel DPI値を96とした「ピクセル」を示す LinearUnit を取得します。 public static LinearUnit Pixel { get; } Property Value LinearUnit 「ピクセル」を示す LinearUnit 。 Remarks この単位のメタ情報は以下のように設定されます。 MetersPerUnit - 0.0002645 Name - pixel Alias - pixel Abbreviation - px Point 「ポイント」を示す LinearUnit を取得します。 public static LinearUnit Point { get; } Property Value LinearUnit 「ポイント」を示す LinearUnit 。 Remarks この単位のメタ情報は以下のように設定されます。 MetersPerUnit - 0.000352777... Name - point Alias - point Abbreviation - pt Radian 「ラジアン」を示す AngularUnit を取得します。 public static AngularUnit Radian { get; } Property Value AngularUnit 「ラジアン」を示す AngularUnit 。 Remarks この単位のメタ情報は以下のように設定されます。 Authority - EPSG AuthorityCode - 9101 Name - radian Alias - rad Abbreviation - rad Second 「秒」を示す AngularUnit を取得します。 public static AngularUnit Second { get; } Property Value AngularUnit 「秒」を示す AngularUnit 。 Remarks この単位のメタ情報は以下のように設定されます。 Name - second Alias - s Abbreviation - s See Also AngularUnit LinearUnit"
  },
  "api/MapQuest.CoordinateSystems.UnitConverterFactory.html": {
    "href": "api/MapQuest.CoordinateSystems.UnitConverterFactory.html",
    "title": "Class UnitConverterFactory | mysite",
    "keywords": "Class UnitConverterFactory Namespace MapQuest.CoordinateSystems Assembly MapQuest.CoordinateSystems.dll 値の変換を行う IUnitConverter を生成するクラスです。 public class UnitConverterFactory Inheritance object UnitConverterFactory Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors UnitConverterFactory() public UnitConverterFactory() Methods Create(IUnit, IUnit) 値の変換を行う IUnitConverter を生成します。 public static IUnitConverter Create(IUnit source, IUnit target) Parameters source IUnit 変換元の ILinearUnit 。 target IUnit 変換先の IAngularUnit 。 Returns IUnitConverter 値の変換を行う IUnitConverter 。"
  },
  "api/MapQuest.CoordinateSystems.WGS84ConversionInfo.html": {
    "href": "api/MapQuest.CoordinateSystems.WGS84ConversionInfo.html",
    "title": "Struct WGS84ConversionInfo | mysite",
    "keywords": "Struct WGS84ConversionInfo Namespace MapQuest.CoordinateSystems Assembly MapQuest.CoordinateSystems.dll ある楕円体から WGS84 楕円体への変換パラメータを示します。 public struct WGS84ConversionInfo : ICloneable Implements ICloneable Inherited Members object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Remarks ブルサ・ウルフ(Bursa Wolf)パラメータは、地球の中心から測った座標に適用されます。 グリニッジ基準子午線のX軸ポイント、Y軸は東を指示します。また、Z軸は北を指示します。 Constructors WGS84ConversionInfo(WGS84ConversionInfo) コピーコンストラクタ。指定したインスタンスの詳細コピーを提供します。 public WGS84ConversionInfo(WGS84ConversionInfo wgsInfo) Parameters wgsInfo WGS84ConversionInfo コピー元の WGS84ConversionInfo 。 WGS84ConversionInfo(double, double, double, double, double, double, double) 必要なパラメータを指定して、新しいインスタンスを初期化します。 public WGS84ConversionInfo(double dx, double dy, double dz, double ex, double ey, double ez, double ppm) Parameters dx double Bursa Wolf X軸の移動量[m] 。 dy double Bursa Wolf Y軸の移動量[m] 。 dz double Bursa Wolf Z軸の移動量[m] 。 ex double Bursa Wolf X軸の回転量[sec] 。 ey double Bursa Wolf Y軸の回転量[sec] 。 ez double Bursa Wolf Z軸の回転量[sec] 。 ppm double Bursa Wolf scaling in parts per million. Fields Empty 空の WGS84ConversionInfo を取得します。 public static readonly WGS84ConversionInfo Empty Field Value WGS84ConversionInfo Properties AreaOfUse このパラメータが使用可能な地球上のおおよそのエリアを設定・取得します。 public string AreaOfUse { get; set; } Property Value string このパラメータが使用可能な地球上のおおよそのエリアを示す文字列。 Remarks この値は、説明に使われるもので、特に設定が必要なものではありません。 Dx Bursa Wolf X軸の移動量[m] を設定・取得します。 public double Dx { get; set; } Property Value double Bursa Wolf X軸の移動量[m]。 Dy Bursa Wolf Y軸の移動量[m] を設定・取得します。 public double Dy { get; set; } Property Value double Bursa Wolf Y軸の移動量[m]。 Dz Bursa Wolf Z軸の移動量[m] を設定・取得します。 public double Dz { get; set; } Property Value double Bursa Wolf Z軸の移動量[m]。 Ex Bursa Wolf X軸の回転量[sec] を設定・取得します。 public double Ex { get; set; } Property Value double Bursa Wolf X軸の回転量[sec]。 Ey Bursa Wolf Y軸の回転量[sec] を設定・取得します。 public double Ey { get; set; } Property Value double Bursa Wolf Y軸の回転量[sec]。 Ez Bursa Wolf Z軸の回転量[sec] を設定・取得します。 public double Ez { get; set; } Property Value double Bursa Wolf Z軸の回転量[sec]。 IsEmpty 現在のインスタンスが「空」かどうかを返します。 public bool IsEmpty { get; } Property Value bool 数値のプロパティが全て 0 、 文字列のプロパティが全て null あるいは 空文字 の場合は true を返します。 それ以外は false を返します。 Ppm Gets or sets Bursa Wolf scaling in parts per million. public double Ppm { get; set; } Property Value double A double precision value specifying the scaling factor. Methods Clone() 現在のインスタンスの詳細コピーを提供します。 public object Clone() Returns object コピーされた新しい WGS84ConversionInfo 。 Equals(WGS84ConversionInfo) 現在のオブジェクトと、指定されたオブジェクトが等しいかどうかを返します。 public bool Equals(WGS84ConversionInfo obj) Parameters obj WGS84ConversionInfo 比較する WGS84ConversionInfo 。 Returns bool 全てのプロパティが等しければ true を返します。 それ以外の場合は false を返します。 Equals(object) 現在のオブジェクトと、指定されたオブジェクトが等しいかどうかを返します。 public override bool Equals(object obj) Parameters obj object 比較する WGS84ConversionInfo 。 Returns bool 全てのプロパティが等しければ true を返します。 それ以外の場合は false を返します。 GetHashCode() この WGS84ConversionInfo のハッシュ コードを返します。 public override int GetHashCode() Returns int この WGS84ConversionInfo のハッシュ コード。 ToString() この WGS84ConversionInfo を Well-Known Text (WKT) 形式で表します。 public override string ToString() Returns string Remarks WKT は OpenGIS' により策定されている、下記のような形式です。 TOWGS84[Dx, Dy, Dz, Ex, Ey, Ez, Ppm] Operators operator ==(WGS84ConversionInfo, WGS84ConversionInfo) 二つの WGS84ConversionInfo が等しいかどうかを調べます。 public static bool operator ==(WGS84ConversionInfo left, WGS84ConversionInfo right) Parameters left WGS84ConversionInfo 1 つ目の WGS84ConversionInfo 。 right WGS84ConversionInfo 2 つ目の WGS84ConversionInfo 。 Returns bool 二つの WGS84ConversionInfo が等しければ true 、 等しくなければ false を返します。 Remarks left.Equals(right) を実行した結果を返します。 operator !=(WGS84ConversionInfo, WGS84ConversionInfo) 二つの WGS84ConversionInfo が等しくないかどうかを調べます。 public static bool operator !=(WGS84ConversionInfo left, WGS84ConversionInfo right) Parameters left WGS84ConversionInfo 1 つ目の WGS84ConversionInfo 。 right WGS84ConversionInfo 2 つ目の WGS84ConversionInfo 。 Returns bool 二つの WGS84ConversionInfo が等しくなければ true 、 等しければ false を返します。 Remarks !left.Equals(right) を実行した結果を返します。"
  },
  "api/MapQuest.CoordinateSystems.html": {
    "href": "api/MapQuest.CoordinateSystems.html",
    "title": "Namespace MapQuest.CoordinateSystems | mysite",
    "keywords": "Namespace MapQuest.CoordinateSystems Classes AngularToLinearUnitConverter IAngularUnit から ILinearUnit への値の変換機能を提供します。 AngularUnit 角度の単位を表すクラスです。 例えば、「度(Degree)」や「ラジアン(Radian)」などです。 AngularUnitConverter IAngularUnit 間の値の変換を提供します。 AxisInfo 「軸」に関する情報を示すクラスです。 この情報は、軸に関する情報を表示したり、軸の方向を指し示すのに使用されます。 CoordinateSystem 「地図座標系(Coordinate Reference System)」をモデル化するすべてのクラスのベースクラスです。 「地図座標系」は、1 つの座標系(Coordinate System) と 1 つの測地系(Datum)から成ります。 CoordinateSystemComparer CoordinateSystemComparer の概要の説明です。 CoordinateSystemEpsgFactory CoordinateSystemException CoordinateSystem で発生した例外を示すクラスです。 CoordinateSystemMapQuestFactory MapQuest.co.jp 社が定める GridID により ICoordinateSystem を生成するファクトリクラスです。 Datum 「測地系」の基本的な共通の実装を提供する抽象クラスです。 IDatum インターフェースをインプリメントします。 測地系(Datum) は、ある座標を地球上の実際の位置として定義するためのものです。 座標系の、地球に対しての位置および方向を定義するパラメーターとも言えます。 ここでは、あらかじめ定められた物理的な位置、 また、物理的な指示(回転の軸など)と、 座標系との関係について記述するパラメーター群を指します。 測地系の定義はさらに、一時的な振る舞い (軸の方向の変化率など)を含んでいる場合もあります。 Ellipsoid 「楕円体」を表すクラスです。 EpsgDbConnection EpsgParameterFile GeographicCoordinateSystem 緯度経度値がベースとなる座標系のクラスです。 HorizontalCoordinateSystem 地球表面上の位置に相当する２次元の座標系を示すクラスです。 最もよく使われる ProjectedCoordinateSystem のベースとなるクラスです。 HorizontalDatum 地球の表面上で位置を測定するために使用される測地系を示すクラスです。 ２次元の地図においては最もよく利用される測地系です。 Info 座標系オブジェクトのメタデータに、基礎的な実装を供給する abstract クラスです。 LinearToAngularUnitConverter ILinearUnit から IAngularUnit への値の変換機能を提供します。 LinearUnit 線形の単位を表すクラスです。 例えば、メートル、キロメートルなどです。 LinearUnitConverter ILinearUnit 間の値の変換を提供します。 ParameterList IDictionary を実装したリンクリストです。 10 未満の項目でパフォーマンスが最適化されます。 PrimeMeridian 「本初子午線」を示すクラスです。 殆どの場合、本初子午線はグリニッジ子午線と同一です。 ProjectedCoordinateSystem ２次元の地図座標系を示すクラスです。 最もよく使われる座標系です。 Projection 緯度経度座標から XY 座標への投影を示すクラスです。 Unit 単位を示すクラスの、共通な実装を提供する abstract クラスです。 UnitConverterFactory 値の変換を行う IUnitConverter を生成するクラスです。 Structs ProjectionParameter 投影法のパラメータを示す名前と値のセットです。 WGS84ConversionInfo ある楕円体から WGS84 楕円体への変換パラメータを示します。 Interfaces IAngularToLinearUnitConverter IAngularUnit から ILinearUnit への値の変換機能を提供クラスの ベースとなるインターフェースです。 IAngularUnit AngularUnit のインターフェースを定義します。 IAngularUnitConverter IAngularUnit 間の単位変換を行うクラスの ベースとなるインターフェースです。 IAxisInfo 「軸」に関する情報を示すインターフェースです。 この情報は、軸に関する情報を表示したり、軸の方向を指し示すのに使用されます。 ICoordinateSystem 全ての 座標系(CoordinateSystem) クラスのベースとなるインターフェースです。 ICoordinateSystemSimpleFactory 指定した ID から CoordinateSystem を生成するための、 最もシンプルなインターフェースです。 IDatum ある座標を地球上の実際の位置として定義するための「測地系」を表すクラスです。 IEllipsoid 「楕円体」を表すインターフェースです。 IGeographicCoordinateSystem 緯度経度値がベースとなる座標系のインターフェースです。 IHorizontalCoordinateSystem 地球表面上の位置に相当する２次元の座標系を示すインターフェースです。 IHorizontalDatum 地球の表面上で位置を測定するために使用される測地系を示すインターフェースです。 ２次元の地図においては最もよく利用される測地系です。 IInfo 座標系に適用可能なメタデータのための基礎インターフェースです。 ILinearToAngularUnitConverter ILinearUnit から IAngularUnit への値の変換機能を提供クラスの ベースとなるインターフェースです。 ILinearUnit LinearUnit のインターフェースを定義します。 ILinearUnitConverter ILinearUnit 間の単位変換を行うクラスの ベースとなるインターフェースです。 IPrimeMeridian 「本初子午線」を示すインターフェースです。 殆どの場合、本初子午線はグリニッジ子午線と同一です。 IProjectedCoordinateSystem ２次元の地図座標系を示すインターフェースです。 最もよく使われる座標系です。 IProjection 投影法の情報を取得するためのインターフェースです。 IUnit 「単位」のベースとなるインターフェースです。 IUnitConverter 単位を変換するクラスのベースとなるインターフェースです。 Enums AxisOrientation 軸の方向の種類を示す列挙体です。 CoordinateSystemType 座標系の種類を示す列挙体です。 DatumType 測地系の種類を示す列挙体です。 Delegates EpsgParameterFile.OpenParameterFile EPSG の座標変換に必要なパラメータファイルを読み込むためのデリゲートです。 指定されたメソッド名およびパラメータファイル名に対応するストリームリーダーを返す必要があります。"
  },
  "api/MapQuest.Coordinates.Coordinate.html": {
    "href": "api/MapQuest.Coordinates.Coordinate.html",
    "title": "Class Coordinate | mysite",
    "keywords": "Class Coordinate Namespace MapQuest.Coordinates Assembly MapQuest.Coordinates.dll 2 次元直交座標系で座標を格納した軽量のクラスです。 public class Coordinate : ICoordinatePoint, ICloneable, IComparable, ISerializable Inheritance object Coordinate Implements ICoordinatePoint ICloneable IComparable ISerializable Derived Coordinate3D FlaggedCoordinate MeasuredCoordinate Inherited Members object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Remarks Coordinateは、ポイント(Geometryにおけるサブクラス)とは異なります。 面積、精密モデル、および空間的参照システム情報のような補足情報を含んでいるポイント型のオブジェクトとは異なり、 Coordinateは座標の値およびアクセスするメソッドを含んでいるだけです。 Coordinateは、z座標が付加された 2 次元座標です。 OTSは、基礎的なアクセスする機能以外のz座標に対する操作をサポートしません。 構築された座標のz座標はNaNとなります。標準の比較機能はz座標を無視します。 Constructors Coordinate() 引数の指定がない場合X座標、Y座標を(0.0 , 0.0)としてCoordinateクラスの新しいインスタンスを初期化します。 public Coordinate() Coordinate(Coordinate) 引数のCoordinateと同じX座標,Y座標を持ったCoordinateクラスの新しいインスタンスを初期化します。 public Coordinate(Coordinate c) Parameters c Coordinate コピー元のCoordinate Coordinate(double, double) 引数を(x,y)としてCoordinateクラスの新しいインスタンスを初期化します。 public Coordinate(double x, double y) Parameters x double X座標 y double Y座標 Coordinate(SerializationInfo, StreamingContext) シリアル化された情報からCoordinateを作成します。 public Coordinate(SerializationInfo info, StreamingContext context) Parameters info SerializationInfo シリアル化する情報を格納するオブジェクト context StreamingContext Properties CoordinateType このCoordinateオブジェクトのCoordinateの種類を取得します。 public virtual CoordinateType CoordinateType { get; } Property Value CoordinateType このCoordinateオブジェクトのCoordinateの種類 Remarks CoordinateのCoordinateTypeはDefaultです。 See Also Default Dimension このCoordinateオブジェクトの次元を取得します。 public virtual int Dimension { get; } Property Value int このCoordinateオブジェクトの次元 Remarks Coordinateの次元は2です。 Ordinate このCoordinateオブジェクトの座標を取得します。 public virtual double[] Ordinate { get; } Property Value double[] このCoordinateオブジェクトの座標 Remarks Ordinate[0]がX座標、Ordinate[1]がY座標を表します。 X このCoordinateオブジェクトのX座標を取得、設定します。 public virtual double X { get; set; } Property Value double このCoordinateオブジェクトのX座標 Y このCoordinateオブジェクトのY座標を取得、設定します。 public virtual double Y { get; set; } Property Value double このCoordinateオブジェクトのY座標 Methods Clone() Coordinateを複製します。 public virtual object Clone() Returns object 複製されたCoordinateを返します。 CompareTo(object) 引数で指定されたオブジェクトとこのオブジェクトを比較します。 public virtual int CompareTo(object o) Parameters o object このCoordinateと比較する対象のCoordinate Returns int このCoordinateのほうが小さかった場合マイナスの値、等しかった場合ゼロ、このCoordinateの方が大きかった場合プラスの値を返します。 Remarks 返り値 -1, if this.x < other.x || ((this.x == other.x) && (this.y < other.y)) 0, if this.x == other.x && this.y = other.y 1, if this.x > other.x || ((this.x == other.x) && (this.y > other.y)) Distance(Coordinate) Coordinate間の最短距離を取得します。 public virtual double Distance(Coordinate p) Parameters p Coordinate 最短距離を取得する対象のCoordinate Returns double Coordinate間の最短距離を返します。 Equals(object) Ｘ座標とＹ座標の両方が等しいときにtrueを返します。 座標が2.5Dなので、比較する場合このルーチンはz座標を無視します。 public override bool Equals(object other) Parameters other object 比較する対象のCoordinate Returns bool Ｘ座標とＹ座標の両方が等しいときにtrueを返します。そうでなければfalseを返します。 GetHashCode() CoordinateのX座標とY座標を元にハッシュ値を生成します。 public override int GetHashCode() Returns int 生成されたハッシュ値を返します。 GetObjectData(SerializationInfo, StreamingContext) オブジェクトをシリアル化します。 public void GetObjectData(SerializationInfo info, StreamingContext context) Parameters info SerializationInfo シリアル化する情報を格納するオブジェクト context StreamingContext GetOrdinate(int) 引数で指定した次元の座標を取得します。 public virtual double GetOrdinate(int dimension) Parameters dimension int 取得したい次元 Returns double 指定した次元の座標を返します。dimensionが0ならばX座標、dimensionが1ならばY座標を返します。 Exceptions CoordinateException dimensionが0または1以外の時にCoordinateExceptionをthrowします。 MakePrecise(PrecisionModel) 高精度グリッドPrecisionModelに，このCoordinateを調整します。 public virtual void MakePrecise(PrecisionModel precisionModel) Parameters precisionModel PrecisionModel 調整する元のPrecisionModel Rotate(double, Coordinate) 回転角度と基準点を基に、この Coordinate を、反時計回りに回転します。 public void Rotate(double angle, Coordinate baseCoord) Parameters angle double Coordinate を回転する角度。（度単位） baseCoord Coordinate 回転する際の基準点となる Coordinate 。 Rotate(double, double, double) 回転角度と基準点を基に、この Coordinate を、反時計回りに回転します。 public void Rotate(double angle, double baseX, double baseY) Parameters angle double Coordinate を回転する角度。（度単位） baseX double 回転する際の基準点のX座標。 baseY double 回転する際の基準点のY座標。 SetCoordinate(Coordinate) 引数のCoordinateのX座標、Y座標をこのCoordinateにコピーします。 public virtual void SetCoordinate(Coordinate other) Parameters other Coordinate コピー元のCoordinate SetCoordinate(double, double) 引数のX座標、Y座標をこのCoordinateにコピーします。 public void SetCoordinate(double x, double y) Parameters x double X座標 y double Y座標 SetCoordinate(float, float) 引数のX座標、Y座標をこのCoordinateにコピーします。 public void SetCoordinate(float x, float y) Parameters x float X座標 y float Y座標 SetLocation(ICoordinatePoint) 引数の座標をこのCoordinateに設定します。 public virtual void SetLocation(ICoordinatePoint point) Parameters point ICoordinatePoint ICoordinatePoint型の座標 Exceptions ArgumentException pointのdimensionが1以下の場合ArgumentExceptionをthrowします。 SetOrdinate(int, double) 引数で指定した次元の座標を設定します。 public virtual void SetOrdinate(int dimension, double value) Parameters dimension int 設定する次元 value double 設定する次元に代入したい値 Exceptions CoordinateException dimensionが0または1以外の時にCoordinateExceptionをthrowします。 ToString() (x, y)の形式で文字列を返します。 public override string ToString() Returns string (x, y)の形式の文字列。 Operators operator +(Coordinate, Coordinate) 左のオペランドのCoordinateと右オペランドのCoordinateを加算します。 public static Coordinate operator +(Coordinate left, Coordinate right) Parameters left Coordinate right Coordinate Returns Coordinate 加算された結果のCoordinateを返します。 Remarks 左のオペランドのCoordinateのX座標、Y座標と右オペランドのCoordinateのX座標、Y座標をそれぞれ加算します。 operator >(Coordinate, Coordinate) 左のオペランドのCoordinateが右オペランドのCoordinateより大きいかどうかを判定します。 public static bool operator >(Coordinate left, Coordinate right) Parameters left Coordinate right Coordinate Returns bool 左のオペランドのCoordinateが右オペランドのCoordinateより大きければtrue、そうでなければfalseを返します。 Remarks 左のオペランドのCoordinateのX座標が右オペランドのCoordinateのX座標よりも大きければtrueを返します。 また、左のオペランドのCoordinateのX座標、Y座標が共に右オペランドのCoordinateのX座標、Y座標よりも大きければtrueを返します。 そうでなければfalseを返します。 operator <(Coordinate, Coordinate) 左のオペランドのCoordinateが右オペランドのCoordinateより小さいかどうかを判定します。 public static bool operator <(Coordinate left, Coordinate right) Parameters left Coordinate right Coordinate Returns bool 左のオペランドのCoordinateが右オペランドのCoordinateより小さければtrue、そうでなければfalseを返します。 Remarks 左のオペランドのCoordinateのX座標が右オペランドのCoordinateのX座標よりも小さければtrueを返します。 また、左のオペランドのCoordinateのX座標、Y座標が共に右オペランドのCoordinateのX座標、Y座標よりも小さければtrueを返します。 そうでなければfalseを返します。 operator *(Coordinate, double) 左のオペランドのCoordinateと右オペランドのCoordinateを乗算します。 public static Coordinate operator *(Coordinate point, double scalar) Parameters point Coordinate scalar double Returns Coordinate 乗算された結果のCoordinateを返します。 Remarks 左のオペランドのCoordinateのX座標、Y座標と右オペランドのCoordinateのX座標、Y座標をそれぞれ乗算します。 operator -(Coordinate, Coordinate) 左のオペランドのCoordinateから右オペランドのCoordinateを減算します。 public static Coordinate operator -(Coordinate left, Coordinate right) Parameters left Coordinate right Coordinate Returns Coordinate 減算された結果のCoordinateを返します。 Remarks 左のオペランドのCoordinateのX座標、Y座標から右オペランドのCoordinateのX座標、Y座標をそれぞれ減算します。 operator -(Coordinate) オペランドのCoordinateを原点を中心に反転します。 public static Coordinate operator -(Coordinate point) Parameters point Coordinate Returns Coordinate 反転された結果のCoordinateを返します。 Remarks オペランドのCoordinateのX座標、Y座標をそれぞれ原点を中心に反転します。"
  },
  "api/MapQuest.Coordinates.Coordinate3D.html": {
    "href": "api/MapQuest.Coordinates.Coordinate3D.html",
    "title": "Class Coordinate3D | mysite",
    "keywords": "Class Coordinate3D Namespace MapQuest.Coordinates Assembly MapQuest.Coordinates.dll 3 次元座標管理をカプセル化したインターフェースを提供します。 public class Coordinate3D : Coordinate, ICoordinatePoint, ICloneable, IComparable, ISerializable Inheritance object Coordinate Coordinate3D Implements ICoordinatePoint ICloneable IComparable ISerializable Derived FlaggedCoordinate3D MeasuredCoordinate3D Inherited Members Coordinate.SetCoordinate(float, float) Coordinate.SetCoordinate(double, double) Coordinate.Distance(Coordinate) Coordinate.Rotate(double, Coordinate) Coordinate.Rotate(double, double, double) Coordinate.SetLocation(ICoordinatePoint) Coordinate.X Coordinate.Y Coordinate.CoordinateType Coordinate.Ordinate object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Remarks このインターフェースには 3 次元座標を管理するためのメソッドが用意されています。 Constructors Coordinate3D() 引数の指定がない場合X座標、Y座標，Z座標を(0.0 , 0.0 , 0.0)としてCoordinate3Dクラスの新しいインスタンスを初期化します。 public Coordinate3D() Coordinate3D(Coordinate3D) 引数のCoordinate3Dと同じX座標,Y座標,Z座標を持ったCoordinate3Dクラスの新しいインスタンスを初期化します。 public Coordinate3D(Coordinate3D c) Parameters c Coordinate3D コピー元のCoordinate3D Coordinate3D(double, double) 引数を(x,y,NaN)としてCoordinate3Dクラスの新しいインスタンスを初期化します。この場合、Z座標は設定されません。 public Coordinate3D(double x, double y) Parameters x double X座標 y double Y座標 Coordinate3D(double, double, double) 引数を(x,y,z)としてCoordinate3Dクラスの新しいインスタンスを初期化します。 public Coordinate3D(double x, double y, double z) Parameters x double X座標 y double Y座標 z double Z座標 Coordinate3D(SerializationInfo, StreamingContext) シリアル化された情報からCoordinate3Dを作成します。 public Coordinate3D(SerializationInfo info, StreamingContext context) Parameters info SerializationInfo シリアル化する情報を格納するオブジェクト context StreamingContext Properties Dimension このCoordinate3Dオブジェクトの次元を取得します。 public override int Dimension { get; } Property Value int このCoordinate3Dオブジェクトの次元 Remarks Coordinate3Dの次元は3です。 Z このCoordinate3DオブジェクトのZ座標を取得、設定します。 public virtual double Z { get; set; } Property Value double このCoordinate3DオブジェクトのZ座標 Methods Clone() Coordinate3Dを複製します。 public override object Clone() Returns object 複製されたCoordinate3Dを返します。 CompareTo(object) 引数で指定されたオブジェクトとこのオブジェクトを比較します。 public override int CompareTo(object o) Parameters o object このCoordinate3Dと比較する対象のCoordinate3D Returns int このCoordinate3Dのほうが小さかった場合マイナスの値、等しかった場合ゼロ、このCoordinate3Dの方が大きかった場合プラスの値を返します。 Remarks 返り値 -1, if this.x < other.x || ((this.x == other.x) && (this.y < other.y)) || ((this.x == other.x) && (this.y == other.y) && (this.z < other.z)) 0, if this.x == other.x && this.y = other.y && this.z = other.z 1, if this.x > other.x || ((this.x == other.x) && (this.y > other.y)) || ((this.x == other.x) && (this.y == other.y) && (this.z > other.z)) Distance(Coordinate3D) Coordinate3D間の最短距離を取得します。 public virtual double Distance(Coordinate3D p) Parameters p Coordinate3D 最短距離を取得する対象のCoordinate3D Returns double Coordinate3D間の最短距離を返します。 Equals(object) X座標、Y座標、Z座標のそれぞれが等しいときにtrueを返します。 public override bool Equals(object other) Parameters other object 比較する対象のCoordinate Returns bool X座標、Y座標、Z座標のそれぞれが等しいときにtrueを返します。 GetHashCode() Coordinate3DのX座標とY座標とZ座標を元にハッシュ値を生成します。 public override int GetHashCode() Returns int 生成されたハッシュ値を返します。 GetObjectData(SerializationInfo, StreamingContext) オブジェクトをシリアル化します。 public void GetObjectData(SerializationInfo info, StreamingContext context) Parameters info SerializationInfo シリアル化する情報を格納するオブジェクト context StreamingContext GetOrdinate(int) 引数で指定した次元の座標を取得します。 public override double GetOrdinate(int dimension) Parameters dimension int 取得したい次元 Returns double 指定した次元の座標を返します。dimensionが0ならばX座標、dimensionが1ならばY座標、dimensionが2ならばZ座標を返します。 Exceptions CoordinateException dimensionが0、1、2以外の時にCoordinateExceptionをthrowします。 MakePrecise(PrecisionModel) 高精度グリッドPrecisionModelに，このCoordinate3Dを調整します。 public override void MakePrecise(PrecisionModel precisionModel) Parameters precisionModel PrecisionModel 調整する元のPrecisionModel SetCoordinate(Coordinate) 引数のCoordinateのX座標、Y座標をこのCoordinate3Dにコピーします。 引数のCoordinateの種類がCoordinate3Dの場合、Z座標も同様にコピーします。 public override void SetCoordinate(Coordinate other) Parameters other Coordinate コピー元のCoordinate SetOrdinate(int, double) 引数で指定した次元の座標を設定します。 public override void SetOrdinate(int dimension, double value) Parameters dimension int 設定する次元 value double 設定する次元に代入したい値 Exceptions CoordinateException dimensionが0、1、2以外の時にCoordinateExceptionをthrowします。 ToString() (x,y,z)の形式で文字列を返します。 public override string ToString() Returns string (x,y,z)の形式で文字列を返します。"
  },
  "api/MapQuest.Coordinates.CoordinateArrayVisitor.html": {
    "href": "api/MapQuest.Coordinates.CoordinateArrayVisitor.html",
    "title": "Class CoordinateArrayVisitor | mysite",
    "keywords": "Class CoordinateArrayVisitor Namespace MapQuest.Coordinates Assembly MapQuest.Coordinates.dll Geometry中の全てのCoordinateを含む配列を作成するICoordinateVisitorです。 public class CoordinateArrayVisitor : ICoordinateVisitor Inheritance object CoordinateArrayVisitor Implements ICoordinateVisitor Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors CoordinateArrayVisitor(int) CoordinateArrayVisitor クラスの新しいインスタンスを初期化します。 public CoordinateArrayVisitor(int size) Parameters size int CoordinateArrayVisitorに含まれると予測されるCoordinateの数 Properties Coordinates このCoordinate3Dオブジェクトの収集されたCoordinateを取得します。 public virtual Coordinate[] Coordinates { get; } Property Value Coordinate[] このCoordinateArrayVisitorによって収集されたCoordinate Methods Visit(Coordinate) CoordinateArrayVisitorに引数のCoordinateを追加します。 public virtual void Visit(Coordinate coord) Parameters coord Coordinate"
  },
  "api/MapQuest.Coordinates.CoordinateCountVisitor.html": {
    "href": "api/MapQuest.Coordinates.CoordinateCountVisitor.html",
    "title": "Class CoordinateCountVisitor | mysite",
    "keywords": "Class CoordinateCountVisitor Namespace MapQuest.Coordinates Assembly MapQuest.Coordinates.dll Geometry中のCoordinateの総数を数えることが可能なICoordinateVisitorです。 public class CoordinateCountVisitor : ICoordinateVisitor Inheritance object CoordinateCountVisitor Implements ICoordinateVisitor Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks このインターフェースには地図上の座標の総数を数えるためのプロパティが用意されています。 Constructors CoordinateCountVisitor() CoordinateCountVisitor クラスの新しいインスタンスを初期化します。 public CoordinateCountVisitor() Properties Count このCoordinate3Dオブジェクトのフィルタリング後の座標の集計結果を取得します。 public virtual int Count { get; } Property Value int このCoordinateCountVisitorによって見つかったCoordinateの数 Methods Visit(Coordinate) 引数のCoordinateを数えます。 public virtual void Visit(Coordinate coord) Parameters coord Coordinate Remarks CoordinateCountVisitorのカウンタに1が足されます。"
  },
  "api/MapQuest.Coordinates.CoordinateException.html": {
    "href": "api/MapQuest.Coordinates.CoordinateException.html",
    "title": "Class CoordinateException | mysite",
    "keywords": "Class CoordinateException Namespace MapQuest.Coordinates Assembly MapQuest.Coordinates.dll Coordinateで起こる例外を定義します。 public class CoordinateException : DefaultException Inheritance object CoordinateException Constructors CoordinateException() CoordinateException クラスの新しいインスタンスを初期化します。 public CoordinateException() CoordinateException(int, Exception, params object[]) エラー メッセージの例外ID、およびこの例外の原因である内部例外への参照を指定して、 CoordinateException クラスの新しいインスタンスを初期化します。 public CoordinateException(int exceptionID, Exception inner, params object[] args) Parameters exceptionID int リソースファイル中の例外のメッセージを識別する値。 inner Exception 内部例外への参照を設定します。 args object[] 引数となるパラメータ配列 CoordinateException(int, params object[]) エラー メッセージの例外IDを指定して、 CoordinateException クラスの新しいインスタンスを初期化します。 public CoordinateException(int exceptionID, params object[] args) Parameters exceptionID int リソースファイル中の例外のメッセージを識別する値。 args object[] 引数となるパラメータ配列 CoordinateException(SerializationInfo, StreamingContext) デシリアライズの際に使用されるコンストラクタです。 protected CoordinateException(SerializationInfo info, StreamingContext context) Parameters info SerializationInfo 新しいインスタンスをシリアル化するために必要な情報を格納する SerializationInfo 。 context StreamingContext 新しいインスタンスに関連付けられているシリアル化ストリームのソースを格納する StreamingContext 。 CoordinateException(string) エラー メッセージを指定して、 CoordinateException クラスの新しいインスタンスを初期化します。 public CoordinateException(string message) Parameters message string 例外のメッセージの文字列を設定します。 CoordinateException(string, Exception) エラー メッセージ、およびこの例外の原因である内部例外への参照を指定して、 CoordinateException クラスの新しいインスタンスを初期化します。 public CoordinateException(string message, Exception inner) Parameters message string 例外のメッセージの文字列を設定します。 inner Exception InnerExceptionへの参照を設定します。 CoordinateException(string, int) 接頭辞とリソースID を指定してインスタンスを初期化します。 protected CoordinateException(string prefix, int exceptionID) Parameters prefix string 例外の接頭辞。 exceptionID int リソースに格納されているエラーメッセージの ID 。 CoordinateException(string, int, Exception) 接頭辞とリソースID、例外の原因となった例外を指定してインスタンスを初期化します。 protected CoordinateException(string prefix, int exceptionID, Exception inner) Parameters prefix string 例外の接頭辞。 exceptionID int リソースに格納されているエラーメッセージの ID 。 inner Exception 例外の原因となった Exception 。 CoordinateException(string, int, Exception, params object[]) 接頭辞とリソースID、例外のパラメータ群、例外の原因となった例外 を指定してインスタンスを初期化します。 protected CoordinateException(string prefix, int exceptionID, Exception inner, params object[] args) Parameters prefix string 例外の接頭辞。 exceptionID int リソースに格納されているエラーメッセージの ID 。 inner Exception 例外の原因となった Exception 。 args object[] 例外のパラメータ群。 CoordinateException(string, int, params object[]) 接頭辞とリソースID、例外のパラメータ群を指定してインスタンスを初期化します。 protected CoordinateException(string prefix, int exceptionID, params object[] args) Parameters prefix string 例外の接頭辞。 exceptionID int リソースに格納されているエラーメッセージの ID 。 args object[] 例外のパラメータ群。"
  },
  "api/MapQuest.Coordinates.CoordinateList.html": {
    "href": "api/MapQuest.Coordinates.CoordinateList.html",
    "title": "Class CoordinateList | mysite",
    "keywords": "Class CoordinateList Namespace MapQuest.Coordinates Assembly MapQuest.Coordinates.dll Coordinateオブジェクトに強く型付けされたコレクションを定義します。 public class CoordinateList : ICoordinateList, ICoordinateCollection, IEnumerable<Coordinate>, IList, ICollection, IEnumerable, ICloneable, ISerializable Inheritance object CoordinateList Implements ICoordinateList ICoordinateCollection IEnumerable<Coordinate> IList ICollection IEnumerable ICloneable ISerializable Inherited Members object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors CoordinateList() CoordinateList クラスの新しいインスタンスを初期化します。 初期状態は空で、初めの容量は初期設定となります。 public CoordinateList() CoordinateList(CoordinateList) CoordinateList クラスの新しいインスタンスを初期化します。 それは、引数で指定されたCoordinateList からコピーされた要素を含みます。 public CoordinateList(CoordinateList c) Parameters c CoordinateList 新しいコレクションにコピーしたい要素を持ったCoordinateList CoordinateList(Coordinate[]) CoordinateList クラスの新しいインスタンスを初期化します。 それは、引数で指定された Coordinate配列からコピーされた要素を含みます。 public CoordinateList(Coordinate[] coords) Parameters coords Coordinate[] 新しいリストにコピーしたい要素を持った Coordinate配列 Exceptions ArgumentException 引数の Coordinate配列にNULLの要素が含まれていた場合 CoordinateList(Coordinate[], bool) Coordinate配列から重複されたポイントが削除されるかどうかを明示することが可能な、新しいリストを構築します。 public CoordinateList(Coordinate[] coords, bool allowRepeated) Parameters coords Coordinate[] リストに読み込まれる Coordinate配列 allowRepeated bool false の場合、重複されたポイントは削除されます。 Exceptions ArgumentException 引数の Coordinate配列にNULLの要素が含まれていた場合 CoordinateList(int) CoordinateList クラスの新しいインスタンスを初期化します。 初期容量は引数で指定された値となります。 public CoordinateList(int capacity) Parameters capacity int 新しいCoordinateList が最初に格納できる要素の数。 CoordinateList(SerializationInfo, StreamingContext) シリアル化された情報からCoordinateListを作成します。 public CoordinateList(SerializationInfo info, StreamingContext context) Parameters info SerializationInfo シリアル化する情報を格納するオブジェクト context StreamingContext Properties Capacity このCoordinateList オブジェクトに含むことのできる要素の数を取得または設定します。 public virtual int Capacity { get; set; } Property Value int このCoordinateList オブジェクトに含むことのできる要素の数 Count CoordinateList 中に実際に含まれている要素の数を取得します。 public virtual int Count { get; } Property Value int CoordinateList 中に実際に含まれている要素の数。 IsFixedSize CoordinateList が固定のサイズかどうかを取得します。 public virtual bool IsFixedSize { get; } Property Value bool true もし、CoordinateList が固定のサイズの場合; そうでなければ、 false 。既定値は false です。 IsReadOnly CoordinateList が固定のサイズかどうかを取得します。 public virtual bool IsReadOnly { get; } Property Value bool true もし、CoordinateList が固定のサイズの場合; そうでなければ、 false 。既定値は false です。 IsSynchronized コレクションが同期されている (スレッド セーフな)かどうかを取得します。 public virtual bool IsSynchronized { get; } Property Value bool true もし、ICollectionに対するアクセスがスレッドセーフに同期されている場合; そうでない場合 false this[int] 指定されたインデックスの Coordinate を取得または設定します。 public virtual Coordinate this[int index] { get; set; } Parameters index int 要素の取得または設定を行いたい0から始まるインデックス Property Value Coordinate 指定したインデックスにある Coordinate 。 Exceptions ArgumentOutOfRangeException index が 0 未満です。 または index が Count 以上です。 SyncRoot コレクションに対する同期アクセスに使用されるオブジェクトを取得します。 public virtual object SyncRoot { get; } Property Value object コレクションに対する同期アクセスに使用されるオブジェクト Methods Add(Coordinate) CoordinateList の終端に Coordinateの要素を追加します。 public virtual int Add(Coordinate item) Parameters item Coordinate CoordinateList の終端に追加する Coordinate オブジェクト。 Returns int itemが追加されたCoordinateList のインデックス Add(Coordinate, bool) CoordinateList の終端に Coordinateの要素を追加します。 public virtual void Add(Coordinate coord, bool allowRepeated) Parameters coord Coordinate CoordinateList の終端に追加する Coordinate allowRepeated bool false の場合、重複されたポイントは削除されます。 Add(CoordinateList, bool) CoordinateList の終端に引数のCoordinateList を追加します。 public bool Add(CoordinateList coord, bool allowRepeated) Parameters coord CoordinateList CoordinateList の終端に追加するCoordinateList allowRepeated bool false の場合、重複されたポイントは削除されます。 Returns bool true Add(CoordinateList, bool, bool) CoordinateList の終端に引数のCoordinateList を追加します。 public bool Add(CoordinateList coord, bool allowRepeated, bool direction) Parameters coord CoordinateList CoordinateList の終端に追加する引数のCoordinateList allowRepeated bool false の場合、重複されたポイントは削除されます。 direction bool coordを追加する際の方向性。 true の場合昇順で、 false の場合降順で追加されます。 Returns bool true Add(Coordinate[], bool) CoordinateList の終端に Coordinate配列の要素を昇順で追加します。 public virtual bool Add(Coordinate[] coord, bool allowRepeated) Parameters coord Coordinate[] CoordinateList の終端に追加する Coordinate配列。 allowRepeated bool false の場合、重複されたポイントは削除されます。 Returns bool true Add(Coordinate[], bool, bool) CoordinateList の終端に Coordinate配列の要素を追加します。 public virtual bool Add(Coordinate[] coord, bool allowRepeated, bool direction) Parameters coord Coordinate[] CoordinateList の終端に追加する Coordinate配列。 allowRepeated bool false の場合、重複されたポイントは削除されます。 direction bool coordを追加する際の方向性。 true の場合昇順で、 false の場合降順で追加されます。 Returns bool true Add(object, bool) CoordinateList の終端にオブジェクトを追加します。 public virtual bool Add(object obj, bool allowRepeated) Parameters obj object CoordinateList の終端に追加するオブジェクト allowRepeated bool false の場合、重複されたポイントは削除されます。 Returns bool true AddAll(ArrayList, bool) CoordinateList に引数のArrayListの要素を全て追加します。 public virtual bool AddAll(ArrayList coll, bool allowRepeated) Parameters coll ArrayList CoordinateList の終端に追加する Coordinateを含んだArrayList allowRepeated bool false の場合、重複されたポイントは削除されます。 Returns bool true もし、indexの追加により、CoordinateList が変更された場合;そうでなければ false AddRange(CoordinateList) 引数のCoordinateList の要素をこのCoordinateList の終端に追加します。 public virtual int AddRange(CoordinateList x) Parameters x CoordinateList このCoordinateList の終端に追加したい要素のCoordinateList Returns int 引数のCoordinateList を加えた結果のCoordinateList のCoordinateList.Count AddRange(Coordinate[]) 引数の Coordinate配列の要素をこのCoordinateList の終端に追加します。 public virtual int AddRange(Coordinate[] x) Parameters x Coordinate[] このCoordinateList の終端に追加したい要素の Coordinate配列 Returns int 引数の Coordinate配列を加えた結果のCoordinateList のCoordinateList.Count BinarySearch(Coordinate) 全ての要素がソートされたCoordinateList から引数の Coordinateの要素を初期設定の比較を用いて検索します。 public virtual int BinarySearch(Coordinate value) Parameters value Coordinate CoordinateList から検索する対象の Coordinateオブジェクト。この引数にはNULL参照が許可されます。 Returns int value が見つかった場合は、並べ替えられた CoordinateList 内の value の 0 から始まるインデックス。 見つからなかった場合は、負の値。 これは、 value の次に大きい要素のインデックスのビットごとの補数です。 ただし、大きい要素が存在しない場合は、 CoordinateList.Count のビットごとの補数です。 Remarks 詳細はArrayList.BinarySearchを参照してください。 Exceptions InvalidOperationException valueがCoordinateList の要素がいずれもIComparableインターフェイスを実装していない場合 Clear() CoordinateList から全ての要素を削除します。 public virtual void Clear() Clone() CoordinateList の浅いコピーを作成します。 public virtual object Clone() Returns object コピーされたCoordinateList CloseRing() スタートポイントを終端に加えることによってCoordinateList をリング状にします。 public virtual void CloseRing() Contains(Coordinate) CoordinateList に指定された Coordinateの要素が含まれているかどうかを判断します。 public virtual bool Contains(Coordinate item) Parameters item Coordinate CoordinateList から、その位置を見つける Coordinateオブジェクト。 Returns bool true もし、valueがCoordinateList 内に見つかった場合; そうでない場合、 false . CopyTo(Coordinate[]) CoordinateList の全ての要素を、 1 次元 Coordinate 配列にコピーします。 public virtual void CopyTo(Coordinate[] array) Parameters array Coordinate[] コピーする対象の 1 次元 Coordinate 配列 Exceptions ArgumentNullException array が null 参照 (Visual Basic では Nothing) です。 ArgumentException array が多次元です。 または コピー元の CoordinateList の地物数が、コピー先の array に格納できる要素の数を超えています。 InvalidCastException コピー元の CoordinateList の型が、コピー先の array の型に自動的にキャストできません。 CopyTo(Coordinate[], int) CoordinateList の全ての要素を、コピーを開始するインデックスを指定して 1 次元 Coordinate 配列にコピーします。 public virtual void CopyTo(Coordinate[] array, int start) Parameters array Coordinate[] コピーする対象の 1 次元 Coordinate 配列 start int コピーを開始する0から始まるインデックス Exceptions ArgumentNullException array が null 参照 (Visual Basic では Nothing) です。 ArgumentOutOfRangeException start が 0 未満です。 ArgumentException array が多次元です。 または start が array の長さ以上です。 または コピー元の CoordinateList の地物数が、 start からコピー先の array の末尾までに格納できる数を超えています。 InvalidCastException コピー元の CoordinateList の型が、コピー先の array の型に自動的にキャストできません。 CopyTo(int, Array, int, int) 要素の範囲を CoordinateList から互換性のある 1 次元の Coordinate にコピーします。 コピー操作は、コピー先の配列の指定したインデックスから始まります。 public virtual void CopyTo(int index, Array array, int arrayIndex, int count) Parameters index int コピーを開始するコピー元の CoordinateList 内の、0 から始まるインデックス番号。 array Array CoordinateList から要素がコピーされる 1 次元の Coordinate 。 Coordinate には、0 から始まるインデックス番号が必要です。 arrayIndex int コピーの開始位置となる、array の 0 から始まるインデックス番号。 count int コピーする要素の数 Exceptions ArgumentNullException array が null 参照 (Visual Basic では Nothing) です。 ArgumentOutOfRangeException arrayIndex が 0 未満です。 ArgumentException array が多次元です。 または index が 、コピー元の CoordinateList の Count 以上です。 または arrayIndex が array の長さ以上です。 または コピー元の CoordinateList の要素数が、 arrayIndex からコピー先の array の末尾までに格納できる数を超えています。 InvalidCastException コピー元の CoordinateList の型が、コピー先の array の型に自動的にキャストできません。 Equals(object) 配列の内容が等しい場合に真を返します。 public override bool Equals(object obj) Parameters obj object 比較するCoordinateList Returns bool 等価であるか GetEnumerator() CoordinateList の反復可能な列挙子を返します。 public virtual ICoordinateEnumerator GetEnumerator() Returns ICoordinateEnumerator 全てのCoordinateList のEnumerator GetObjectData(SerializationInfo, StreamingContext) オブジェクトをシリアル化します。 public void GetObjectData(SerializationInfo info, StreamingContext context) Parameters info SerializationInfo シリアル化する情報を格納するオブジェクト context StreamingContext HasNullElements(Coordinate[]) Coordinate配列がNULL要素を含んでいた場合 true を返します。 protected static bool HasNullElements(Coordinate[] array) Parameters array Coordinate[] 値が正しいかどうかを評価する Coordinate配列 Returns bool true Coordinate配列のいずれかの要素がNULLであった場合;そうでなければ false IndexOf(Coordinate) CoordinateList から指定された Coordinateを検索し、最初に発見された位置を0から始まるインデックスで返します。 public virtual int IndexOf(Coordinate item) Parameters item Coordinate CoordinateList から、その位置を検索する Coordinateオブジェクト。 Returns int CoordinateList から、itemが最初に発見された0から始まるインデックス。;見つからなかった場合、 -1. Insert(int, Coordinate) CoordinateList に指定された Coordinateの要素を挿入します。 public virtual void Insert(int index, Coordinate item) Parameters index int valueを挿入するべき箇所の0から始まるインデックス item Coordinate CoordinateList に挿入する Coordinateオブジェクト。 Exceptions ArgumentOutOfRangeException indexが0未満 又は indexがCoordinateList.Countと同じか、もしくは大きい場合 ReadOnly(CoordinateList) CoordinateList のインスタンスのために、読み取り専用のラッパーを作成します。 public static CoordinateList ReadOnly(CoordinateList list) Parameters list CoordinateList 読み取り専用にするCoordinateList Returns CoordinateList 読み取り専用のCoordinateList ラッパー Exceptions ArgumentNullException 引数のCoordinateList がNULLの場合 Remove(Coordinate) CoordinateList から指定された最初に発見された Coordinateの要素を削除します。 public virtual void Remove(Coordinate item) Parameters item Coordinate CoordinateList から削除する Coordinateオブジェクト。 Exceptions ArgumentException 指定された CoordinateがCoordinateList からみつからなかった場合 RemoveAt(int) CoordinateList から指定されたインデックスの Coordinateの要素を削除します。 public virtual void RemoveAt(int index) Parameters index int 要素を削除する0から始まるインデックス Exceptions ArgumentOutOfRangeException indexが0未満 又は indexがCoordinateList.Countと同じか、もしくは大きい場合 RemoveRange(int, int) CoordinateList から要素の範囲を削除します。 public virtual void RemoveRange(int index, int count) Parameters index int 削除する要素の範囲の開始位置を示す 0 から始まるインデックス。 count int 削除する要素の数。 Remarks 詳細はArrayList.RemoveRangeを参照してください。 Exceptions ArgumentException index および countがCoordinateList 内の要素の有効範囲を示していません。 ArgumentOutOfRangeException indexが0未満 又は countが0未満 NotSupportedException CoordinateList が読み取り専用 又は CoordinateListが固定サイズの場合 Reverse() CoordinateList 内およびその一部の要素の順序を反転させます。 public virtual void Reverse() Remarks 詳細はArrayList.Reverseを参照してください。 Exceptions NotSupportedException CoordinateList が読み取り専用 Reverse(int, int) 指定した範囲の要素の順序を反転させます。 public virtual void Reverse(int index, int count) Parameters index int 反転させる範囲の開始位置を示す 0 から始まるインデックス。 count int 反転させる範囲内にある要素の数。 Remarks 詳細はArrayList.Reverseを参照してください。 Exceptions ArgumentException indexおよびcountがCoordinateList 内の要素の有効範囲を示していません。 ArgumentOutOfRangeException indexが0未満 又は countが0未満 NotSupportedException CoordinateList が読み取り専用 Scroll(Coordinate) 引数のfirstCoordinateが最初の位置にくるように要素をシフトします。 public void Scroll(Coordinate firstCoordinate) Parameters firstCoordinate Coordinate 最初の位置にくるようにさせたい Coordinate Sort() 各要素のIComparable実装を使用して、CoordinateList 全体内の要素を並べ替えます。 public virtual void Sort() Remarks 詳細はArrayList.Sortを参照してください。 Exceptions NotSupportedException CoordinateList が読み取り専用 Sort(IComparer) 指定した比較演算子を使用して、 CoordinateList 全体内の要素を並べ替えます。 public virtual void Sort(IComparer comparer) Parameters comparer IComparer 要素を比較する場合に使用するIComparer実装 又は 各要素のIComparer実装を使用する場合は null 参照 Remarks 詳細はArrayList.Sortを参照してください。 Exceptions NotSupportedException CoordinateList が読み取り専用 Sort(int, int, IComparer) 指定した比較演算子を使用して、CoordinateList のセクション内の要素を並べ替えます。 public virtual void Sort(int index, int count, IComparer comparer) Parameters index int 並べ替える範囲の開始位置を示す 0 から始まるインデックス。 count int 並べ替える範囲の長さ。 comparer IComparer 要素を比較する場合に使用する IComparer実装。 又は 各要素のIComparable実装を使用する場合は null 参照 Remarks 詳細はArrayList.Sortを参照してください。 Exceptions ArgumentException index および countがCoordinateList 内の要素の有効範囲を示していません。 ArgumentOutOfRangeException indexが0未満 又は countが0未満 NotSupportedException CoordinateList が読み取り専用 Synchronized(CoordinateList) CoordinateList のインスタンスのために、同期されている (スレッド セーフな)ラッパーを作成します。 public static CoordinateList Synchronized(CoordinateList list) Parameters list CoordinateList 同期するCoordinateList Returns CoordinateList 同期されている (スレッド セーフな)CoordinateList ラッパー Exceptions ArgumentNullException 引数のCoordinateList がNULLの場合 ToString() CoordinateList の要素を文字列表現します。 public override string ToString() Returns string CoordinateList の要素の文字列表現 TrimToSize() CoordinateList.CapacityをこのCoordinateList の実際の要素の数に設定します。 public virtual void TrimToSize()"
  },
  "api/MapQuest.Coordinates.CoordinatePoint.html": {
    "href": "api/MapQuest.Coordinates.CoordinatePoint.html",
    "title": "Struct CoordinatePoint | mysite",
    "keywords": "Struct CoordinatePoint Namespace MapQuest.Coordinates Assembly MapQuest.Coordinates.dll 数値のリストによって定義された位置を示します。 numDimがCoordinateのポイントが属する座標系の次元である場合、そのインデックスとなるOrdinateの値は0から(numDim-1)で指定します。 public struct CoordinatePoint : ICoordinatePoint, ICloneable Implements ICoordinatePoint ICloneable Inherited Members object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Constructors CoordinatePoint(Coordinate) 指定されたCoordinateのCoordinatePoint クラスの新しいインスタンスを初期化します。 public CoordinatePoint(Coordinate point) Parameters point Coordinate CoordinatePointを生成するCoordinate CoordinatePoint(CoordinatePoint) 指定されたCoordinatePointと同じ値を持ったCoordinateのCoordinatePoint クラスの新しいインスタンスを初期化します。 public CoordinatePoint(CoordinatePoint point) Parameters point CoordinatePoint CoordinatePointを生成するCoordinatePoint CoordinatePoint(double, double) 指定されたordinatesから 2 次元CoordinateのCoordinatePoint クラスの新しいインスタンスを初期化します。 public CoordinatePoint(double x, double y) Parameters x double 2 次元CoordinatePointを生成するX座標 y double 2 次元CoordinatePointを生成するY座標 CoordinatePoint(double, double, double) 指定されたordinatesから３次元CoordinateのCoordinatePoint クラスの新しいインスタンスを初期化します。 public CoordinatePoint(double x, double y, double z) Parameters x double 3 次元CoordinatePointを生成するX座標 y double 3 次元CoordinatePointを生成するY座標 z double 3 次元CoordinatePointを生成するZ座標 CoordinatePoint(double[]) ordinateの配列を指定してCoordinatePoint クラスの新しいインスタンスを初期化します。 ordinateの配列はコピーされます。 public CoordinatePoint(double[] ord) Parameters ord double[] このCoordinatePointを生成する配列 CoordinatePoint(int) 次元を指定する値を指定してCoordinatePoint クラスの新しいインスタンスを初期化します。 public CoordinatePoint(int numDim) Parameters numDim int 次元を指定する値 Properties Dimension このCoordinatePointオブジェクトの次元を取得します。 public int Dimension { get; } Property Value int このCoordinatePointオブジェクトの次元 Ordinate このCoordinatePointオブジェクトの座標を取得します。 public double[] Ordinate { get; } Property Value double[] このCoordinatePointオブジェクトの座標 Remarks Ordinate[0]がX座標、Ordinate[1]がY座標、Ordinate[2]がZ座標を表します。 Methods Clone() このCoordinatePointのコピーを返します。 public object Clone() Returns object コピーされた結果のCoordinatePoint Equals(object) このCoordinatePointと指定されたオブジェクトを比較します。 public override bool Equals(object obj) Parameters obj object このCoordinatePointと比較する対象のCoordinatePoint Returns bool 比較結果が等しければtrueを、そうでなければfalseを返します。 GetHashCode() このCoordinatePointに対するハッシュ値を取得します。 この値は同じクラスの異なるインプリメンテーション間で一貫しつづける必要はありません。 public override int GetHashCode() Returns int 取得されたハッシュ値 GetOrdinate(int) 指定された次元の座標を取得します。 public double GetOrdinate(int dimension) Parameters dimension int 取得したい次元 Returns double 指定された次元の座標値。 Remarks 例えば次元を 1 にした場合は x 値。次元を 2 にした場合は y 値を返します。 SetLocation(Coordinate) このCoordinateを引数で指定されたCoordinateに設定します。 このCoordinateは 2 次元でなくてはなりません。 public void SetLocation(Coordinate point) Parameters point Coordinate CoordinatePointに設定したい座標を持ったCoordinate SetLocation(ICoordinatePoint) このCoordinateを引数で指定されたCoordinatePointに設定します。 public void SetLocation(ICoordinatePoint point) Parameters point ICoordinatePoint このCoordinatePointのための新しいCoordinate SetOrdinate(int, double) 指定された次元の座標を設定します。 public void SetOrdinate(int dimension, double value) Parameters dimension int 設定する次元 value double 設定する次元に代入したい値 ToCoordinate() このCoordinatePointと同じ値を持ったCoordinateに変換します。 public Coordinate ToCoordinate() Returns Coordinate このCoordinatePointと同じ値を持ったCoordinate ToString() このCoordinatePointを文字列表現したものを返します。 文字列は、通常はプロセスをデバッグするために提供されます。 public override string ToString() Returns string CoordinatePointの文字列表現 See Also ICoordinatePoint"
  },
  "api/MapQuest.Coordinates.CoordinateType.html": {
    "href": "api/MapQuest.Coordinates.CoordinateType.html",
    "title": "Enum CoordinateType | mysite",
    "keywords": "Enum CoordinateType Namespace MapQuest.Coordinates Assembly MapQuest.Coordinates.dll このライブラリで表現されるCoordinateの種類を表します。 public enum CoordinateType : short Fields Custom = 10 ユーザーが定義，またはカスタマイズできるCoordinateです。 Default = 1 特別な情報を含まない通常のCoordinateです。 Flagged = 3 あるポイントが可視可能かどうかを判断するプロパティの情報を含むCoordinateです。 Measured = 2 Shapefileフォーマットで使用されるのと同様な、任意の計算結果を含むCoordinateです。 Tagged = 4 特別なタグの情報を含むタグ付きのCoordinateです。"
  },
  "api/MapQuest.Coordinates.Dimension.html": {
    "href": "api/MapQuest.Coordinates.Dimension.html",
    "title": "Struct Dimension | mysite",
    "keywords": "Struct Dimension Namespace MapQuest.Coordinates Assembly MapQuest.Coordinates.dll 寸法を扱う構造体を示します。 public struct Dimension Inherited Members object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Constructors Dimension(Coordinate) Coordinate を指定して Dimension クラスの新しいインスタンスを作成します。 public Dimension(Coordinate pt) Parameters pt Coordinate Dimension を生成する Coordinate Dimension(Dimension) Dimension を指定して Dimension クラスの新しいインスタンスを作成します。 public Dimension(Dimension size) Parameters size Dimension 生成する Dimension の大きさを指定する Dimension Dimension(double, double) 縦幅と横幅を指定してを指定して Dimension クラスの新しいインスタンスを作成します。 public Dimension(double width, double height) Parameters width double 生成する Dimension の横幅 height double 生成する Dimension の縦幅 Dimension(float, float) 縦幅と横幅を指定して Dimension クラスの新しいインスタンスを作成します。 public Dimension(float width, float height) Parameters width float 生成する Dimension の横幅 height float 生成する Dimension の縦幅 Fields Empty 空の Dimension 構造体を表します。 public static readonly Dimension Empty Field Value Dimension Properties Height この Dimension オブジェクトの縦幅を取得、設定します。 public double Height { get; set; } Property Value double この Dimension オブジェクトの縦幅 IsEmpty この Dimension オブジェクトが空であるかどうかを取得します。 public bool IsEmpty { get; } Property Value bool この Dimension オブジェクトが空であるかどうかの値 Remarks この Dimension オブジェクトが空ならばtrueを、そうでなければfalseを返します。 Width この Dimension オブジェクトの横幅を取得、設定します。 public double Width { get; set; } Property Value double この Dimension オブジェクトの横幅 Methods Equals(object) 引数のオブジェクトとこの Dimension のサイズを比較します。 public override bool Equals(object obj) Parameters obj object 比較する対象のオブジェクト Returns bool 比較した結果が等しかった場合trueを、そうでなければfalseを返します。 GetHashCode() このインスタンスのハッシュコードを返します。 public override int GetHashCode() Returns int このインスタンスのハッシュコードを返します。 ToCoordinate() この Dimension を Coordinate に変換します。 public Coordinate ToCoordinate() Returns Coordinate 変換した Coordinate 。 ToString() この Dimension の文字列表現を返します。 public override string ToString() Returns string この Dimension の文字列表現を返します。 Remarks 文字列は\"{Width= , Height= }\"の形式で表現されます。 Operators operator +(Dimension, Dimension) 指定した二つの Dimension オブジェクトの値を加算します。 public static Dimension operator +(Dimension sz1, Dimension sz2) Parameters sz1 Dimension Dimension オブジェクト sz2 Dimension Dimension オブジェクト Returns Dimension 加算した結果の Dimension オブジェクト operator ==(Dimension, Dimension) 指定した二つの Dimension オブジェクトの値が等しいかどうかを示す値を返します。 public static bool operator ==(Dimension left, Dimension right) Parameters left Dimension Dimension オブジェクト right Dimension Dimension オブジェクト Returns bool leftとrightが等しければtrue，そうでなければfalseを返します。 explicit operator Coordinate(Dimension) 指定した Dimension を Coordinate に変換します。 public static explicit operator Coordinate(Dimension size) Parameters size Dimension Dimension オブジェクト Returns Coordinate Dimension が変換された結果の Coordinate operator !=(Dimension, Dimension) 指定した二つの Dimension オブジェクトの値が異なっているかどうかを示す値を返します。 public static bool operator !=(Dimension left, Dimension right) Parameters left Dimension Dimension オブジェクト right Dimension Dimension オブジェクト Returns bool leftとrightが異なっていればtrue，そうでなければfalseを返します。 operator -(Dimension, Dimension) 指定した二つの Dimension オブジェクトの値を減算します。 public static Dimension operator -(Dimension sz1, Dimension sz2) Parameters sz1 Dimension Dimension オブジェクト sz2 Dimension Dimension オブジェクト Returns Dimension 減算した結果の Dimension オブジェクト"
  },
  "api/MapQuest.Coordinates.Envelope.html": {
    "href": "api/MapQuest.Coordinates.Envelope.html",
    "title": "Class Envelope | mysite",
    "keywords": "Class Envelope Namespace MapQuest.Coordinates Assembly MapQuest.Coordinates.dll 2 次元平面における長方形を定義します。 public class Envelope : ICloneable, ISerializable Inheritance object Envelope Implements ICloneable ISerializable Inherited Members object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Remarks これは幾何学的な(例えば最小および最大の x 座標、y 座標の値を持つような)長方形を表わすために使用されます。 Double.PositiveInfinity、または Double.NegativeInfinity を使用することにより、 Envelope が無限大あるいは負の無限大の範囲をサポートすることに注意してください。 Envelope オブジェクトが作成、または初期化される場合、その値は正確な順序に自動的にソートされます。 Constructors Envelope() 引数の指定がない場合、空の Envelope クラスの新しいインスタンスを初期化します。 public Envelope() Remarks MinX, MinY, MaxX, MaxY は 全て 非数（Double.NaN） に設定されます。 Envelope(Coordinate) 引数の Coordinate により定義された地点の Envelope クラスの新しいインスタンスを初期化します。 public Envelope(Coordinate p) Parameters p Coordinate Envelope を作成する元の Coordinate Envelope(Coordinate, Coordinate) 引数の二つの Coordinate により定義された領域の Envelope クラスの新しいインスタンスを初期化します。 public Envelope(Coordinate p1, Coordinate p2) Parameters p1 Coordinate Envelope を作成する元となる、一つ目の Coordinate p2 Coordinate Envelope を作成する元となる、もう一つの Coordinate Envelope(Coordinate, double) 中心点と拡幅値を指定して、この Envelope を初期化します。 public Envelope(Coordinate p, double inflate) Parameters p Coordinate 矩形の中心位置。 inflate double p から、上下左右に拡幅する値。 Remarks このメソッドは、矩形の中心座標と、そこから上下左右に拡幅する値 を指定して Envelope を初期化します。 例えば、p が (10, 5) 、inflate が 2 の場合、初期化される矩形の座標値は、 (minX, minY)-(maxX, maxY) 形式で (8, 3)-(12, 7) となります。 Envelope(Envelope) 引数の既存の Envelope から Envelope クラスの新しいインスタンスを初期化します。 public Envelope(Envelope env) Parameters env Envelope Envelope を作成する元の Envelope Envelope(double, double, double, double) 引数のX座標Y座標の、最小値と最大値により定義された領域の Envelope クラスの新しいインスタンスを初期化します。 public Envelope(double x1, double x2, double y1, double y2) Parameters x1 double Envelope を作成する元となるX座標1 x2 double Envelope を作成する元となるX座標2 y1 double Envelope を作成する元となるY座標1 y2 double Envelope を作成する元となるY座標2 Envelope(SerializationInfo, StreamingContext) シリアル化された情報からCoordinateを作成します。 public Envelope(SerializationInfo info, StreamingContext context) Parameters info SerializationInfo シリアル化する情報を格納するオブジェクト context StreamingContext Properties Center この Envelope オブジェクトの中心座標を取得します。 public Coordinate Center { get; } Property Value Coordinate この Envelope オブジェクトの中心座標を示す Coordinate Height この Envelope オブジェクトの最大Y座標、最小Y座標間の距離を取得します。 public virtual double Height { get; } Property Value double この Envelope オブジェクトの最大Y座標、最小Y座標間の距離 Remarks この Envelope オブジェクトの最大Y座標 - 最小Y座標を返します。もしくは、この Envelope が空の場合0を返します。 IsNormalized この Envelope オブジェクトが正規化されているかどうかを取得します。 この Envelope オブジェクトのX座標Y座標の最大値最小値が正規化されている場合、trueを返します。 public virtual bool IsNormalized { get; } Property Value bool この Envelope オブジェクトが正規化されているかどうかの値 Remarks この Envelope オブジェクトの最大X座標の方が最小X座標より大きく、かつ最大Y座標の方が最小Y座標より大きい場合、trueを返します。 IsNull この Envelope オブジェクトがnull(未定義)かどうかを示す値を取得します。 public virtual bool IsNull { get; } Property Value bool この Envelope オブジェクトがnull(未定義)かどうかを示す値。 Remarks この Envelope オブジェクトが初期化されていない、 もしくは空の Envelope の場合は 、それ以外は false 。 Max この Envelope オブジェクトの最大座標を取得します。 public virtual Coordinate Max { get; } Property Value Coordinate この Envelope オブジェクトの最大座標を示す Coordinate Remarks 最大座標の方が最小座標より小さい場合、この Envelope オブジェクトは空の Envelope ということを示します。 MaxX この Envelope オブジェクトの最大X座標を取得します。 public virtual double MaxX { get; set; } Property Value double この Envelope オブジェクトの最大X座標 Remarks 最大X座標の方が最小X座標より小さい場合、この Envelope オブジェクトは空の Envelope ということを示します。 MaxY この Envelope オブジェクトの最大Y座標を取得します。 public virtual double MaxY { get; set; } Property Value double この Envelope オブジェクトの最大Y座標 Remarks 最大Y座標の方が最小Y座標より小さい場合、この Envelope オブジェクトは空の Envelope ということを示します。 Min この Envelope オブジェクトの最小座標を取得します。 public virtual Coordinate Min { get; } Property Value Coordinate この Envelope オブジェクトの最小座標を示す Coordinate Remarks 最小座標の方が最大座標より大きい場合、この Envelope オブジェクトは空の Envelope ということを示します。 MinX この Envelope オブジェクトの最小X座標を取得します。 public virtual double MinX { get; set; } Property Value double この Envelope オブジェクトの最小X座標 Remarks 最小X座標の方が最大X座標より大きい場合、この Envelope は空の Envelope ということを示します。 MinY この Envelope オブジェクトの最小Y座標を取得します。 public virtual double MinY { get; set; } Property Value double この Envelope オブジェクトの最小Y座標 Remarks 最小Y座標の方が最大Y座標より大きい場合、この Envelope オブジェクトは空の Envelope ということを示します。 Width この Envelope オブジェクトの最大X座標、最小X座標間の距離を取得します。 public virtual double Width { get; } Property Value double この Envelope オブジェクトの最大X座標、最小X座標間の距離 Remarks この Envelope オブジェクトの最大X座標 - 最小X座標を返します。もしくは、この Envelope が空の場合0を返します。 Methods Clone() Envelope を複製します。 public object Clone() Returns object 複製された Envelope を返します。 Contains(Coordinate) Envelope が引数の Coordinate を内包している場合trueを返します。そうでなければfalseを返します。 public virtual bool Contains(Coordinate p) Parameters p Coordinate Envelope に含まれているかどうかを検査するポイント Returns bool 引数の Coordinate が Envelope の境界線上、また内側に存在している場合trueを返します。そうでなければfalseを返します。 Contains(Envelope) この Envelope が引数の Envelope を内包している場合trueを返します。そうでなければfalseを返します。 public virtual bool Contains(Envelope other) Parameters other Envelope この Envelope に含まれているかどうかを検査したい Envelope Returns bool 引数の Envelope が Envelope の境界線上、また内側に存在している場合trueを返します。そうでなければfalseを返します。 Contains(double, double) Envelope が引数のX座標Y座標を内包している場合trueを返します。そうでなければfalseを返します。 public virtual bool Contains(double x, double y) Parameters x double Envelope に含まれているかどうかを検査するポイントのX座標 y double Envelope に含まれているかどうかを検査するポイントのY座標 Returns bool 引数のX座標Y座標が Envelope の境界線上、また内側に存在している場合trueを返します。そうでなければfalseを返します。 Distance(Envelope) この Envelope と引数の Envelope との最短距離を計算します。 public virtual double Distance(Envelope env) Parameters env Envelope この Envelope と最短距離を求めたい Envelope Returns double Envelope 間の最短距離を返します。 Remarks Envelope 同士が重複している場合、距離は0となります。そうでなければ、距離は最も接近しているポイント間のユークリッド距離を示します。 Equals(object) Envelope 同士の比較を行います。 public override bool Equals(object other) Parameters other object 比較する対象の Envelope Returns bool Envelope の最小X座標、最大X座標、最小Y座標、最大Y座標が、それぞれ全て等しかった場合trueを返します。そうでなければfalseを返します。 ExpandToInclude(Coordinate) 引数の Coordinate の座標(p.x, p.y)を含むように、 Envelope の境界を拡大させます。 Coordinate の座標(p.x, p.y)が既に境界上、あるいはその境界内にある場合、何も行いません。 public virtual void ExpandToInclude(Coordinate p) Parameters p Coordinate 最小座標を減少、最大座標を増加させるX座標、Y座標を持った Coordinate ExpandToInclude(Envelope) 引数の Envelope を含むように、 Envelope の境界を拡大させます。引数の Envelope が既に境界上、あるいはその境界内にある場合、何も行いません。 public virtual void ExpandToInclude(Envelope other) Parameters other Envelope 融合する Envelope ExpandToInclude(double, double) 引数の(x,y)を含むように、 Envelope の境界を拡大させます。(x,y)が既に境界上、あるいはその境界内にある場合、何も行いません。 public virtual void ExpandToInclude(double x, double y) Parameters x double 最小X座標を減少、最大X座標を増加させる値 y double 最小Y座標を減少、最大Y座標を増加させる値 GetHashCode() Envelope の最小X座標、最大X座標、最小Y座標、最大Y座標を元にハッシュ値を生成します。 public override int GetHashCode() Returns int 生成されたハッシュ値を返します。 GetObjectData(SerializationInfo, StreamingContext) オブジェクトをシリアル化します。 public void GetObjectData(SerializationInfo info, StreamingContext context) Parameters info SerializationInfo シリアル化する情報を格納するオブジェクト context StreamingContext Inflate(double) この Envelope を膨張させます。 public void Inflate(double cxy) Parameters cxy double Envelope を膨張させたい値 Remarks X座標、Y座標ともに、cxyほど膨張されます。 Inflate(double, double) この Envelope を引数の(cx,cy)ほど、膨張させます。 public void Inflate(double cx, double cy) Parameters cx double Envelope を膨張させたいX値 cy double Envelope を膨張させたいY値 Remarks X座標はdx、Y座標はdyほど膨張されます。 Initialize() null(未定義)の状態として初期化します。 public virtual void Initialize() Remarks MinX, MinY, MaxX, MaxY は 全て 非数（Double.NaN） に設定されます。 Initialize(Coordinate) 引数の Coordinate により定義されたポイントに Envelope を初期化します。 public virtual void Initialize(Coordinate p) Parameters p Coordinate Envelope を初期化する元の Coordinate Initialize(Coordinate, Coordinate) 引数の二つの Coordinate により定義された領域に Envelope を初期化します。 public virtual void Initialize(Coordinate p1, Coordinate p2) Parameters p1 Coordinate Envelope を初期化する元となる、最初の Coordinate p2 Coordinate Envelope を初期化する元となる、もう一つの Coordinate Initialize(Coordinate, double) 中心点と拡幅値を指定して、この Envelope を初期化します。 public virtual void Initialize(Coordinate p, double inflate) Parameters p Coordinate 矩形の中心位置。 inflate double p から、上下左右に拡幅する値。 Remarks このメソッドは、矩形の中心座標と、そこから上下左右に拡幅する値 を指定して Envelope を初期化します。 例えば、p が (10, 5) 、inflate が 2 の場合、初期化される矩形の座標値は、 (minX, minY)-(maxX, maxY) 形式で (8, 3)-(12, 7) となります。 Initialize(Envelope) 引数の既存の Envelope にこの Envelope を初期化します。 public virtual void Initialize(Envelope env) Parameters env Envelope Envelope を初期化する元の Envelope Initialize(double, double, double, double) 引数のX座標Y座標の、最小値と最大値により定義された領域に Envelope を初期化します。 public virtual void Initialize(double x1, double x2, double y1, double y2) Parameters x1 double Envelope を初期化する元となるX座標1 x2 double Envelope を初期化する元となるX座標2 y1 double Envelope を初期化する元となるY座標1 y2 double Envelope を初期化する元となるY座標2 Intersection(Envelope, Envelope) env1 と env2 の交差部分を 示す Envelope を返します。 public static Envelope Intersection(Envelope env1, Envelope env2) Parameters env1 Envelope 1つ目の Envelope 。 env2 Envelope 2つ目の Envelope 。 Returns Envelope env1 と env2 の交差部分を 示す Envelope 。交差部分がない場合は null 。 Intersects(Coordinate) 引数の Coordinate がこの Envelope と交差するかどうかを検査します。 public virtual bool Intersects(Coordinate p) Parameters p Coordinate 交差しているかどうかを検査する Coordinate Returns bool Coordinate 交差する場合trueを、そうでなければfalseを返します。 Intersects(Coordinate, Coordinate, Coordinate) 引数の Coordinate qがp1-p2によって定義された Envelope と交差するかどうかを検査します。 public static bool Intersects(Coordinate p1, Coordinate p2, Coordinate q) Parameters p1 Coordinate Envelope を定義するある極値ポイント p2 Coordinate Envelope を定義するp1とは別の極値ポイント q Coordinate 交差しているかどうかを検査するポイント Returns bool p1-p2から定義された Envelope とポイントqが交差する場合trueを、そうでなければfalseを返します。 Intersects(Coordinate, Coordinate, Coordinate, Coordinate) 引数のq1-q2によって定義された Envelope Qがp1-p2によって定義された Envelope Pと重複、交差するかどうかを検査します。 public static bool Intersects(Coordinate p1, Coordinate p2, Coordinate q1, Coordinate q2) Parameters p1 Coordinate Envelope Pを構成するある極値ポイント p2 Coordinate Envelope Pを構成するp1とは別の極値ポイント q1 Coordinate Envelope Qを構成するある極値ポイント q2 Coordinate Envelope Qを構成するq1とは別の極値ポイント Returns bool p1-p2から構成された Envelope Pとq1-q2から定義された Envelope Qが重複、交差する場合trueを、そうでなければfalseを返します。 Intersects(Envelope) 引数の Envelope がこの Envelope と重複、または交差するかどうかを検査します。 public virtual bool Intersects(Envelope other) Parameters other Envelope 重複、交差しているかどうかを検査する Envelope Returns bool Envelope が重複、交差する場合trueを、そうでなければfalseを返します。 Intersects(double, double) 指定された座標が交差するかどうかを検査します。 public virtual bool Intersects(double x, double y) Parameters x double 交差するかどうかを検査する x 座標。 y double 交差するかどうかを検査する y 座標。 Returns bool 指定された座標が交差する場合は true 。 それ以外の場合は false 。 Normalize() この Envelope の示す長方形が確実に( lowerLeft, upperRight )の形式となるように正規化します。 public void Normalize() Remarks 最小X座標の方が最大X座標より大きい場合、もしくは最小Y座標の方が最大Y座標より大きい場合には，それぞれ最小座標と最大座標を入れ替えます。 ReflectOrigin() この Envelope を原点を中心に反転します。 public void ReflectOrigin() Remarks この Envelope のX座標、Y座標がそれぞれ反転されます。 ReflectXAxis() この Envelope をX軸を中心に反転します。 public void ReflectXAxis() Remarks この Envelope のY座標が反転されます。 ReflectYAxis() この Envelope をY軸を中心に反転します。 public void ReflectYAxis() Remarks この Envelope のX座標が反転されます。 Scale(double, double) このEnvelopeの縮尺を変更します。 public void Scale(double sx, double sy) Parameters sx double Envelope のX座標に掛ける倍率 sy double Envelope のY座標に掛ける倍率 SetToNull() この Envelope を null(未定義) の状態にします。 public virtual void SetToNull() Remarks MinX, MinY, MaxX, MaxY は 全て 非数（Double.NaN） に設定されます。 ToString() Env[ 最小X座標 : 最大X座標 , 最小Y座標 : 最大Y座標 ]の形式で文字列を返します。 public override string ToString() Returns string Env[ 最小X座標 : 最大X座標 , 最小Y座標 : 最大Y座標 ]の形式で文字列を返します。 Translate(Coordinate) この Envelope を引数の Coordinate の座標ほど、平行移動します。 public void Translate(Coordinate by) Parameters by Coordinate Envelope を平行移動させたい座標の値を持った Coordinate Translate(double, double) この Envelope を引数の(dx,dy)ほど、平行移動します。 public void Translate(double dx, double dy) Parameters dx double Envelope を平行移動させたいXの値 dy double Envelope を平行移動させたいYの値"
  },
  "api/MapQuest.Coordinates.FlaggedCoordinate.html": {
    "href": "api/MapQuest.Coordinates.FlaggedCoordinate.html",
    "title": "Class FlaggedCoordinate | mysite",
    "keywords": "Class FlaggedCoordinate Namespace MapQuest.Coordinates Assembly MapQuest.Coordinates.dll あるポイントが可視状態かどうかの情報が付与された座標管理をカプセル化したインターフェースを提供します。 public class FlaggedCoordinate : Coordinate, ICoordinatePoint, ICloneable, IComparable, ISerializable Inheritance object Coordinate FlaggedCoordinate Implements ICoordinatePoint ICloneable IComparable ISerializable Inherited Members Coordinate.SetCoordinate(Coordinate) Coordinate.SetCoordinate(float, float) Coordinate.SetCoordinate(double, double) Coordinate.Equals(object) Coordinate.ToString() Coordinate.MakePrecise(PrecisionModel) Coordinate.Distance(Coordinate) Coordinate.GetHashCode() Coordinate.Rotate(double, Coordinate) Coordinate.Rotate(double, double, double) Coordinate.CompareTo(object) Coordinate.GetOrdinate(int) Coordinate.SetOrdinate(int, double) Coordinate.SetLocation(ICoordinatePoint) Coordinate.X Coordinate.Y Coordinate.Dimension Coordinate.Ordinate object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Remarks このインターフェースにはあるポイントが可視状態かどうかを判定するプロパティが用意されています。 Constructors FlaggedCoordinate() 引数の指定がない場合X座標、Y座標を(0.0 , 0.0)としてFlaggedCoordinateクラスの新しいインスタンスを初期化します。 public FlaggedCoordinate() FlaggedCoordinate(FlaggedCoordinate) 引数のFlaggedCoordinateと同じ内容のFlaggedCoordinateクラスの新しいインスタンスを初期化します。 public FlaggedCoordinate(FlaggedCoordinate c) Parameters c FlaggedCoordinate コピー元のFlaggedCoordinate FlaggedCoordinate(double, double) 引数を(x,y)としてFlaggedCoordinateクラスの新しいインスタンスを初期化します。 public FlaggedCoordinate(double x, double y) Parameters x double X座標 y double Y座標 FlaggedCoordinate(double, double, FlaggedPointType) 引数を(x,y,flaggedPointType)として FlaggedCoordinate クラスの新しいインスタンスを初期化します。 public FlaggedCoordinate(double x, double y, FlaggedPointType flaggedPointType) Parameters x double X座標 y double Y座標 flaggedPointType FlaggedPointType FlaggedCoordinate の種類を示す FlaggedPointType 。 FlaggedCoordinate(double, double, bool) 引数を(x,y,visible)としてFlaggedCoordinateクラスの新しいインスタンスを初期化します。 public FlaggedCoordinate(double x, double y, bool visible) Parameters x double X座標 y double Y座標 visible bool FlaggedCoordinateが可視可能ならばtrue、そうでなければfalseを示します。 FlaggedCoordinate(double, double, bool, byte) 引数を(x,y,visible,pointtype)としてFlaggedCoordinateクラスの新しいインスタンスを初期化します。 public FlaggedCoordinate(double x, double y, bool visible, byte pointtype) Parameters x double X座標 y double Y座標 visible bool FlaggedCoordinateが可視可能ならばtrue、そうでなければfalseを示します。 pointtype byte FlaggedCoordinateが可視可能ならば0、そうでなければ点プリミティブの種別に応じた値を示します。 FlaggedCoordinate(SerializationInfo, StreamingContext) シリアル化された情報からFlaggedCoordinateを作成します。 public FlaggedCoordinate(SerializationInfo info, StreamingContext context) Parameters info SerializationInfo シリアル化する情報を格納するオブジェクト context StreamingContext Fields POINTTYPE_JUMP public static readonly int POINTTYPE_JUMP Field Value int Properties CoordinateType このFlaggedCoordinateオブジェクトのCoordinateの種類を取得します。 public override CoordinateType CoordinateType { get; } Property Value CoordinateType このFlaggedCoordinateオブジェクトのCoordinateの種類 Remarks FlaggedCoordinateのCoordinateTypeはFlaggedです。 See Also Flagged FlaggedPointType このFlaggedCoordinateオブジェクトの陰線フラグを取得、設定します。 public FlaggedPointType FlaggedPointType { get; set; } Property Value FlaggedPointType このFlaggedCoordinateオブジェクトの点プリミティブの種別の値 Remarks FlaggedCoordinateオブジェクトが可視可能ならば0、そうでなければ点プリミティブの種別に応じた値を示します。 PointType このFlaggedCoordinateオブジェクトの陰線フラグを取得、設定します。 public byte PointType { get; set; } Property Value byte このFlaggedCoordinateオブジェクトの点プリミティブの種別の値 Remarks FlaggedCoordinateオブジェクトが可視可能ならば0、そうでなければ点プリミティブの種別に応じた値を示します。 Visible このFlaggedCoordinateオブジェクトが可視可能かどうかを取得、設定します。 public bool Visible { get; set; } Property Value bool このFlaggedCoordinateオブジェクトが可視可能かどうかの値 Remarks FlaggedCoordinateオブジェクトが可視可能ならばtrue、そうでなければfalseを示します。 Methods Clone() 現在のインスタンスを複製します。 public override object Clone() Returns object 複製された FlaggedCoordinate 。 GetObjectData(SerializationInfo, StreamingContext) オブジェクトをシリアル化します。 public void GetObjectData(SerializationInfo info, StreamingContext context) Parameters info SerializationInfo シリアル化する情報を格納するオブジェクト context StreamingContext"
  },
  "api/MapQuest.Coordinates.FlaggedCoordinate3D.html": {
    "href": "api/MapQuest.Coordinates.FlaggedCoordinate3D.html",
    "title": "Class FlaggedCoordinate3D | mysite",
    "keywords": "Class FlaggedCoordinate3D Namespace MapQuest.Coordinates Assembly MapQuest.Coordinates.dll あるポイントが可視状態かどうかの情報が付与された 3 次元座標管理をカプセル化したインターフェースを提供します。 public class FlaggedCoordinate3D : Coordinate3D, ICoordinatePoint, ICloneable, IComparable, ISerializable Inheritance object Coordinate Coordinate3D FlaggedCoordinate3D Implements ICoordinatePoint ICloneable IComparable ISerializable Inherited Members Coordinate3D.SetCoordinate(Coordinate) Coordinate3D.CompareTo(object) Coordinate3D.ToString() Coordinate3D.MakePrecise(PrecisionModel) Coordinate3D.Distance(Coordinate3D) Coordinate3D.GetHashCode() Coordinate3D.GetOrdinate(int) Coordinate3D.SetOrdinate(int, double) Coordinate3D.Z Coordinate3D.Dimension Coordinate.SetCoordinate(float, float) Coordinate.SetCoordinate(double, double) Coordinate.Distance(Coordinate) Coordinate.Rotate(double, Coordinate) Coordinate.Rotate(double, double, double) Coordinate.SetLocation(ICoordinatePoint) Coordinate.X Coordinate.Y Coordinate.Ordinate object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Remarks このインターフェースにはあるポイントが可視状態かどうかを判定するプロパティが用意されています。 Constructors FlaggedCoordinate3D() 引数の指定がない場合X座標、Y座標，Z座標を(0.0 , 0.0 , 0.0)としてFlaggedCoordinate3Dクラスの新しいインスタンスを初期化します。 public FlaggedCoordinate3D() FlaggedCoordinate3D(Coordinate3D) 引数のCoordinate3Dと同じX座標,Y座標,Z座標を持ったFlaggedCoordinate3Dクラスの新しいインスタンスを初期化します。 public FlaggedCoordinate3D(Coordinate3D c) Parameters c Coordinate3D コピー元のCoordinate3D FlaggedCoordinate3D(FlaggedCoordinate3D) 引数のFlaggedCoordinate3Dと同じX座標,Y座標,Z座標を持ったFlaggedCoordinate3Dクラスの新しいインスタンスを初期化します。 public FlaggedCoordinate3D(FlaggedCoordinate3D c) Parameters c FlaggedCoordinate3D コピー元のFlaggedCoordinate3D FlaggedCoordinate3D(double, double, double) 引数を(x,y,z)としてFlaggedCoordinate3Dクラスの新しいインスタンスを初期化します。 public FlaggedCoordinate3D(double x, double y, double z) Parameters x double X座標 y double Y座標 z double Z座標 FlaggedCoordinate3D(SerializationInfo, StreamingContext) シリアル化された情報からFlaggedCoordinate3Dを作成します。 public FlaggedCoordinate3D(SerializationInfo info, StreamingContext context) Parameters info SerializationInfo シリアル化する情報を格納するオブジェクト context StreamingContext Properties CoordinateType この FlaggedCoordinate3D オブジェクトの Coordinate の種類を取得します。 public override CoordinateType CoordinateType { get; } Property Value CoordinateType この FlaggedCoordinate3D オブジェクトの Coordinate の種類 Remarks FlaggedCoordinate3D の CoordinateType は Flagged です。 See Also Flagged Visible このFlaggedCoordinate3Dオブジェクトが可視可能かどうかを取得、設定します。 public bool Visible { get; set; } Property Value bool このFlaggedCoordinate3Dオブジェクトが可視可能かどうかの値 Remarks FlaggedCoordinate3Dオブジェクトが可視可能ならばtrue、そうでなければfalseを示します。 Methods Clone() 現在のインスタンスを複製します。 public override object Clone() Returns object 複製された FlaggedCoordinate3D 。 Equals(object) オブジェクトの内容が等しい場合に真を返します。 public override bool Equals(object obj) Parameters obj object 比較するFlaggedCoordinate3D Returns bool 等価であるか GetObjectData(SerializationInfo, StreamingContext) オブジェクトをシリアル化します。 public void GetObjectData(SerializationInfo info, StreamingContext context) Parameters info SerializationInfo シリアル化する情報を格納するオブジェクト context StreamingContext"
  },
  "api/MapQuest.Coordinates.FlaggedPointType.html": {
    "href": "api/MapQuest.Coordinates.FlaggedPointType.html",
    "title": "Enum FlaggedPointType | mysite",
    "keywords": "Enum FlaggedPointType Namespace MapQuest.Coordinates Assembly MapQuest.Coordinates.dll public enum FlaggedPointType : byte Fields Hidden = 1 HideToChild = 4 隠線フラグ。現在サポートしていません。 HideToJunior = 2 隠線フラグ。現在サポートしていません。 HideToParent = 5 隠線フラグ。現在サポートしていません。 HideToSenior = 3 隠線フラグ。現在サポートしていません。 JumpToLeft = 7 ジャンプ線(左) JumpToRight = 6 ジャンプ線(右) Visible = 0"
  },
  "api/MapQuest.Coordinates.ICoordinateCollection.html": {
    "href": "api/MapQuest.Coordinates.ICoordinateCollection.html",
    "title": "Interface ICoordinateCollection | mysite",
    "keywords": "Interface ICoordinateCollection Namespace MapQuest.Coordinates Assembly MapQuest.Coordinates.dll Coordinateの要素の強く型付けされたコレクションのサイズ、列挙子、および同期方法を定義します。 public interface ICoordinateCollection : IEnumerable<Coordinate>, IEnumerable Remarks ICoordinateCollectionは、Coordinateの要素のための強く型付けされたICollectionを提供します。 Properties Count ICoordinateCollectionオブジェクトに含まれている要素の数を取得します。 int Count { get; } Property Value int ICoordinateCollectionオブジェクトに含まれている要素の数 Remarks 詳細はICollection.Countを参照してください。 IsSynchronized ICoordinateCollectionオブジェクトに対するアクセスが同期させられるかどうか(スレッドセーフ)の値を取得します。 bool IsSynchronized { get; } Property Value bool true もし、ICoordinateCollectionオブジェクトに対するアクセスが同期可能(スレッドセーフ）の場合; そうでなければfalseを返します。初期値はfalseです。 Remarks 詳細はICollection.IsSynchronizedを参照してください。 SyncRoot ICoordinateCollectionオブジェクトに対するアクセスを同期させるために使用することができるオブジェクトを取得します。 object SyncRoot { get; } Property Value object ICoordinateCollectionオブジェクトに対するアクセスを同期させるために使用することができるオブジェクト Remarks 詳細はICollection.SyncRootを参照してください。 Methods CopyTo(Coordinate[], int) ICoordinateCollection全体をCoordinateの要素の 1 次元配列に、指定されたインデックスからコピーします。 void CopyTo(Coordinate[] array, int arrayIndex) Parameters array Coordinate[] ICoordinateCollectionからCoordinateの要素をコピーする目的の 1 次元配列。配列は 0 から始まるインデックスで始めなければならない。 arrayIndex int コピーを開始する配列。配列のインデックスは0から始まる。 Remarks 詳細はICollection.CopyToを参照してください。 Exceptions ArgumentNullException 配列がNULL参照されたとき ArgumentOutOfRangeException arrayIndexが0未満 ArgumentException arrayIndexが配列の長さと等しい、もしくは大きかった場合 又は ICoordinateCollectionの要素の数が利用可能なarrayIndexの終端の値よりも大きかった場合 GetEnumerator() ICoordinateCollectionを反復できるICoordinateEnumeratorを返します。 ICoordinateEnumerator GetEnumerator() Returns ICoordinateEnumerator ICoordinateCollectionを反復できるICoordinateEnumerator Remarks 詳細はIEnumerable.GetEnumeratorを参照してください。"
  },
  "api/MapQuest.Coordinates.ICoordinateEnumerator.html": {
    "href": "api/MapQuest.Coordinates.ICoordinateEnumerator.html",
    "title": "Interface ICoordinateEnumerator | mysite",
    "keywords": "Interface ICoordinateEnumerator Namespace MapQuest.Coordinates Assembly MapQuest.Coordinates.dll Coordinateの要素を含んでいるコレクションの安全な反復処理をサポートします。 public interface ICoordinateEnumerator : IEnumerator<Coordinate>, IDisposable, IEnumerator Inherited Members IDisposable.Dispose() Remarks ICoordinateEnumeratorはCoordinateに強く型付けされたIEnumeratorを提供します。 Properties Current ICoordinateEnumeratorオブジェクト中の現在のCoordinateの要素を取得します。 Coordinate Current { get; } Property Value Coordinate コレクション中の現在のCoordinateの要素 Remarks 詳細はIEnumerator.Currentを参照してください。 しかし、最後にMoveNext又はResetを正常に呼んだときから、Currentは失敗するように修正されることに注意してください。 Exceptions InvalidOperationException 列挙子がコレクション中の最初の要素よりも前に位置しているか、最後の要素よりも後に位置している場合 又は 列挙子が作成された後にコレクションが修正された場合 Methods MoveNext() コレクションの次の要素に列挙子を進めます。 bool MoveNext() Returns bool true もし、列挙子が次の要素に進むことが成功した場合; false もし、列挙子がコレクションの最後の要素を過ぎた場合 Remarks 詳細はIEnumerator.MoveNextを参照してください。 Exceptions InvalidOperationException 列挙子が作成された後にコレクションが修正された場合 Reset() 列挙子を初期位置であるコレクションの最初の要素より前に設定します。 void Reset() Remarks 詳細はIEnumerator.Resetを参照してください。 Exceptions InvalidOperationException 列挙子が作成された後にコレクションが修正された場合"
  },
  "api/MapQuest.Coordinates.ICoordinateList.html": {
    "href": "api/MapQuest.Coordinates.ICoordinateList.html",
    "title": "Interface ICoordinateList | mysite",
    "keywords": "Interface ICoordinateList Namespace MapQuest.Coordinates Assembly MapQuest.Coordinates.dll インデックスによって個々にアクセス可能なCoordinateのオブジェクトを強く型付けされたコレクションを表わします。 public interface ICoordinateList : ICoordinateCollection, IEnumerable<Coordinate>, IEnumerable Inherited Members ICoordinateCollection.CopyTo(Coordinate[], int) ICoordinateCollection.GetEnumerator() ICoordinateCollection.Count ICoordinateCollection.IsSynchronized ICoordinateCollection.SyncRoot Remarks ICoordinateListは、Coordinateの要素のために強く型付けされるIListを提供します。 Properties IsFixedSize ICoordinateListオブジェクトが固定のサイズかどうかを取得します。 bool IsFixedSize { get; } Property Value bool true もし、ICoordinateListが固定のサイズの場合; そうでなければ、false。初期値はfalseです。 Remarks 詳細はIList.IsFixedSizeを参照してください。 IsReadOnly ICoordinateListオブジェクトが読み取り専用かどうかを取得します。 bool IsReadOnly { get; } Property Value bool true もし、ICoordinateListが読み取り専用の場合; そうでなければ、false。初期値はfalseです。 Remarks 詳細はIList.IsReadOnlyを参照してください。 this[int] 指定されたインデックスのCoordinateの要素を取得、設定します。 Coordinate this[int index] { get; set; } Parameters index int 取得、設定する対象の 0 から始まるインデックスのCoordinateの要素 Property Value Coordinate indexにより指定されたCoordinateの要素 Remarks 詳細はIList.thisを参照してください。 Exceptions ArgumentOutOfRangeException indexが0未満 又は indexがICoordinateCollection.Countと同じ、もしくは大きい場合 NotSupportedException そのプロパティは設定されます、そしてICoordinateListは読み取り専用となります。 Methods Add(Coordinate) ICoordinateListの終端にCoordinateの要素を追加します。 int Add(Coordinate value) Parameters value Coordinate ICoordinateListの終端に追加するCoordinate オブジェクト。この引数にはNULL参照が許可されます。 Returns int valueが追加されたICoordinateListのインデックス Remarks 詳細はIList.Addを参照してください。 Exceptions NotSupportedException ICoordinateListが読み取り専用の場合 又は ICoordinateListが固定のサイズの場合 Clear() ICoordinateListから全ての要素を削除します。 void Clear() Remarks 詳細はIList.Clearを参照してください。 Exceptions NotSupportedException ICoordinateListが読み取り専用の場合 又は ICoordinateListが固定のサイズの場合 Contains(Coordinate) ICoordinateListに指定されたCoordinateの要素が含まれているかどうかを判断します。 bool Contains(Coordinate value) Parameters value Coordinate ICoordinateListから、その位置を見つけるCoordinateオブジェクト。この引数にはNULL参照が許可されます。 Returns bool true もし、valueがICoordinateList内に見つかった場合; そうでない場合、false. Remarks 詳細はIList.Containsを参照してください。 IndexOf(Coordinate) ICoordinateListから指定されたCoordinateが最初に発見された位置を0からはじまるインデックスで返します。 int IndexOf(Coordinate value) Parameters value Coordinate ICoordinateListから、その位置を見つけるCoordinateオブジェクト。この引数にはNULL参照が許可されます。 Returns int ICoordinateListから、valueが最初に発見された0からはじまるインデックス。;見つからなかった場合、 -1. Remarks 詳細はIList.IndexOfを参照してください。 Insert(int, Coordinate) ICoordinateListに指定されたCoordinateの要素を挿入します。 void Insert(int index, Coordinate value) Parameters index int valueを挿入するべき箇所の0からはじまるインデックス value Coordinate ICoordinateListに挿入するCoordinateオブジェクト。この引数にはNULL参照が許可されます。 Remarks 詳細はIList.Insertを参照してください。 Exceptions ArgumentOutOfRangeException indexが0未満 又は indexがICoordinateCollection.Countと同じか、もしくは大きい場合 NotSupportedException ICoordinateListが読み取り専用の場合 又は ICoordinateListが固定のサイズの場合 Remove(Coordinate) ICoordinateListから指定された最初に発見されたCoordinateの要素を削除します。 void Remove(Coordinate value) Parameters value Coordinate ICoordinateListから削除するCoordinateオブジェクト。この引数にはNULL参照が許可されます。 Remarks 詳細はIList.Removeを参照してください。 Exceptions NotSupportedException ICoordinateListが読み取り専用の場合 又は ICoordinateListが固定のサイズの場合 RemoveAt(int) ICoordinateListから指定されたインデックスのCoordinateの要素を削除します。 void RemoveAt(int index) Parameters index int 要素を削除する0からはじまるインデックス Remarks 詳細はIList.RemoveAtを参照してください。 Exceptions ArgumentOutOfRangeException indexが0未満 又は indexがICoordinateCollection.Countと同じか、もしくは大きい場合 NotSupportedException ICoordinateListが読み取り専用の場合 又は ICoordinateListが固定のサイズの場合"
  },
  "api/MapQuest.Coordinates.ICoordinatePoint.html": {
    "href": "api/MapQuest.Coordinates.ICoordinatePoint.html",
    "title": "Interface ICoordinatePoint | mysite",
    "keywords": "Interface ICoordinatePoint Namespace MapQuest.Coordinates Assembly MapQuest.Coordinates.dll CoordinatePointのインターフェースを提供します。 public interface ICoordinatePoint : ICloneable Inherited Members ICloneable.Clone() Remarks 数値のリストによって定義された位置を示します。 numDimがCoordinateのポイントが属する座標系の次元である場合、そのインデックスとなるOrdinateの値は0から(numDim-1)で指定します。 Properties Dimension このCoordinatePointオブジェクトの次元を取得します。 int Dimension { get; } Property Value int このCoordinatePointオブジェクトの次元 Ordinate このCoordinatePointオブジェクトの座標を取得します。 double[] Ordinate { get; } Property Value double[] このCoordinatePointオブジェクトの座標 Remarks Ordinate[0]がX座標、Ordinate[1]がY座標、Ordinate[2]がZ座標を表します。 Methods GetOrdinate(int) 指定された次元の座標を取得します。 double GetOrdinate(int dimension) Parameters dimension int 取得したい次元 Returns double 指定された次元の座標値。 Remarks 例えば次元を 1 にした場合は x 値。次元を 2 にした場合は y 値を返します。 SetLocation(ICoordinatePoint) このCoordinateを引数で指定されたCoordinateに設定します。 void SetLocation(ICoordinatePoint point) Parameters point ICoordinatePoint CoordinatePointに設定したい座標を持ったCoordinate SetOrdinate(int, double) 指定された次元の座標を設定します。 void SetOrdinate(int Dimension, double value) Parameters Dimension int 設定する次元 value double 設定する次元に代入したい値"
  },
  "api/MapQuest.Coordinates.ICoordinateVisitor.html": {
    "href": "api/MapQuest.Coordinates.ICoordinateVisitor.html",
    "title": "Interface ICoordinateVisitor | mysite",
    "keywords": "Interface ICoordinateVisitor Namespace MapQuest.Coordinates Assembly MapQuest.Coordinates.dll Geometryクラスは、GeometryのすべてのCoordinateにCoordinateフィルタを適用する概念をサポートします。 Coordinateフィルタは、各々のCoordinateに関する情報を記録するか、あるいは幾つかの方法でCoordinateを変更することができます。 CoordinateフィルタはICoordinateVisitorのインターフェースを実装します。(ICoordinateVisitorは四人の集団のビジター・パターンの例です。) CoordinateフィルタはCoordinateの変換、セントロイドおよびエンベロープの計算、および他の多くの機能を実装するために使用することができます。 public interface ICoordinateVisitor Methods Visit(Coordinate) Coordinateを備えた、またはCoordinateの操作を実行します。 void Visit(Coordinate coord) Parameters coord Coordinate フィルタを適用する対象のCoordinate"
  },
  "api/MapQuest.Coordinates.MeasuredCoordinate.html": {
    "href": "api/MapQuest.Coordinates.MeasuredCoordinate.html",
    "title": "Class MeasuredCoordinate | mysite",
    "keywords": "Class MeasuredCoordinate Namespace MapQuest.Coordinates Assembly MapQuest.Coordinates.dll 任意の計算結果の付与が可能な座標管理をカプセル化したインターフェースを提供します。 public class MeasuredCoordinate : Coordinate, ICoordinatePoint, ICloneable, IComparable, ISerializable Inheritance object Coordinate MeasuredCoordinate Implements ICoordinatePoint ICloneable IComparable ISerializable Inherited Members Coordinate.SetCoordinate(Coordinate) Coordinate.SetCoordinate(float, float) Coordinate.SetCoordinate(double, double) Coordinate.ToString() Coordinate.MakePrecise(PrecisionModel) Coordinate.Distance(Coordinate) Coordinate.GetHashCode() Coordinate.Rotate(double, Coordinate) Coordinate.Rotate(double, double, double) Coordinate.CompareTo(object) Coordinate.GetOrdinate(int) Coordinate.SetOrdinate(int, double) Coordinate.SetLocation(ICoordinatePoint) Coordinate.X Coordinate.Y Coordinate.Dimension Coordinate.Ordinate object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Remarks このインターフェースには任意の計算結果の付与が可能なプロパティが用意されています。 Constructors MeasuredCoordinate() 引数の指定がない場合X座標、Y座標を(0.0 , 0.0)としてMeasuredCoordinateクラスの新しいインスタンスを初期化します。 public MeasuredCoordinate() MeasuredCoordinate(MeasuredCoordinate) 引数のMeasuredCoordinateと同じ内容のMeasuredCoordinateクラスの新しいインスタンスを初期化します。 public MeasuredCoordinate(MeasuredCoordinate c) Parameters c MeasuredCoordinate コピー元のMeasuredCoordinate MeasuredCoordinate(double, double) 引数を(x,y)としてMeasuredCoordinateクラスの新しいインスタンスを初期化します。 public MeasuredCoordinate(double x, double y) Parameters x double X座標 y double Y座標 MeasuredCoordinate(double, double, double) 引数を(x,y,measure)としてMeasuredCoordinateクラスの新しいインスタンスを初期化します。 public MeasuredCoordinate(double x, double y, double measure) Parameters x double X座標 y double Y座標 measure double 任意の計算結果 MeasuredCoordinate(SerializationInfo, StreamingContext) シリアル化された情報からMeasuredCoordinateを作成します。 public MeasuredCoordinate(SerializationInfo info, StreamingContext context) Parameters info SerializationInfo シリアル化する情報を格納するオブジェクト context StreamingContext Properties CoordinateType このMeasuredCoordinateオブジェクトのCoordinateの種類を取得します。 public override CoordinateType CoordinateType { get; } Property Value CoordinateType このMeasuredCoordinateオブジェクトのCoordinateの種類 Remarks MeasuredCoordinateのCoordinateTypeはMeasuredです。 See Also Measured Measure このMeasuredCoordinateオブジェクトの任意の計算結果を取得、設定します。 public double Measure { get; set; } Property Value double このMeasuredCoordinateオブジェクトの任意の計算結果 Methods Clone() 現在のインスタンスを複製します。 public override object Clone() Returns object 複製された MeasuredCoordinate 。 Equals(object) オブジェクトの内容が等しい場合に真を返します。 public override bool Equals(object obj) Parameters obj object 比較するMeasuredCoordinate Returns bool 等価であるか GetObjectData(SerializationInfo, StreamingContext) オブジェクトをシリアル化します。 public void GetObjectData(SerializationInfo info, StreamingContext context) Parameters info SerializationInfo シリアル化する情報を格納するオブジェクト context StreamingContext"
  },
  "api/MapQuest.Coordinates.MeasuredCoordinate3D.html": {
    "href": "api/MapQuest.Coordinates.MeasuredCoordinate3D.html",
    "title": "Class MeasuredCoordinate3D | mysite",
    "keywords": "Class MeasuredCoordinate3D Namespace MapQuest.Coordinates Assembly MapQuest.Coordinates.dll 任意の計算結果の付与が可能な 3 次元座標管理をカプセル化したインターフェースを提供します。 public class MeasuredCoordinate3D : Coordinate3D, ICoordinatePoint, ICloneable, IComparable, ISerializable Inheritance object Coordinate Coordinate3D MeasuredCoordinate3D Implements ICoordinatePoint ICloneable IComparable ISerializable Inherited Members Coordinate3D.SetCoordinate(Coordinate) Coordinate3D.CompareTo(object) Coordinate3D.ToString() Coordinate3D.MakePrecise(PrecisionModel) Coordinate3D.Distance(Coordinate3D) Coordinate3D.GetHashCode() Coordinate3D.GetOrdinate(int) Coordinate3D.SetOrdinate(int, double) Coordinate3D.Z Coordinate3D.Dimension Coordinate.SetCoordinate(float, float) Coordinate.SetCoordinate(double, double) Coordinate.Distance(Coordinate) Coordinate.Rotate(double, Coordinate) Coordinate.Rotate(double, double, double) Coordinate.SetLocation(ICoordinatePoint) Coordinate.X Coordinate.Y Coordinate.Ordinate object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Remarks このインターフェースには任意の計算結果の付与が可能なプロパティが用意されています。 Constructors MeasuredCoordinate3D() 引数の指定がない場合X座標、Y座標，Z座標を(0.0 , 0.0 , 0.0)としてMeasuredCoordinate3Dクラスの新しいインスタンスを初期化します。 public MeasuredCoordinate3D() MeasuredCoordinate3D(Coordinate3D) 引数のCoordinate3Dと同じX座標,Y座標,Z座標を持ったMeasuredCoordinate3Dクラスの新しいインスタンスを初期化します。 public MeasuredCoordinate3D(Coordinate3D c) Parameters c Coordinate3D コピー元のCoordinate3D MeasuredCoordinate3D(MeasuredCoordinate3D) 引数のMeasuredCoordinate3Dと同じX座標,Y座標,Z座標を持ったMeasuredCoordinate3Dクラスの新しいインスタンスを初期化します。 public MeasuredCoordinate3D(MeasuredCoordinate3D c) Parameters c MeasuredCoordinate3D コピー元のMeasuredCoordinate3D MeasuredCoordinate3D(double, double, double) 引数を(x,y,z)としてMeasuredCoordinate3Dクラスの新しいインスタンスを初期化します。 public MeasuredCoordinate3D(double x, double y, double z) Parameters x double X座標 y double Y座標 z double Z座標 MeasuredCoordinate3D(SerializationInfo, StreamingContext) シリアル化された情報からMeasuredCoordinate3Dを作成します。 public MeasuredCoordinate3D(SerializationInfo info, StreamingContext context) Parameters info SerializationInfo シリアル化する情報を格納するオブジェクト context StreamingContext Properties CoordinateType この MeasuredCoordinate3D オブジェクトの Coordinate の種類を取得します。 public override CoordinateType CoordinateType { get; } Property Value CoordinateType この MeasuredCoordinate3Dオブジェクトの Coordinate の種類 Remarks MeasuredCoordinate3D の CoordinateType は Measured です。 See Also Measured Measure このMeasuredCoordinate3Dオブジェクトの任意の計算結果を取得、設定します。 public double Measure { get; set; } Property Value double このMeasuredCoordinate3Dオブジェクトの任意の計算結果 Methods Clone() 現在のインスタンスを複製します。 public override object Clone() Returns object 複製された MeasuredCoordinate3D 。 Equals(object) オブジェクトの内容が等しい場合に真を返します。 public override bool Equals(object obj) Parameters obj object 比較するMeasuredCoordinate3D Returns bool 等価であるか GetObjectData(SerializationInfo, StreamingContext) オブジェクトをシリアル化します。 public void GetObjectData(SerializationInfo info, StreamingContext context) Parameters info SerializationInfo シリアル化する情報を格納するオブジェクト context StreamingContext"
  },
  "api/MapQuest.Coordinates.PrecisionModel.html": {
    "href": "api/MapQuest.Coordinates.PrecisionModel.html",
    "title": "Class PrecisionModel | mysite",
    "keywords": "Class PrecisionModel Namespace MapQuest.Coordinates Assembly MapQuest.Coordinates.dll Geometry における Coordinate の PrecisionModel の仕様を定めます。 public class PrecisionModel : IComparable, ICloneable, ISerializable Inheritance object PrecisionModel Implements IComparable ICloneable ISerializable Inherited Members object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Remarks 言いかえれば、 <xref href=\"MapQuest.Coordinates.PrecisionModel\" data-throw-if-not-resolved=\"false\"></xref> は、どのような <b>Geometry</b> のインスタンスにおいても、全ての正当なポイントのグリッドを指定します。 PrecisionModel.MakePreciseメソッドは Coordinate を高精度に切り上げます。;その精度が正確に知られています。 Coordinate は Geometry において厳格であると仮定されます。 すなわち、 Coordinate は、 Geometry のために与えられた PrecisionModel に切り上げられると仮定されます。 OTSは、 Geometry を作成する前に PrecisionModel に対して、自動的に Coordinate を切り上げるルーチンを入力します。 内部オペレーションはすべて、 Coordinate が PrecisionModel に切り上げられると仮定します。 コンストラクタメソッド(ブール型のオペレーションのような)は、常に適切な PrecisionModel への座標を計算し、切り上げます。 現在、３つの型を PrecisionModel ではサポートしています: Floating[浮動小数点] - 倍精度浮動小数点を表わします。これはOTSの中で使用される初期値の PrecisionModel です。 Floating-single[単精度浮動小数点] - 単精度浮動小数点を表わします。 Fixed[固定小数点] - 小数位の定数を備えたモデルを表わします。 固定小数点モデルの小数位は、scale factorによって指定されます。 scale factorは、数が切り上げされるグリッドを指定します。 入力座標は、次の方程式による固定座標へ写像されます: MqPt.x = round( (inputPt.x * scale ) / scale MqPt.y = round( (inputPt.y * scale ) / scale 座標は、.NET倍精度価値として内部に表わされます。 .NETがIEEE-394浮動小数点標準を使用し、この精度は53ビットで提供されます。(したがって正確に表現可能な最大の整数は9,007,199,254,740,992です。)。 現在、OTSメソッドは異なった PrecisionModel 間における入力ハンドラを扱いません。 Constructors PrecisionModel() 引数の指定がない場合、初期設定の精度では浮動小数点で PrecisionModel クラスの新しいインスタンスを初期化します。 public PrecisionModel() PrecisionModel(PrecisionModel) 引数の既存の PrecisionModel をコピーして、 PrecisionModel クラスの新しいインスタンスを初期化します。 public PrecisionModel(PrecisionModel pm) Parameters pm PrecisionModel このPrecisionModelにコピーしたい既存の PrecisionModel PrecisionModel(PrecisionModelType) 引数で指定された型で PrecisionModel クラスの新しいインスタンスを初期化します。 指定された型が固定小数点の場合、初期設定ではscale factorは1に設定されます。 public PrecisionModel(PrecisionModelType modelType) Parameters modelType PrecisionModelType PrecisionModel を作成したい精度の型 PrecisionModel(double) 固定小数点の小数位を指定して PrecisionModel クラスの新しいインスタンスを初期化します。 固定小数点の座標は、正確な内部座標(それらは、scale factorにより定義されたグリッドに切り上げされる)として表わされます。 public PrecisionModel(double scale) Parameters scale double 正確な Coordinate を得るためにオフセットを引いた後の Coordinate に掛ける値。 PrecisionModel(SerializationInfo, StreamingContext) シリアル化された情報からPrecisionModelを作成します。 public PrecisionModel(SerializationInfo info, StreamingContext context) Parameters info SerializationInfo シリアル化する情報を格納するオブジェクト context StreamingContext Fields maximumPreciseValue Double型において表現可能な最大の正確な値。 IEE754によればDouble型の仮数に53ビット許可するので、値は2＾53-1と等しい。 これは、ほとんどの小数点以下16桁の数字を正確に提供します。 public const double maximumPreciseValue = 9007199254740992 Field Value double Properties IsFloating この PrecisionModel オブジェクトが浮動小数点をサポートしているかどうかを取得します。 public virtual bool IsFloating { get; } Property Value bool この PrecisionModel オブジェクトが浮動小数点をサポートしているかどうかの値 Remarks この PrecisionModel オブジェクトが浮動小数点をサポートしていればtrue，そうでなければfalseを返します。 MaximumSignificantDigits この PrecisionModel オブジェクトによって提供される有効数字の最大の数を取得します。 public virtual int MaximumSignificantDigits { get; } Property Value int この PrecisionModel オブジェクトによって提供される有効数字の最大の数 Remarks この PrecisionModel によって提供される有効数字の最大の数を返します。 正確な値を印刷する必要のあるルーチンによる使用を意図しています。 ModelType この PrecisionModel オブジェクトの型を取得します。 public virtual PrecisionModelType ModelType { get; } Property Value PrecisionModelType この PrecisionModel の型 Scale 正確な Coordinate を得るためにオフセットを引いた後の Coordinate に掛ける値を取得、設定します。 public virtual double Scale { get; set; } Property Value double 正確な Coordinate を得るためにオフセットを引いた後の Coordinate に掛ける値 Remarks PrecisionModel の型は不変であるように意図されるので、このメソッドはprivateです。 Methods Clone() 現在のインスタンスの簡易コピーを生成します。 public virtual object Clone() Returns object 複製された PrecisionModel 。 CompareTo(object) 引数で指定されたオブジェクトと、この PrecisionModel オブジェクトを比較します。 public virtual int CompareTo(object o) Parameters o object この PrecisionModel と比較したい PrecisionModel Returns int この PrecisionModel の方が小さかった場合、負の整数を返します。 同じだった場合、ゼロを返します。 引数の <xref href=\"MapQuest.Coordinates.PrecisionModel\" data-throw-if-not-resolved=\"false\"></xref> の方が大きかった場合正の整数を返します。 Remarks この PrecisionModel の有効桁の方が多く、より厳密に正確である場合、この PrecisionModel がより大きいということを示します。 その比較は、MaximumSignificantDigitsを取得し、その返り値に基づいて評価されます。 固定小数点モデルと浮動小数点モデルを比較する場合、この比較は厳密に正確ではありません; しかしながら、両方のモデルが浮動小数点モデルか固定小数点モデルのどちらかに統一された場合、この比較は正確です。 Equals(object) 引数の PrecisionModel とこの PrecisionModel が等しいかどうか調べます。 public override bool Equals(object other) Parameters other object Returns bool PrecisionModelの型とscaleが共に等しければtrueを、そうでなければfalseを返します。 GetHashCode() 特定の型のハッシュ関数として機能します。 public override int GetHashCode() Returns int GetObjectData(SerializationInfo, StreamingContext) オブジェクトをシリアル化します。 public void GetObjectData(SerializationInfo info, StreamingContext context) Parameters info SerializationInfo シリアル化する情報を格納するオブジェクト context StreamingContext MakePrecise(Coordinate) 引数の Coordinate を、この高精度グリッド PrecisionModel に切り上げます。 public virtual void MakePrecise(Coordinate coord) Parameters coord Coordinate 切り上げる元の Coordinate 。 MakePrecise(double) 引数の数値を、この高精度グリッド PrecisionModel に切り上げます。 public virtual double MakePrecise(double val) Parameters val double 切り上げる元の数値 Returns double 切り上げた数値。 ToString() [ModelType]の形式で文字列を返します。 public override string ToString() Returns string Remarks ModelTypeがFixedの場合[Fixed Scale]の形式で文字列を返します。"
  },
  "api/MapQuest.Coordinates.PrecisionModelType.html": {
    "href": "api/MapQuest.Coordinates.PrecisionModelType.html",
    "title": "Enum PrecisionModelType | mysite",
    "keywords": "Enum PrecisionModelType Namespace MapQuest.Coordinates Assembly MapQuest.Coordinates.dll Coordinate、もしくはCoordinateListに対応したPrecisionModelの型を表します。 public enum PrecisionModelType : short Fields Custom = 4 CustomはカスタマイズされたPrecisionModelを示します。 Fixed = 1 Fixedは、Coordinateが定数の小数位を持っていることを示します。 小数位の数はscale factorのlog10によって決定されます。 Floating = 2 Floatingは、.NETの標準の倍精度浮動小数点表現(IEEE-754標準に基づいた)に相当します。 FloatingSingle = 3 FloatingSingleは、.NETの標準の単精度浮動小数点表現(IEEE-754標準に基づいた)に相当します。"
  },
  "api/MapQuest.Coordinates.Transforms.AffineAxisInfo.html": {
    "href": "api/MapQuest.Coordinates.Transforms.AffineAxisInfo.html",
    "title": "Struct AffineAxisInfo | mysite",
    "keywords": "Struct AffineAxisInfo Namespace MapQuest.Coordinates.Transforms Assembly MapQuest.Coordinates.dll public struct AffineAxisInfo Inherited Members object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Constructors AffineAxisInfo(AffineAxisOrientation, AffineAxisOrientation) public AffineAxisInfo(AffineAxisOrientation horizontal, AffineAxisOrientation vertical) Parameters horizontal AffineAxisOrientation vertical AffineAxisOrientation Properties Horizontal public AffineAxisOrientation Horizontal { get; set; } Property Value AffineAxisOrientation Screen public static AffineAxisInfo Screen { get; } Property Value AffineAxisInfo Vertical public AffineAxisOrientation Vertical { get; set; } Property Value AffineAxisOrientation World public static AffineAxisInfo World { get; } Property Value AffineAxisInfo Methods Equals(AffineAxisInfo) public bool Equals(AffineAxisInfo obj) Parameters obj AffineAxisInfo Returns bool Equals(object) public override bool Equals(object obj) Parameters obj object Returns bool GetHashCode() public override int GetHashCode() Returns int ToString() public override string ToString() Returns string Operators operator ==(AffineAxisInfo, AffineAxisInfo) public static bool operator ==(AffineAxisInfo axisInfo1, AffineAxisInfo axisInfo2) Parameters axisInfo1 AffineAxisInfo axisInfo2 AffineAxisInfo Returns bool operator !=(AffineAxisInfo, AffineAxisInfo) public static bool operator !=(AffineAxisInfo axisInfo1, AffineAxisInfo axisInfo2) Parameters axisInfo1 AffineAxisInfo axisInfo2 AffineAxisInfo Returns bool"
  },
  "api/MapQuest.Coordinates.Transforms.AffineAxisOrientation.html": {
    "href": "api/MapQuest.Coordinates.Transforms.AffineAxisOrientation.html",
    "title": "Enum AffineAxisOrientation | mysite",
    "keywords": "Enum AffineAxisOrientation Namespace MapQuest.Coordinates.Transforms Assembly MapQuest.Coordinates.dll public enum AffineAxisOrientation : short Fields Down = 2 Left = 3 None = 0 Right = 4 Up = 1"
  },
  "api/MapQuest.Coordinates.Transforms.AffineOrder.html": {
    "href": "api/MapQuest.Coordinates.Transforms.AffineOrder.html",
    "title": "Enum AffineOrder | mysite",
    "keywords": "Enum AffineOrder Namespace MapQuest.Coordinates.Transforms Assembly MapQuest.Coordinates.dll public enum AffineOrder : short Fields Append = 1 Prepend = 2"
  },
  "api/MapQuest.Coordinates.Transforms.AffineTransform.html": {
    "href": "api/MapQuest.Coordinates.Transforms.AffineTransform.html",
    "title": "Struct AffineTransform | mysite",
    "keywords": "Struct AffineTransform Namespace MapQuest.Coordinates.Transforms Assembly MapQuest.Coordinates.dll public struct AffineTransform : ICoordinateVisitor, ICloneable Implements ICoordinateVisitor ICloneable Inherited Members object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Constructors AffineTransform(Coordinate, Coordinate) public AffineTransform(Coordinate p1, Coordinate q1) Parameters p1 Coordinate q1 Coordinate AffineTransform(Coordinate, Coordinate, Coordinate, Coordinate) public AffineTransform(Coordinate p1, Coordinate q1, Coordinate p2, Coordinate q2) Parameters p1 Coordinate q1 Coordinate p2 Coordinate q2 Coordinate AffineTransform(Coordinate, Coordinate, Coordinate, Coordinate, Coordinate, Coordinate) public AffineTransform(Coordinate p1, Coordinate q1, Coordinate p2, Coordinate q2, Coordinate p3, Coordinate q3) Parameters p1 Coordinate q1 Coordinate p2 Coordinate q2 Coordinate p3 Coordinate q3 Coordinate AffineTransform(AffineTransform) public AffineTransform(AffineTransform affine) Parameters affine AffineTransform AffineTransform(double, double, double, double, double, double) public AffineTransform(double a11, double a12, double a21, double a22, double a13, double a23) Parameters a11 double a12 double a21 double a22 double a13 double a23 double Properties Determinant public double Determinant { get; } Property Value double Elements public double[] Elements { get; set; } Property Value double[] HasInverse public bool HasInverse { get; } Property Value bool Identity public static AffineTransform Identity { get; } Property Value AffineTransform IsIdentity public bool IsIdentity { get; } Property Value bool ScaleX public double ScaleX { get; set; } Property Value double ScaleY public double ScaleY { get; set; } Property Value double ShearX public double ShearX { get; set; } Property Value double ShearY public double ShearY { get; set; } Property Value double TranslateX public double TranslateX { get; set; } Property Value double TranslateY public double TranslateY { get; set; } Property Value double Methods Clone() public object Clone() Returns object CreateRotation(double) public static AffineTransform CreateRotation(double angle) Parameters angle double Returns AffineTransform CreateRotationAt(double, double, double) public static AffineTransform CreateRotationAt(double angle, double x, double y) Parameters angle double x double y double Returns AffineTransform CreateScaling(double, double) public static AffineTransform CreateScaling(double scaleX, double scaleY) Parameters scaleX double scaleY double Returns AffineTransform CreateShearing(double, double) public static AffineTransform CreateShearing(double shearX, double shearY) Parameters shearX double shearY double Returns AffineTransform CreateSkew(double, double) public static AffineTransform CreateSkew(double skewX, double skewY) Parameters skewX double skewY double Returns AffineTransform CreateSkewX(double) public static AffineTransform CreateSkewX(double skewX) Parameters skewX double Returns AffineTransform CreateSkewY(double) public static AffineTransform CreateSkewY(double skewY) Parameters skewY double Returns AffineTransform CreateTranslation(double, double) public static AffineTransform CreateTranslation(double translateX, double translateY) Parameters translateX double translateY double Returns AffineTransform Equals(AffineTransform) public bool Equals(AffineTransform obj) Parameters obj AffineTransform Returns bool Equals(object) public override bool Equals(object obj) Parameters obj object Returns bool FlipX() public void FlipX() FlipY() public void FlipY() GetHashCode() public override int GetHashCode() Returns int Inverse() public AffineTransform Inverse() Returns AffineTransform Invert() public void Invert() Multiply(AffineTransform) public void Multiply(AffineTransform affine) Parameters affine AffineTransform Multiply(AffineTransform, AffineOrder) public void Multiply(AffineTransform affine, AffineOrder order) Parameters affine AffineTransform order AffineOrder Reset() public void Reset() Reset(AffineTransform) public void Reset(AffineTransform affine) Parameters affine AffineTransform Reset(double, double, double, double, double, double) public void Reset(double a11, double a12, double a13, double a21, double a22, double a23) Parameters a11 double a12 double a13 double a21 double a22 double a23 double ResetToRotation(double) public void ResetToRotation(double angle) Parameters angle double ResetToRotation(double, double, double) public void ResetToRotation(double angle, double x, double y) Parameters angle double x double y double ResetToScale(double, double) public void ResetToScale(double scaleX, double scaleY) Parameters scaleX double scaleY double ResetToShear(double, double) public void ResetToShear(double shearX, double shearY) Parameters shearX double shearY double ResetToTranslation(double, double) public void ResetToTranslation(double translateX, double translateY) Parameters translateX double translateY double Rotate(double) public void Rotate(double angle) Parameters angle double Rotate(double, AffineOrder) public void Rotate(double angle, AffineOrder order) Parameters angle double order AffineOrder RotateAt(double, Coordinate) public void RotateAt(double angle, Coordinate center) Parameters angle double center Coordinate RotateAt(double, Coordinate, AffineOrder) public void RotateAt(double angle, Coordinate center, AffineOrder order) Parameters angle double center Coordinate order AffineOrder RotateAt(double, double, double) public void RotateAt(double angle, double x, double y) Parameters angle double x double y double RotateAt(double, double, double, AffineOrder) public void RotateAt(double angle, double x, double y, AffineOrder order) Parameters angle double x double y double order AffineOrder Scale(double, double) public void Scale(double scaleX, double scaleY) Parameters scaleX double scaleY double Scale(double, double, AffineOrder) public void Scale(double scaleX, double scaleY, AffineOrder order) Parameters scaleX double scaleY double order AffineOrder ScaleAt(double, double, Coordinate) public void ScaleAt(double scaleX, double scaleY, Coordinate point) Parameters scaleX double scaleY double point Coordinate Shear(double, double) public void Shear(double shearX, double shearY) Parameters shearX double shearY double Shear(double, double, AffineOrder) public void Shear(double shearX, double shearY, AffineOrder order) Parameters shearX double shearY double order AffineOrder Skew(double, double) public void Skew(double skewX, double skewY) Parameters skewX double skewY double Skew(double, double, AffineOrder) public void Skew(double skewX, double skewY, AffineOrder order) Parameters skewX double skewY double order AffineOrder SkewX(double) public void SkewX(double skewX) Parameters skewX double SkewY(double) public void SkewY(double skewY) Parameters skewY double ToString() public override string ToString() Returns string Transform(Coordinate) public void Transform(Coordinate point) Parameters point Coordinate Transform(Coordinate[]) public void Transform(Coordinate[] points) Parameters points Coordinate[] Transform(ref double, ref double) public void Transform(ref double x, ref double y) Parameters x double y double Transform(ref float, ref float) public void Transform(ref float x, ref float y) Parameters x float y float TransformVector(Coordinate) public void TransformVector(Coordinate vector) Parameters vector Coordinate TransformVectors(Coordinate[]) public void TransformVectors(Coordinate[] vectors) Parameters vectors Coordinate[] Translate(double, double) public void Translate(double translateX, double translateY) Parameters translateX double translateY double Translate(double, double, AffineOrder) public void Translate(double translateX, double translateY, AffineOrder order) Parameters translateX double translateY double order AffineOrder Visit(Coordinate) public void Visit(Coordinate coord) Parameters coord Coordinate Operators operator ==(AffineTransform, AffineTransform) public static bool operator ==(AffineTransform transform1, AffineTransform transform2) Parameters transform1 AffineTransform transform2 AffineTransform Returns bool operator !=(AffineTransform, AffineTransform) public static bool operator !=(AffineTransform transform1, AffineTransform transform2) Parameters transform1 AffineTransform transform2 AffineTransform Returns bool operator *(AffineTransform, AffineTransform) public static AffineTransform operator *(AffineTransform transform1, AffineTransform transform2) Parameters transform1 AffineTransform transform2 AffineTransform Returns AffineTransform"
  },
  "api/MapQuest.Coordinates.Transforms.CoordinateMapping.html": {
    "href": "api/MapQuest.Coordinates.Transforms.CoordinateMapping.html",
    "title": "Class CoordinateMapping | mysite",
    "keywords": "Class CoordinateMapping Namespace MapQuest.Coordinates.Transforms Assembly MapQuest.Coordinates.dll public class CoordinateMapping : ICoordinateVisitor, ICloneable Inheritance object CoordinateMapping Implements ICoordinateVisitor ICloneable Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors CoordinateMapping() public CoordinateMapping() Properties ViewportSpaceExtents public Envelope ViewportSpaceExtents { get; set; } Property Value Envelope WorldSpaceExtents public Envelope WorldSpaceExtents { get; set; } Property Value Envelope Methods Clone() public object Clone() Returns object GetViewportSpaceExtents(ref double, ref double, ref double, ref double) public void GetViewportSpaceExtents(ref double x1, ref double y1, ref double x2, ref double y2) Parameters x1 double y1 double x2 double y2 double GetWorldSpaceExtents(ref double, ref double, ref double, ref double) public void GetWorldSpaceExtents(ref double x1, ref double y1, ref double x2, ref double y2) Parameters x1 double y1 double x2 double y2 double IsPointInWorldSpace(Coordinate) public bool IsPointInWorldSpace(Coordinate pt) Parameters pt Coordinate Returns bool IsPointInWorldSpace(double, double) public bool IsPointInWorldSpace(double x, double y) Parameters x double y double Returns bool Pan(Coordinate) public void Pan(Coordinate newCenter) Parameters newCenter Coordinate Pan(double, double) public void Pan(double newCenterX, double newCenterY) Parameters newCenterX double newCenterY double SetViewportSpaceExtents(double, double, double, double) public void SetViewportSpaceExtents(double x1, double y1, double x2, double y2) Parameters x1 double y1 double x2 double y2 double SetWorldSpaceExtents(double, double, double, double) public void SetWorldSpaceExtents(double x1, double y1, double x2, double y2) Parameters x1 double y1 double x2 double y2 double ToViewport(Coordinate) public void ToViewport(Coordinate point) Parameters point Coordinate ToViewport(ref double) public void ToViewport(ref double scalar) Parameters scalar double ToViewport(ref double, ref double) public void ToViewport(ref double x, ref double y) Parameters x double y double ToWorld(Coordinate) public void ToWorld(Coordinate point) Parameters point Coordinate ToWorld(ref double) public void ToWorld(ref double scalar) Parameters scalar double ToWorld(ref double, ref double) public void ToWorld(ref double x, ref double y) Parameters x double y double Visit(Coordinate) public void Visit(Coordinate coord) Parameters coord Coordinate ZoomBy(double) public void ZoomBy(double factor) Parameters factor double ZoomTo(double, Coordinate) public void ZoomTo(double factor, Coordinate newCenter) Parameters factor double newCenter Coordinate ZoomTo(double, double, double) public void ZoomTo(double factor, double newCenterX, double newCenterY) Parameters factor double newCenterX double newCenterY double"
  },
  "api/MapQuest.Coordinates.Transforms.GeneralMatrix.html": {
    "href": "api/MapQuest.Coordinates.Transforms.GeneralMatrix.html",
    "title": "Struct GeneralMatrix | mysite",
    "keywords": "Struct GeneralMatrix Namespace MapQuest.Coordinates.Transforms Assembly MapQuest.Coordinates.dll public struct GeneralMatrix : ICloneable Implements ICloneable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Constructors GeneralMatrix(double[], int) Construct a matrix from a one-dimensional packed array public GeneralMatrix(double[] vals, int m) Parameters vals double[] One-dimensional array of doubles, packed by columns (ala Fortran). m int Number of rows. Exceptions ArgumentException Array length must be a multiple of m. GeneralMatrix(double[][]) Construct a matrix from a 2-D array. public GeneralMatrix(double[][] A) Parameters A double[][] Two-dimensional array of doubles. Exceptions ArgumentException All rows must have the same length See Also Create(double[][]) GeneralMatrix(double[][], int, int) Construct a matrix quickly without checking arguments. public GeneralMatrix(double[][] A, int m, int n) Parameters A double[][] Two-dimensional array of doubles. m int Number of rows. n int Number of colums. GeneralMatrix(int, int) Construct an m-by-n matrix of zeros. public GeneralMatrix(int m, int n) Parameters m int Number of rows. n int Number of colums. GeneralMatrix(int, int, double) Construct an m-by-n constant matrix. public GeneralMatrix(int m, int n, double s) Parameters m int Number of rows. n int Number of colums. s double Fill the matrix with this scalar value. Properties Array Access the internal two-dimensional array. public double[][] Array { get; } Property Value double[][] Pointer to the two-dimensional array of matrix elements. ArrayCopy Copy the internal two-dimensional array. public double[][] ArrayCopy { get; } Property Value double[][] Two-dimensional array copy of matrix elements. ColumnDimension Get column dimension. public int ColumnDimension { get; } Property Value int The number of columns. ColumnPackedCopy Make a one-dimensional column packed copy of the internal array. public double[] ColumnPackedCopy { get; } Property Value double[] Matrix elements packed in a one-dimensional array by columns. RowDimension Get row dimension. public int RowDimension { get; } Property Value int The number of rows. RowPackedCopy Make a one-dimensional row packed copy of the internal array. public double[] RowPackedCopy { get; } Property Value double[] Matrix elements packed in a one-dimensional array by rows. Methods Add(GeneralMatrix) C = A + B public GeneralMatrix Add(GeneralMatrix B) Parameters B GeneralMatrix another matrix Returns GeneralMatrix A + B AddEquals(GeneralMatrix) A = A + B public GeneralMatrix AddEquals(GeneralMatrix B) Parameters B GeneralMatrix another matrix Returns GeneralMatrix A + B ArrayLeftDivide(GeneralMatrix) Element-by-element left division, C = A.\\B public GeneralMatrix ArrayLeftDivide(GeneralMatrix B) Parameters B GeneralMatrix another matrix Returns GeneralMatrix A.\\B ArrayLeftDivideEquals(GeneralMatrix) Element-by-element left division in place, A = A.\\B public GeneralMatrix ArrayLeftDivideEquals(GeneralMatrix B) Parameters B GeneralMatrix another matrix Returns GeneralMatrix A.\\B ArrayMultiply(GeneralMatrix) Element-by-element multiplication, C = A.*B public GeneralMatrix ArrayMultiply(GeneralMatrix B) Parameters B GeneralMatrix another matrix Returns GeneralMatrix A.*B ArrayMultiplyEquals(GeneralMatrix) Element-by-element multiplication in place, A = A.*B public GeneralMatrix ArrayMultiplyEquals(GeneralMatrix B) Parameters B GeneralMatrix another matrix Returns GeneralMatrix A.*B ArrayRightDivide(GeneralMatrix) Element-by-element right division, C = A./B public GeneralMatrix ArrayRightDivide(GeneralMatrix B) Parameters B GeneralMatrix another matrix Returns GeneralMatrix A./B ArrayRightDivideEquals(GeneralMatrix) Element-by-element right division in place, A = A./B public GeneralMatrix ArrayRightDivideEquals(GeneralMatrix B) Parameters B GeneralMatrix another matrix Returns GeneralMatrix A./B Clone() Clone the GeneralMatrix object. public object Clone() Returns object Copy() Make a deep copy of a matrix public GeneralMatrix Copy() Returns GeneralMatrix Create(double[][]) Construct a matrix from a copy of a 2-D array. public static GeneralMatrix Create(double[][] A) Parameters A double[][] Two-dimensional array of doubles. Returns GeneralMatrix Exceptions ArgumentException All rows must have the same length. Determinant() GeneralMatrix determinant public double Determinant() Returns double determinant GetElement(int, int) Get a single element. public double GetElement(int i, int j) Parameters i int Row index. j int Column index. Returns double A(i,j) Exceptions IndexOutOfRangeException GetMatrix(int, int, int, int) Get a submatrix. public GeneralMatrix GetMatrix(int i0, int i1, int j0, int j1) Parameters i0 int Initial row index i1 int Final row index j0 int Initial column index j1 int Final column index Returns GeneralMatrix A(i0:i1,j0:j1) Exceptions IndexOutOfRangeException Submatrix indices GetMatrix(int, int, int[]) Get a submatrix. public GeneralMatrix GetMatrix(int i0, int i1, int[] c) Parameters i0 int Initial row index i1 int Final row index c int[] Array of column indices. Returns GeneralMatrix A(i0:i1,c(:)) Exceptions IndexOutOfRangeException Submatrix indices GetMatrix(int[], int, int) Get a submatrix. public GeneralMatrix GetMatrix(int[] r, int j0, int j1) Parameters r int[] Array of row indices. j0 int Initial column index j1 int Final column index Returns GeneralMatrix A(r(:),j0:j1) Exceptions IndexOutOfRangeException Submatrix indices GetMatrix(int[], int[]) Get a submatrix. public GeneralMatrix GetMatrix(int[] r, int[] c) Parameters r int[] Array of row indices. c int[] Array of column indices. Returns GeneralMatrix A(r(:),c(:)) Exceptions IndexOutOfRangeException Submatrix indices Identity(int, int) Generate identity matrix public static GeneralMatrix Identity(int m, int n) Parameters m int Number of rows. n int Number of colums. Returns GeneralMatrix An m-by-n matrix with ones on the diagonal and zeros elsewhere. Inverse() Matrix inverse or pseudoinverse public GeneralMatrix Inverse() Returns GeneralMatrix inverse(A) if A is square, pseudoinverse otherwise. Multiply(GeneralMatrix) Linear algebraic matrix multiplication, A * B public GeneralMatrix Multiply(GeneralMatrix B) Parameters B GeneralMatrix another matrix Returns GeneralMatrix Matrix product, A * B Exceptions ArgumentException Matrix inner dimensions must agree. Multiply(double) Multiply a matrix by a scalar, C = s*A public GeneralMatrix Multiply(double s) Parameters s double scalar Returns GeneralMatrix s*A MultiplyEquals(double) Multiply a matrix by a scalar in place, A = s*A public GeneralMatrix MultiplyEquals(double s) Parameters s double scalar Returns GeneralMatrix replace A by s*A Norm1() One norm public double Norm1() Returns double maximum column sum. NormF() Frobenius norm public double NormF() Returns double sqrt of sum of squares of all elements. NormInf() Infinity norm public double NormInf() Returns double maximum row sum. Random(int, int) Generate matrix with random elements public static GeneralMatrix Random(int m, int n) Parameters m int Number of rows. n int Number of colums. Returns GeneralMatrix An m-by-n matrix with uniformly distributed random elements. SetElement(int, int, double) Set a single element. public void SetElement(int i, int j, double s) Parameters i int Row index. j int Column index. s double A(i,j). Exceptions IndexOutOfRangeException SetMatrix(int, int, int, int, GeneralMatrix) Set a submatrix. public void SetMatrix(int i0, int i1, int j0, int j1, GeneralMatrix X) Parameters i0 int Initial row index i1 int Final row index j0 int Initial column index j1 int Final column index X GeneralMatrix A(i0:i1,j0:j1) Exceptions IndexOutOfRangeException Submatrix indices SetMatrix(int, int, int[], GeneralMatrix) Set a submatrix. public void SetMatrix(int i0, int i1, int[] c, GeneralMatrix X) Parameters i0 int Initial row index i1 int Final row index c int[] Array of column indices. X GeneralMatrix A(i0:i1,c(:)) Exceptions IndexOutOfRangeException Submatrix indices SetMatrix(int[], int, int, GeneralMatrix) Set a submatrix. public void SetMatrix(int[] r, int j0, int j1, GeneralMatrix X) Parameters r int[] Array of row indices. j0 int Initial column index j1 int Final column index X GeneralMatrix A(r(:),j0:j1) Exceptions IndexOutOfRangeException Submatrix indices SetMatrix(int[], int[], GeneralMatrix) Set a submatrix. public void SetMatrix(int[] r, int[] c, GeneralMatrix X) Parameters r int[] Array of row indices. c int[] Array of column indices. X GeneralMatrix A(r(:),c(:)) Exceptions IndexOutOfRangeException Submatrix indices Solve(GeneralMatrix) Solve A*X = B public GeneralMatrix Solve(GeneralMatrix B) Parameters B GeneralMatrix right hand side Returns GeneralMatrix solution if A is square, least squares solution otherwise SolveTranspose(GeneralMatrix) Solve X*A = B, which is also A'*X' = B' public GeneralMatrix SolveTranspose(GeneralMatrix B) Parameters B GeneralMatrix right hand side Returns GeneralMatrix solution if A is square, least squares solution otherwise. Subtract(GeneralMatrix) C = A - B public GeneralMatrix Subtract(GeneralMatrix B) Parameters B GeneralMatrix another matrix Returns GeneralMatrix A - B SubtractEquals(GeneralMatrix) A = A - B public GeneralMatrix SubtractEquals(GeneralMatrix B) Parameters B GeneralMatrix another matrix Returns GeneralMatrix A - B Trace() Matrix trace. public double Trace() Returns double sum of the diagonal elements. Transpose() Matrix transpose. public GeneralMatrix Transpose() Returns GeneralMatrix A' UnaryMinus() Unary minus public GeneralMatrix UnaryMinus() Returns GeneralMatrix -A Operators operator +(GeneralMatrix, GeneralMatrix) Addition of matrices public static GeneralMatrix operator +(GeneralMatrix m1, GeneralMatrix m2) Parameters m1 GeneralMatrix m2 GeneralMatrix Returns GeneralMatrix operator *(GeneralMatrix, GeneralMatrix) Multiplication of matrices public static GeneralMatrix operator *(GeneralMatrix m1, GeneralMatrix m2) Parameters m1 GeneralMatrix m2 GeneralMatrix Returns GeneralMatrix operator -(GeneralMatrix, GeneralMatrix) Subtraction of matrices public static GeneralMatrix operator -(GeneralMatrix m1, GeneralMatrix m2) Parameters m1 GeneralMatrix m2 GeneralMatrix Returns GeneralMatrix"
  },
  "api/MapQuest.Coordinates.Transforms.Transform.html": {
    "href": "api/MapQuest.Coordinates.Transforms.Transform.html",
    "title": "Class Transform | mysite",
    "keywords": "Class Transform Namespace MapQuest.Coordinates.Transforms Assembly MapQuest.Coordinates.dll public class Transform Inheritance object Transform Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods ReflectOrigin(ref double, ref double) public static void ReflectOrigin(ref double x, ref double y) Parameters x double y double ReflectPoint(Coordinate, Coordinate) public static void ReflectPoint(Coordinate point, Coordinate about) Parameters point Coordinate about Coordinate ReflectPoint(ref double, ref double, double, double) public static void ReflectPoint(ref double x, ref double y, double ax, double ay) Parameters x double y double ax double ay double ReflectXAxis(Coordinate) public static void ReflectXAxis(Coordinate point) Parameters point Coordinate ReflectXAxis(ref double, ref double) public static void ReflectXAxis(ref double x, ref double y) Parameters x double y double ReflectXY(Coordinate3D) public static void ReflectXY(Coordinate3D point) Parameters point Coordinate3D ReflectXY(ref double, ref double, ref double) public static void ReflectXY(ref double x, ref double y, ref double z) Parameters x double y double z double ReflectXZ(Coordinate3D) public static void ReflectXZ(Coordinate3D point) Parameters point Coordinate3D ReflectXZ(ref double, ref double, ref double) public static void ReflectXZ(ref double x, ref double y, ref double z) Parameters x double y double z double ReflectYAxis(ref double, ref double) public static void ReflectYAxis(ref double x, ref double y) Parameters x double y double ReflectYZ(Coordinate3D) public static void ReflectYZ(Coordinate3D point) Parameters point Coordinate3D ReflectYZ(ref double, ref double, ref double) public static void ReflectYZ(ref double x, ref double y, ref double z) Parameters x double y double z double Rotate(Coordinate, double, Coordinate) public static void Rotate(Coordinate point, double theta, Coordinate about) Parameters point Coordinate theta double about Coordinate Rotate(Coordinate, double, double, double) public static void Rotate(Coordinate point, double theta, double xCenter, double yCenter) Parameters point Coordinate theta double xCenter double yCenter double Rotate(ref double, ref double, double, double, double) public static void Rotate(ref double x, ref double y, double theta, double ax, double ay) Parameters x double y double theta double ax double ay double RotateX(Coordinate3D, double, Coordinate3D) public static void RotateX(Coordinate3D point, double theta, Coordinate3D about) Parameters point Coordinate3D theta double about Coordinate3D RotateX(ref double, ref double, ref double, double, double, double, double) public static void RotateX(ref double x, ref double y, ref double z, double theta, double ax, double ay, double az) Parameters x double y double z double theta double ax double ay double az double RotateY(Coordinate3D, double, Coordinate3D) public static void RotateY(Coordinate3D point, double theta, Coordinate3D about) Parameters point Coordinate3D theta double about Coordinate3D RotateY(ref double, ref double, ref double, double, double, double, double) public static void RotateY(ref double x, ref double y, ref double z, double theta, double ax, double ay, double az) Parameters x double y double z double theta double ax double ay double az double RotateZ(Coordinate3D, double, Coordinate3D) public static void RotateZ(Coordinate3D point, double theta, Coordinate3D about) Parameters point Coordinate3D theta double about Coordinate3D RotateZ(ref double, ref double, ref double, double, double, double, double) public static void RotateZ(ref double x, ref double y, ref double z, double theta, double ax, double ay, double az) Parameters x double y double z double theta double ax double ay double az double Scale(Coordinate, double, double) public static void Scale(Coordinate point, double scaleX, double scaleY) Parameters point Coordinate scaleX double scaleY double Scale(Coordinate, double, double, Coordinate) public static void Scale(Coordinate point, double scaleX, double scaleY, Coordinate about) Parameters point Coordinate scaleX double scaleY double about Coordinate Scale(Coordinate3D, double, double, double, Coordinate3D) public static void Scale(Coordinate3D point, double scaleX, double scaleY, double scaleZ, Coordinate3D about) Parameters point Coordinate3D scaleX double scaleY double scaleZ double about Coordinate3D Scale(ref double, ref double, double, double, double, double) public static void Scale(ref double x, ref double y, double scaleX, double scaleY, double ax, double ay) Parameters x double y double scaleX double scaleY double ax double ay double Scale(ref double, ref double, ref double, double, double, double, double, double, double) public static void Scale(ref double x, ref double y, ref double z, double sx, double sy, double sz, double ax, double ay, double az) Parameters x double y double z double sx double sy double sz double ax double ay double az double Translate(Coordinate, Coordinate) public static void Translate(Coordinate point, Coordinate by) Parameters point Coordinate by Coordinate Translate(Coordinate, double, double) public static void Translate(Coordinate point, double dx, double dy) Parameters point Coordinate dx double dy double Translate(Coordinate3D, Coordinate3D) public static void Translate(Coordinate3D point, Coordinate3D by) Parameters point Coordinate3D by Coordinate3D Translate(ref double, ref double, double, double) public static void Translate(ref double x, ref double y, double dx, double dy) Parameters x double y double dx double dy double Translate(ref double, ref double, ref double, double, double, double) public static void Translate(ref double x, ref double y, ref double z, double dx, double dy, double dz) Parameters x double y double z double dx double dy double dz double"
  },
  "api/MapQuest.Coordinates.Transforms.html": {
    "href": "api/MapQuest.Coordinates.Transforms.html",
    "title": "Namespace MapQuest.Coordinates.Transforms | mysite",
    "keywords": "Namespace MapQuest.Coordinates.Transforms Classes CoordinateMapping Transform Structs AffineAxisInfo AffineTransform GeneralMatrix Enums AffineAxisOrientation AffineOrder"
  },
  "api/MapQuest.Coordinates.UniqueCoordinateArrayVisitor.html": {
    "href": "api/MapQuest.Coordinates.UniqueCoordinateArrayVisitor.html",
    "title": "Class UniqueCoordinateArrayVisitor | mysite",
    "keywords": "Class UniqueCoordinateArrayVisitor Namespace MapQuest.Coordinates Assembly MapQuest.Coordinates.dll Coordinateの集合を構築するICoordinateVisitorです。 UniqueCoordinateArrayVisitorは重複したCoordinateを含みません。 public class UniqueCoordinateArrayVisitor : ICoordinateVisitor Inheritance object UniqueCoordinateArrayVisitor Implements ICoordinateVisitor Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors UniqueCoordinateArrayVisitor() UniqueCoordinateArrayVisitor クラスの新しいインスタンスを初期化します。 public UniqueCoordinateArrayVisitor() Properties Coordinates 収集されたCoordinateを返します。 public virtual CoordinateList Coordinates { get; } Property Value CoordinateList このUniqueCoordinateArrayVisitorによって収集されたCoordinateを返します。 Methods Visit(Coordinate) UniqueCoordinateArrayVisitorに引数のCoordinateを追加します。 もし、引数のCoordinateが重複していた場合は、追加しません。 public virtual void Visit(Coordinate coord) Parameters coord Coordinate"
  },
  "api/MapQuest.Coordinates.html": {
    "href": "api/MapQuest.Coordinates.html",
    "title": "Namespace MapQuest.Coordinates | mysite",
    "keywords": "Namespace MapQuest.Coordinates Classes Coordinate 2 次元直交座標系で座標を格納した軽量のクラスです。 Coordinate3D 3 次元座標管理をカプセル化したインターフェースを提供します。 CoordinateArrayVisitor Geometry中の全てのCoordinateを含む配列を作成するICoordinateVisitorです。 CoordinateCountVisitor Geometry中のCoordinateの総数を数えることが可能なICoordinateVisitorです。 CoordinateException Coordinateで起こる例外を定義します。 CoordinateList Coordinateオブジェクトに強く型付けされたコレクションを定義します。 Envelope 2 次元平面における長方形を定義します。 FlaggedCoordinate あるポイントが可視状態かどうかの情報が付与された座標管理をカプセル化したインターフェースを提供します。 FlaggedCoordinate3D あるポイントが可視状態かどうかの情報が付与された 3 次元座標管理をカプセル化したインターフェースを提供します。 MeasuredCoordinate 任意の計算結果の付与が可能な座標管理をカプセル化したインターフェースを提供します。 MeasuredCoordinate3D 任意の計算結果の付与が可能な 3 次元座標管理をカプセル化したインターフェースを提供します。 PrecisionModel Geometry における Coordinate の PrecisionModel の仕様を定めます。 UniqueCoordinateArrayVisitor Coordinateの集合を構築するICoordinateVisitorです。 UniqueCoordinateArrayVisitorは重複したCoordinateを含みません。 Structs CoordinatePoint 数値のリストによって定義された位置を示します。 numDimがCoordinateのポイントが属する座標系の次元である場合、そのインデックスとなるOrdinateの値は0から(numDim-1)で指定します。 Dimension 寸法を扱う構造体を示します。 Interfaces ICoordinateCollection Coordinateの要素の強く型付けされたコレクションのサイズ、列挙子、および同期方法を定義します。 ICoordinateEnumerator Coordinateの要素を含んでいるコレクションの安全な反復処理をサポートします。 ICoordinateList インデックスによって個々にアクセス可能なCoordinateのオブジェクトを強く型付けされたコレクションを表わします。 ICoordinatePoint CoordinatePointのインターフェースを提供します。 ICoordinateVisitor Geometryクラスは、GeometryのすべてのCoordinateにCoordinateフィルタを適用する概念をサポートします。 Coordinateフィルタは、各々のCoordinateに関する情報を記録するか、あるいは幾つかの方法でCoordinateを変更することができます。 CoordinateフィルタはICoordinateVisitorのインターフェースを実装します。(ICoordinateVisitorは四人の集団のビジター・パターンの例です。) CoordinateフィルタはCoordinateの変換、セントロイドおよびエンベロープの計算、および他の多くの機能を実装するために使用することができます。 Enums CoordinateType このライブラリで表現されるCoordinateの種類を表します。 FlaggedPointType PrecisionModelType Coordinate、もしくはCoordinateListに対応したPrecisionModelの型を表します。"
  },
  "api/MapQuest.CoreException.html": {
    "href": "api/MapQuest.CoreException.html",
    "title": "Class CoreException | mysite",
    "keywords": "Class CoreException Namespace MapQuest Assembly MapQuest.Core.dll MapQuest.Core.dll アセンブリ内で発生した例外を示すクラスです。 public class CoreException : DefaultException Inheritance object CoreException Derived CoreIOException CoreUtilitiesException Constructors CoreException() パラメータを指定しないでインスタンスを初期化します。 public CoreException() CoreException(int, Exception, params object[]) リソースID、例外の原因となった例外、例外のパラメータ群 を指定してインスタンスを初期化します。 public CoreException(int exceptionID, Exception inner, params object[] args) Parameters exceptionID int リソースに格納されているエラーメッセージの ID 。 inner Exception 例外の原因となった Exception 。 args object[] 例外のパラメータ群。 CoreException(int, params object[]) リソースID、例外のパラメータ群 を指定してインスタンスを初期化します。 public CoreException(int exceptionID, params object[] args) Parameters exceptionID int リソースに格納されているエラーメッセージの ID 。 args object[] 例外のパラメータ群。 CoreException(SerializationInfo, StreamingContext) デシリアライズの際に使用されるコンストラクタです。 protected CoreException(SerializationInfo info, StreamingContext context) Parameters info SerializationInfo 新しいインスタンスをシリアル化するために必要な情報を格納する SerializationInfo 。 context StreamingContext 新しいインスタンスに関連付けられているシリアル化ストリームのソースを格納する StreamingContext 。 CoreException(string) エラーメッセージを指定してインスタンスを初期化します。 public CoreException(string message) Parameters message string 例外のメッセージ。 CoreException(string, Exception) エラーメッセージと「この例外の原因である例外」を指定してインスタンスを初期化します。 public CoreException(string message, Exception inner) Parameters message string 例外のメッセージ。 inner Exception 現在の例外の原因である例外。 CoreException(string, int) 接頭辞とリソースID を指定してインスタンスを初期化します。 protected CoreException(string prefix, int exceptionID) Parameters prefix string 例外の接頭辞。 exceptionID int リソースに格納されているエラーメッセージの ID 。 CoreException(string, int, Exception) 接頭辞とリソースID、例外の原因となった例外を指定してインスタンスを初期化します。 protected CoreException(string prefix, int exceptionID, Exception inner) Parameters prefix string 例外の接頭辞。 exceptionID int リソースに格納されているエラーメッセージの ID 。 inner Exception 例外の原因となった Exception 。 CoreException(string, int, Exception, params object[]) 接頭辞とリソースID、例外のパラメータ群、例外の原因となった例外 を指定してインスタンスを初期化します。 protected CoreException(string prefix, int exceptionID, Exception inner, params object[] args) Parameters prefix string 例外の接頭辞。 exceptionID int リソースに格納されているエラーメッセージの ID 。 inner Exception 例外の原因となった Exception 。 args object[] 例外のパラメータ群。 CoreException(string, int, params object[]) 接頭辞とリソースID、例外のパラメータ群を指定してインスタンスを初期化します。 protected CoreException(string prefix, int exceptionID, params object[] args) Parameters prefix string 例外の接頭辞。 exceptionID int リソースに格納されているエラーメッセージの ID 。 args object[] 例外のパラメータ群。"
  },
  "api/MapQuest.Features.Comparers.BasicFeatureComparer.html": {
    "href": "api/MapQuest.Features.Comparers.BasicFeatureComparer.html",
    "title": "Class BasicFeatureComparer | mysite",
    "keywords": "Class BasicFeatureComparer Namespace MapQuest.Features.Comparers Assembly MapQuest.Features.dll Feature のある値が小さい順に 並び替えるための比較演算子の基本クラスです。 public abstract class BasicFeatureComparer : FeatureComparer, IComparer Inheritance object FeatureComparer BasicFeatureComparer Implements IComparer Derived FeatureAreaComparer FeatureLengthComparer Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks 比較する値(面積や長さなど)は派生クラスの実装によって異なります。 Constructors BasicFeatureComparer() BasicFeatureComparer の新しいインスタンスを初期化します。 public BasicFeatureComparer() Methods Compare(IFeature, IFeature) 2 つの IFeature それぞれのある値を比較し、 値が小さい Feature を示す値を返します。 public override int Compare(IFeature feature1, IFeature feature2) Parameters feature1 IFeature 比較対象の第 1 地物。 feature2 IFeature 比較対象の第 2 地物。 Returns int 値 説明 0 より小さい値 feature1 の値の方が、 feature2 の値より小さい。 0 feature1 の値と、 feature2 の値は等しい。 0 より大きい値 feature1 の値の方が、 feature2 の値より大きい。 GetValue(IFeature) Feature のある値を算出します。 protected abstract double GetValue(IFeature feature) Parameters feature IFeature のある値を算出する Feature 。 Returns double feature のある値。 feature、 feature.Geometry のいずれかが null の場合は double.NaN を返す。 Remarks 比較する値(面積や長さなど)は派生クラスの実装によって異なります。"
  },
  "api/MapQuest.Features.Comparers.FeatureAreaComparer.html": {
    "href": "api/MapQuest.Features.Comparers.FeatureAreaComparer.html",
    "title": "Class FeatureAreaComparer | mysite",
    "keywords": "Class FeatureAreaComparer Namespace MapQuest.Features.Comparers Assembly MapQuest.Features.dll Feature の面積が小さい順に 並び替えるための比較演算子です。 public class FeatureAreaComparer : BasicFeatureComparer, IComparer Inheritance object FeatureComparer BasicFeatureComparer FeatureAreaComparer Implements IComparer Inherited Members BasicFeatureComparer.Compare(IFeature, IFeature) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks caution 図形が MapQuest.Topology.Geometries.Point , MapQuest.Topology.Geometries.LineString, MapQuest.Topology.Geometries.Text など「面」を持たないものは、面積 0 として扱われます。 Constructors FeatureAreaComparer() FeatureAreaComparer の新しいインスタンスを初期化します。 public FeatureAreaComparer() Methods GetValue(IFeature) Feature の面積を算出します。 protected override double GetValue(IFeature feature) Parameters feature IFeature 面積を算出する Feature 。 Returns double feature の面積。 feature、 feature.Geometry のいずれかが null の場合は double.NaN を返す。"
  },
  "api/MapQuest.Features.Comparers.FeatureComparer.html": {
    "href": "api/MapQuest.Features.Comparers.FeatureComparer.html",
    "title": "Class FeatureComparer | mysite",
    "keywords": "Class FeatureComparer Namespace MapQuest.Features.Comparers Assembly MapQuest.Features.dll Feature と Feature を比較するための比較演算子です。 public abstract class FeatureComparer : IComparer Inheritance object FeatureComparer Implements IComparer Derived BasicFeatureComparer FeatureDistanceComparer FeatureOutlineDistanceComparer Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks 比較演算子(Comparer) は、分かりやすく言えば、「並び替えのルール」です。 比較演算子の実装によって、並び替えの順序を変更することができます。 言い換えれば、ソートの処理を変更することなく、比較演算子を差し替えるだけで 並び替え順を変更することができます。 .NET Framework では、IComparer を実装したクラスを、 Sort(Array) の引数に渡すことで、「自分の」並び替えを行う事ができます。 具体的に、Feature の検索結果を並び替えるには、次の手順を取ります。 FeatureCollection のインスタンスを生成します。 FeatureReader で Feature を検索し、 見つかった Feature を FeatureCollection に追加していきます。 並び替えのルールを示す FeatureComparer の派生クラスを生成します。 ここでは、指定した位置から近い順に並び替えたいので FeatureDistanceComparer を生成します。 FeatureCollection の Sort() メソッドを FeatureDistanceComparer を渡して実行します。 Constructors FeatureComparer() protected FeatureComparer() Methods Compare(IFeature, IFeature) 2 つの IFeature を比較し、 一方が他方より小さいか、等しいか、大きいかを示す値を返します。 public abstract int Compare(IFeature feature1, IFeature feature2) Parameters feature1 IFeature 比較対象の第 1 地物。 feature2 IFeature 比較対象の第 2 地物。 Returns int 値 説明 0 より小さい値 feature1 が feature2 より小さい。 0 feature1 と feature2 は等しい。 0 より大きい値 feature1 が feature2 より大きい。"
  },
  "api/MapQuest.Features.Comparers.FeatureDistanceComparer.html": {
    "href": "api/MapQuest.Features.Comparers.FeatureDistanceComparer.html",
    "title": "Class FeatureDistanceComparer | mysite",
    "keywords": "Class FeatureDistanceComparer Namespace MapQuest.Features.Comparers Assembly MapQuest.Features.dll 指定した位置から Feature までの最短距離の短い順に 並び替えるための比較演算子です。 public class FeatureDistanceComparer : FeatureComparer, IComparer Inheritance object FeatureComparer FeatureDistanceComparer Implements IComparer Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors FeatureDistanceComparer(GeometryFactory, Coordinate) MapQuest.Topology.Geometries.GeometryFactory , 距離を計算する基点の座標、 並び替えの順序を指定して、 インスタンスを初期化します。 public FeatureDistanceComparer(GeometryFactory geomFactory, Coordinate coord) Parameters geomFactory GeometryFactory coord から MapQuest.Topology.Geometries.Point を生成するための MapQuest.Topology.Geometries.GeometryFactory 。 coord Coordinate 距離を計算する基点の座標。 FeatureDistanceComparer(Point) 距離を計算する基点の MapQuest.Topology.Geometries.Point 、並び替えの順序を指定して、 インスタンスを初期化します。 public FeatureDistanceComparer(Point basePoint) Parameters basePoint Point 距離を計算する基点の MapQuest.Topology.Geometries.Point 。 Properties BasePoint 距離を算出する基点となる MapQuest.Topology.Geometries.Point を取得します。 public Point BasePoint { get; } Property Value Point Methods Compare(IFeature, IFeature) 2 つの IFeature それぞれの BasePoint との最短距離を比較し、どちらが短いかを示す値を返します。 public override int Compare(IFeature feature1, IFeature feature2) Parameters feature1 IFeature 比較対象の第 1 地物。 feature2 IFeature 比較対象の第 2 地物。 Returns int 値 説明 0 より小さい値 BasePoint - feature1 間の最短距離の方が、 BasePoint - feature2 間の最短距離より短い。 0 BasePoint - feature1 間の最短距離と、 BasePoint - feature2 間の最短距離は等しい。 0 より大きい値 BasePoint - feature1 間の最短距離の方が、 BasePoint - feature2 間の最短距離より長い。"
  },
  "api/MapQuest.Features.Comparers.FeatureLengthComparer.html": {
    "href": "api/MapQuest.Features.Comparers.FeatureLengthComparer.html",
    "title": "Class FeatureLengthComparer | mysite",
    "keywords": "Class FeatureLengthComparer Namespace MapQuest.Features.Comparers Assembly MapQuest.Features.dll Feature の長さが短い順に 並び替えるための比較演算子です。 public class FeatureLengthComparer : BasicFeatureComparer, IComparer Inheritance object FeatureComparer BasicFeatureComparer FeatureLengthComparer Implements IComparer Inherited Members BasicFeatureComparer.Compare(IFeature, IFeature) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors FeatureLengthComparer() FeatureLengthComparer の新しいインスタンスを初期化します。 public FeatureLengthComparer() Methods GetValue(IFeature) Feature の長さを算出します。 protected override double GetValue(IFeature feature) Parameters feature IFeature 長さを算出する Feature 。 Returns double feature の長さ。 feature、 feature.Geometry のいずれかが null の場合は double.NaN を返す。"
  },
  "api/MapQuest.Features.Comparers.FeatureOutlineDistanceComparer.html": {
    "href": "api/MapQuest.Features.Comparers.FeatureOutlineDistanceComparer.html",
    "title": "Class FeatureOutlineDistanceComparer | mysite",
    "keywords": "Class FeatureOutlineDistanceComparer Namespace MapQuest.Features.Comparers Assembly MapQuest.Features.dll 指定した位置から Feature までの最短距離の短い順に 並び替えるための比較演算子です。 面を持つ Feature の場合は、そのアウトラインからの距離を用います。 public class FeatureOutlineDistanceComparer : FeatureComparer, IComparer Inheritance object FeatureComparer FeatureOutlineDistanceComparer Implements IComparer Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors FeatureOutlineDistanceComparer(GeometryFactory, Coordinate) MapQuest.Topology.Geometries.GeometryFactory , 距離を計算する基点の座標、 並び替えの順序を指定して、 インスタンスを初期化します。 public FeatureOutlineDistanceComparer(GeometryFactory geomFactory, Coordinate coord) Parameters geomFactory GeometryFactory coord から MapQuest.Topology.Geometries.Point を生成するための MapQuest.Topology.Geometries.GeometryFactory 。 coord Coordinate 距離を計算する基点の座標。 FeatureOutlineDistanceComparer(Point) 距離を計算する基点の MapQuest.Topology.Geometries.Point 、並び替えの順序を指定して、 インスタンスを初期化します。 public FeatureOutlineDistanceComparer(Point basePoint) Parameters basePoint Point 距離を計算する基点の MapQuest.Topology.Geometries.Point 。 Properties BasePoint 距離を算出する基点となる MapQuest.Topology.Geometries.Point を取得します。 public Point BasePoint { get; } Property Value Point Methods Compare(IFeature, IFeature) 2 つの IFeature それぞれの BasePoint との最短距離を比較し、どちらが短いかを示す値を返します。 public override int Compare(IFeature feature1, IFeature feature2) Parameters feature1 IFeature 比較対象の第 1 地物。 feature2 IFeature 比較対象の第 2 地物。 Returns int 値 説明 0 より小さい値 BasePoint - feature1 間の最短距離の方が、 BasePoint - feature2 間の最短距離より短い。 0 BasePoint - feature1 間の最短距離と、 BasePoint - feature2 間の最短距離は等しい。 0 より大きい値 BasePoint - feature1 間の最短距離の方が、 BasePoint - feature2 間の最短距離より長い。"
  },
  "api/MapQuest.Features.Comparers.html": {
    "href": "api/MapQuest.Features.Comparers.html",
    "title": "Namespace MapQuest.Features.Comparers | mysite",
    "keywords": "Namespace MapQuest.Features.Comparers Classes BasicFeatureComparer Feature のある値が小さい順に 並び替えるための比較演算子の基本クラスです。 FeatureAreaComparer Feature の面積が小さい順に 並び替えるための比較演算子です。 FeatureComparer Feature と Feature を比較するための比較演算子です。 FeatureDistanceComparer 指定した位置から Feature までの最短距離の短い順に 並び替えるための比較演算子です。 FeatureLengthComparer Feature の長さが短い順に 並び替えるための比較演算子です。 FeatureOutlineDistanceComparer 指定した位置から Feature までの最短距離の短い順に 並び替えるための比較演算子です。 面を持つ Feature の場合は、そのアウトラインからの距離を用います。"
  },
  "api/MapQuest.Features.Feature.html": {
    "href": "api/MapQuest.Features.Feature.html",
    "title": "Class Feature | mysite",
    "keywords": "Class Feature Namespace MapQuest.Features Assembly MapQuest.Features.dll 実世界の現象の抽出概念である地物を表現するためのクラスです。 public class Feature : IFeature, IComparable, ICloneable, ISerializable Inheritance object Feature Implements IFeature IComparable ICloneable ISerializable Inherited Members object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks Feature は、図形形状(Geometry) ＋ それに付加する情報(属性情報など) で構成されます。 基本的には、 Feature は Properties という「キー文字列と object の集まり」を持ちます。 例えば、図形情報は、Properties に キー \"#Geometry\" で格納されています。 Feature.Geometry は、この Properties のキー \"#Geometry\" の項目を参照しているに過ぎません。 同様に、Feature.ID は、Properties のキー \"#ID\" の項目を参照します。 属性情報だけは少々特別で、Properties のキーが属性テーブル名となり、項目は、MapQuest.Database.AttributesList 型 となります。 例えば、\"住所録\"テーブルの属性情報は C# の場合、 Feature.GetProperty(\"住所録\") as AttributesList で取得できます。 note あらかじめ規定されているキー文字列は、属性情報を除いて、\"#\" を先頭に付加します。 ユーザー独自の情報のキー名には \"#\" を先頭につけないようにしてください。 現時点で、規定されているプロパティには下記のものがあります。 全てのプロバイダで共通な項目。 キー 値 #ID Feature.ID にマップされます。 #Geometry Feature.Geometry にマップされます。 {属性テーブル名} Feature が持つ属性情報を示す MapQuest.Database.AttributesList です。 #Style Feature の個別のスタイルを示す MapQuest.Styles.StyleList です。 この要素は、 階層の Layer.Styles よりも優先的に使用されます。 #FixedID フィーチャーを追加、更新する際のフィーチャーIDを明示的に指定する場合に、 Feature.ID を示す string 値を設定します。通常は使用しないでください。 MqxProvider で規定されている項目。 キー 値 #Data1 MQX の Color 領域に格納されている int 値です。 #TextType 文字列の種類を示す short 値。内容は MapQuest.Styles.TextType です。 #IsVerticalText 縦文字列かを示す bool 値。縦文字の場合 true になります。 #Unit 文字やシンボルのサイズの単位を示す MapQuest.Styles.StyleUnitType 値。 #IsScalable 文字やシンボルのサイズが縮尺に依存するかを示す bool 値。縮尺に依存する場合 true になります。 #Scale #IsScalable が false である時、Geometries.Text の MapQuest.Topology.Geometries.Text.Width と MapQuest.Topology.Geometries.Text.Height を計算した縮尺値を示す double 値。 #SymbolType シンボルの種類を示す short 値。内容は MapQuest.Styles.SymbolType です。 #SymbolWidth シンボルの幅を示す float 値。 #SymbolHeight シンボルの高さを示す float 値。 #Angle シンボルの角度を示す short 値。 #SymbolNumber シンボルの番号を示す short 値。 #SymbolLabel シンボルに付加されている文字列を示す string 値。文字付きストロークシンボルで使用されます。 #HasHiddenPoints ラインまたはポリゴンが、隠線を持っているかどうかを示す bool 値。隠線を１つ以上持っている場合 true になります。 #ImageFile 矩形(MapQuest.Topology.Geometries.Rectangle)に付与される画像ファイル名を示す string 値。この項目がある場合 MQX のラスタプリミティブとなります。 Constructors Feature(SerializationInfo, StreamingContext) Feature クラスの新しいインスタンスを初期化します。 Initializes a new instance of the <xref href=\"MapQuest.Features.Feature\" data-throw-if-not-resolved=\"false\"></xref> class with serialized data. <p><!-- Non Support 2005/01/20 --> このコンストラクタは、現在サポートしていません。 protected Feature(SerializationInfo info, StreamingContext context) Parameters info SerializationInfo context StreamingContext Feature(string) 指定した識別子を備えた、 Feature クラスの新しいインスタンスを初期化します。 public Feature(string id) Parameters id string 地物の識別子。 Feature(string, IFeatureType) Feature クラスの新しいインスタンスを初期化します。 このコンストラクタは、現在サポートしていません。 public Feature(string id, IFeatureType featureType) Parameters id string 地物の識別子。 featureType IFeatureType {} Feature(string, IFeatureType, IFeatureProperty[]) Feature クラスの新しいインスタンスを初期化します。 このコンストラクタは、現在サポートしていません。 public Feature(string id, IFeatureType featureType, IFeatureProperty[] properties) Parameters id string 地物の識別子。 featureType IFeatureType {} properties IFeatureProperty[] Feature(string, Geometry) 指定した識別子と形状を備えた、 Feature クラスの新しいインスタンスを初期化します。 public Feature(string id, Geometry geometry) Parameters id string 地物の識別子。 geometry Geometry 地物として扱う形状を表す MapQuest.Topology.Geometries.Geometry 。 Feature(string, Geometry, IFeatureType) public Feature(string id, Geometry geometry, IFeatureType featureType) Parameters id string geometry Geometry featureType IFeatureType Properties Envelope 地物の範囲を取得します。 public virtual Envelope Envelope { get; } Property Value Envelope 地物が管理される範囲の Envelope オブジェクト。それ以外の場合は null 。 FeatureType public IFeatureType FeatureType { get; } Property Value IFeatureType Geometry 地物の形状を取得します。 public Geometry Geometry { get; } Property Value Geometry 地物として定義された Geometry オブジェクト。それ以外の場合は null 。 ID 地物の識別子を取得します。 public string ID { get; } Property Value string 地物を識別する一意の文字列。 Remarks このプロパティの値は、各プロバイダが管理してください。 this[string] 指定されたインデックスの属性を取得または設定します。 public object this[string name] { get; set; } Parameters name string 取得する属性のインデックス名。 Property Value object 指定されたインデックスの属性の値。 Properties 地物の属性を取得します。 public IDictionary Properties { get; } Property Value IDictionary 定義されている地物の属性を定義した IDictionary オブジェクト。それ以外の場合は null 。 PropertyCount 地物の属性の数を取得します。 public int PropertyCount { get; } Property Value int 設定されている地物の属性の数。 Methods Clone() 現在のインスタンスのコピーである新しいオブジェクトを作成します。 このメソッドは、現在サポートしていません。 public virtual object Clone() Returns object コピーされた新しい Feature オブジェクト。 CompareTo(object) Feature オブジェクトを比較します。 このメソッドは、現在サポートしていません。 public virtual int CompareTo(object obj) Parameters obj object Returns int CopyAttributesList(Feature) この Feature の Properties のアイテムのうち、 属性を示すアイテムを、 で指定された Feature の Properties に参照コピーします。 public void CopyAttributesList(Feature feature) Parameters feature Feature 属性を示すアイテムをコピーする先の Feature。 Equals(object) オブジェクトの内容が等しい場合に真を返します。 public override bool Equals(object obj) Parameters obj object 比較するFeature Returns bool 等価であるか GetObjectData(SerializationInfo, StreamingContext) public virtual void GetObjectData(SerializationInfo info, StreamingContext context) Parameters info SerializationInfo context StreamingContext GetProperty(string) 地物の属性を取得します。 public object GetProperty(string key) Parameters key string 取得する属性のインデックス名。 Returns object 指定された項目の属性の値。 HasProperty(string) 地物の属性の有無を確認します。 public bool HasProperty(string key) Parameters key string 取得する属性のインデックス名。 Returns bool 指定された項目の属性がある場合は true。それ以外の場合は false 。 SetProperty(string, object) 地物の属性を設定します。 public void SetProperty(string key, object value) Parameters key string value object 設定する属性の値。"
  },
  "api/MapQuest.Features.FeatureCollection.html": {
    "href": "api/MapQuest.Features.FeatureCollection.html",
    "title": "Class FeatureCollection | mysite",
    "keywords": "Class FeatureCollection Namespace MapQuest.Features Assembly MapQuest.Features.dll 地物用に最適化されたコレクションの実装です。 public class FeatureCollection : IFeatureList, IFeatureCollection, IEnumerable<Feature>, IList, ICollection, IEnumerable, ICloneable, ISerializable Inheritance object FeatureCollection Implements IFeatureList IFeatureCollection IEnumerable<Feature> IList ICollection IEnumerable ICloneable ISerializable Derived IndexedFeatureCollection Inherited Members object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks FeatureCollection は、地物用に最適化された ICollection コレクションを提供します。 Constructors FeatureCollection() 空で、デフォルトの初期量を備えた、 FeatureCollection クラスの新しいインスタンスを初期化します。 public FeatureCollection() Remarks 詳細については ArrayList() を参照してください。 FeatureCollection(FeatureCollection) 指定したコレクションからコピーした地物を格納し、 コピーされる地物の数と同じ初期量を備えた、 FeatureCollection クラスの新しいインスタンスを初期化します。 public FeatureCollection(FeatureCollection collection) Parameters collection FeatureCollection 新しいリストに要素が追加された FeatureCollection 。 Remarks 詳細については ArrayList(ICollection) を参照してください。 Exceptions ArgumentNullException collection が null 参照 (Visual Basic では Nothing) です。 FeatureCollection(FeatureSchema) この FeatureCollection についての情報を示すFeatureSchema を指定して空で、デフォルトの初期量を備えた、 FeatureCollection クラスの新しいインスタンスを初期化します。 public FeatureCollection(FeatureSchema schema) Parameters schema FeatureSchema この FeatureCollection についての情報を示すFeatureSchema 。 FeatureCollection(Feature[]) 指定した配列からコピーした地物を格納し、 コピーされる地物の数と同じ初期量を備えた、 FeatureCollection クラスの新しいインスタンスを初期化します。 public FeatureCollection(Feature[] array) Parameters array Feature[] コレクションに追加するオブジェクトを格納する Feature 型の配列。 Remarks 詳細については ArrayList(ICollection) を参照してください。 Exceptions ArgumentNullException array が null 参照 (Visual Basic では Nothing) です。 FeatureCollection(Feature[], FeatureSchema) コレクションに追加する Feature の配列と、この FeatureCollection についての情報を示すFeatureSchema を指定して空で、デフォルトの初期量を備えた、 FeatureCollection クラスの新しいインスタンスを初期化します。 public FeatureCollection(Feature[] array, FeatureSchema schema) Parameters array Feature[] コレクションに追加するオブジェクトを格納する Feature 型の配列。 schema FeatureSchema この FeatureCollection についての情報を示すFeatureSchema 。 FeatureCollection(int) 空で、指定した初期量を備えた、 FeatureCollection クラスの新しいインスタンスを初期化します。 public FeatureCollection(int capacity) Parameters capacity int 初期状態の新しいリストに格納できる地物の数。 Remarks 詳細については ArrayList(int) を参照してください。 Exceptions ArgumentOutOfRangeException capacity が 0 未満です。 FeatureCollection(int, FeatureSchema) コレクションのサイズと、この FeatureCollection についての情報を示すFeatureSchema を指定して空で、デフォルトの初期量を備えた、 FeatureCollection クラスの新しいインスタンスを初期化します。 public FeatureCollection(int capacity, FeatureSchema schema) Parameters capacity int 初期状態の新しいリストに格納できる地物の数。 schema FeatureSchema この FeatureCollection についての情報を示すFeatureSchema 。 FeatureCollection(SerializationInfo, StreamingContext) シリアル化された情報からFeatureCollectionを作成します。 public FeatureCollection(SerializationInfo info, StreamingContext context) Parameters info SerializationInfo シリアル化する情報を格納するオブジェクト context StreamingContext Properties Capacity FeatureCollection に格納できる要素の数を取得または設定します。 public virtual int Capacity { get; set; } Property Value int FeatureCollection に格納できる要素の数。 0 が指定された場合は規定値を設定します。 現在設定されている数より小さい場合は例外を発行します。 Remarks 詳細については Capacity を参照してください。 Exceptions ArgumentOutOfRangeException Capacity が Count より小さい値に設定されています。 Count FeatureCollection に実際に格納されている地物の数を取得します。 public virtual int Count { get; } Property Value int FeatureCollection に実際に格納されている地物の数。 Remarks 詳細については Count を参照してください。 Envelope FeatureCollection に格納されている地物の範囲を取得します。 public virtual Envelope Envelope { get; } Property Value Envelope FeatureCollection に格納されている要素全てを包括する範囲。 IsFixedSize FeatureCollection が固定サイズかどうかを示す値を取得します。 このプロパティは、現在サポートしていません。 public virtual bool IsFixedSize { get; } Property Value bool FeatureCollection が固定サイズの場合は true 。それ以外の場合は false 。 既定値は false です。 Remarks 詳細については IsFixedSize を参照してください。 IsReadOnly FeatureCollection が読み取り専用かどうかを示す値を取得します。 このプロパティは、現在サポートしていません。 public virtual bool IsReadOnly { get; } Property Value bool FeatureCollection が読み取り専用の場合は true 。それ以外の場合は false 。 既定値は false です。 Remarks 詳細については IsReadOnly を参照してください。 IsSynchronized FeatureCollection へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。 このプロパティは、現在サポートしていません。 public virtual bool IsSynchronized { get; } Property Value bool FeatureCollection へのアクセスが同期されている (スレッド セーフである) 場合は true 。 それ以外の場合は false 。 Remarks 詳細については IsSynchronized を参照してください。 IsUnique FeatureCollection 内の地物が全てユニークであるかどうかを示す値を取得します。 このプロパティは、現在サポートしていません。 public virtual bool IsUnique { get; } Property Value bool FeatureCollection 内の地物が全てユニークである場合は true 。それ以外の場合は false 。 既定値は false です。 Remarks FeatureCollection が、ユニークなラッパーを使用している場合、 IsUnique は true を返します。 詳細については Unique を参照してください。 this[int] 指定されたインデックスの地物を取得または設定します。 public virtual Feature this[int index] { get; set; } Parameters index int 取得または設定する要素の、0 から始まるインデックス番号。 Property Value Feature 指定したインデックスにある地物 IFeature 。 Remarks 詳細については this[int] を参照してください。 Exceptions ArgumentOutOfRangeException index が 0 未満です。 または index が Count 以上です。 NotSupportedException このプロパティが設定されていますが、 FeatureCollection が読み取り専用です。 または FeatureCollection は既に異なるインデックスで指定された要素を含んでいます。 <xref href=\"MapQuest.Features.FeatureCollection\" data-throw-if-not-resolved=\"false\"></xref> は含まれる要素が全てユニークであることを保障します。 Schema この FeatureCollection についての情報を取得します。 public virtual FeatureSchema Schema { get; } Property Value FeatureSchema FeatureCollection についての情報。 Remarks Schema は、Feature が持つ地物に関する定義情報です。 MapQuest.FeatureProviders.FeatureClass が管理します。 SyncRoot FeatureCollection へのアクセスを同期するために使用できるオブジェクトを取得します。 このプロパティは、現在サポートしていません。 public virtual object SyncRoot { get; } Property Value object FeatureCollection へのアクセスを同期するために使用できるオブジェクト。 Remarks 詳細については SyncRoot を参照してください。 Methods Add(Feature) FeatureCollection の末尾に Feature を追加します。 public virtual int Add(Feature value) Parameters value Feature FeatureCollection の末尾に追加する Feature 。 値は null 参照 (Visual Basic では Nothing) に設定できます。 Returns int value が追加された位置の FeatureCollection インデックス。 Remarks 詳細については Add(object) を参照してください。 Exceptions NotSupportedException FeatureCollection が読み取り専用です。 または FeatureCollection が固定サイズです。 または FeatureCollection は既に指定された要素を含んでいます。また、 <xref href=\"MapQuest.Features.FeatureCollection\" data-throw-if-not-resolved=\"false\"></xref> は含まれる要素が全てユニークであることを保障します。 AddRange(FeatureCollection) FeatureCollection の要素を FeatureCollection の末尾に追加します。 public virtual void AddRange(FeatureCollection collection) Parameters collection FeatureCollection コレクションに追加するオブジェクトを格納する FeatureCollection 。 Remarks 詳細については AddRange(ICollection) を参照してください。 Exceptions ArgumentNullException collection が null 参照 (Visual Basic では Nothing) です。 NotSupportedException FeatureCollection が読み取り専用です。 または FeatureCollection が固定サイズです。 または FeatureCollection は既に指定された要素を含んでいます。また、 FeatureCollection は含まれる要素が全てユニークであることを保障します。 AddRange(Feature[]) Feature 配列の要素を FeatureCollection の末尾に追加します。 public virtual void AddRange(Feature[] array) Parameters array Feature[] コレクションに追加するオブジェクトを格納する Feature 型の配列。 Remarks 詳細については AddRange(ICollection) を参照してください。 Exceptions ArgumentNullException array が null 参照 (Visual Basic では Nothing) です。 NotSupportedException FeatureCollection が読み取り専用です。 または FeatureCollection が固定サイズです。 または FeatureCollection は既に指定された要素を含んでいます。また、 FeatureCollection は含まれる要素が全てユニークであることを保障します。 BinarySearch(Feature) バイナリ サーチ アルゴリズムを使用して、並べ替えられた FeatureCollection 内の特定の地物を検索します。 public virtual int BinarySearch(Feature value) Parameters value Feature 検索する Feature 。 値は null 参照 (Visual Basic では Nothing) に設定できます。 Returns int 0 から始まるインデックス番号。 value が見つかった場合は、並べ替えられた FeatureCollection 内の value の 0 から始まるインデックス。 見つからなかった場合は、負の値。これは、 value の次に大きい要素のインデックスのビットごとの補数です。 ただし、大きい要素が存在しない場合は、Count のビットごとの補数です。 Remarks 詳細については BinarySearch(int, int, object, IComparer) を参照してください。 Exceptions InvalidOperationException value が、 FeatureCollection の要素と同じ型ではありません。 IComparable インターフェースがインプリメントされていません。 Clear() FeatureCollection からすべての地物を削除します。 public virtual void Clear() Remarks 詳細については Clear() を参照してください。 Exceptions NotSupportedException FeatureCollection が読み取り専用です。 または FeatureCollection が固定サイズです。 Clone() FeatureCollection の簡易コピーを作成します。 public virtual object Clone() Returns object FeatureCollection の簡易コピー。 Remarks 詳細については Clone() を参照してください。 Contains(Feature) ある地物が FeatureCollection 内に存在するかどうかを判断します。 public bool Contains(Feature value) Parameters value Feature FeatureCollection 内で検索される Feature 。 値は null 参照 (Visual Basic では Nothing) に設定できます。 Returns bool value が FeatureCollection に存在する場合は true 。それ以外の場合は false 。 Remarks 詳細については Contains(object) を参照してください。 CopyTo(Feature[]) FeatureCollection 全体を互換性のある 1 次元の Feature にコピーします。 コピー操作は、コピー先の配列の先頭から始まります。 public virtual void CopyTo(Feature[] array) Parameters array Feature[] FeatureCollection から要素がコピーされる Feature の 1 次元配列。この配列には、0 から始まるインデックス番号が必要です。 Remarks 詳細については CopyTo(Array) を参照してください。 Exceptions ArgumentNullException array が null 参照 (Visual Basic では Nothing) です。 ArgumentException array が多次元です。 または コピー元の FeatureCollection の地物数が、コピー先の array に格納できる要素の数を超えています。 InvalidCastException コピー元の FeatureCollection の型が、コピー先の array の型に自動的にキャストできません。 CopyTo(Feature[], int) FeatureCollection 全体を互換性のある 1 次元の Feature にコピーします。コピー操作は、コピー先の配列の指定したインデックスから始まります。 public virtual void CopyTo(Feature[] array, int arrayIndex) Parameters array Feature[] FeatureCollection から要素がコピーされる Feature の 1 次元配列。この配列には、0 から始まるインデックス番号が必要です。 arrayIndex int コピーの開始位置となる、 0 から始まるインデックス番号。 Remarks 詳細については CopyTo(Array) を参照してください。 Exceptions ArgumentNullException array が null 参照 (Visual Basic では Nothing) です。 ArgumentOutOfRangeException arrayIndex が 0 未満です。 ArgumentException array が多次元です。 または arrayIndex が array の長さ以上です。 または コピー元の FeatureCollection の地物数が、 arrayIndex からコピー先の array の末尾までに格納できる数を超えています。 InvalidCastException コピー元の FeatureCollection の型が、コピー先の array の型に自動的にキャストできません。 CreateIterator() FeatureCollection 内の Feature を走査する IFeatureIterator を返します。 public virtual IFeatureIterator CreateIterator() Returns IFeatureIterator Feature を走査する IFeatureIterator 。 Remarks 詳細については GetEnumerator() を参照してください。 Equals(object) オブジェクトの内容が等しい場合に真を返します。 public override bool Equals(object obj) Parameters obj object 比較するFeatureCollection Returns bool 等価であるか GetEnumerator() public IEnumerator<Feature> GetEnumerator() Returns IEnumerator<Feature> GetObjectData(SerializationInfo, StreamingContext) オブジェクトをシリアル化します。 public void GetObjectData(SerializationInfo info, StreamingContext context) Parameters info SerializationInfo シリアル化する情報を格納するオブジェクト context StreamingContext IndexOf(Feature) 指定した Feature を検索し、 FeatureCollection 内で最初に見つかった位置の 0 から始まるインデックスを返します。 public virtual int IndexOf(Feature value) Parameters value Feature FeatureCollection 内で検索される Feature 。 値は null 参照 (Visual Basic では Nothing) に設定できます。 Returns int FeatureCollection 内で value が見つかった場合は、最初に見つかった位置の 0 から始まるインデックス番号。 それ以外の場合は -1。 Remarks 詳細については IndexOf(object) を参照してください。 IndexOf(string) FeatureCollection から id を持つ Feature のインデクスを返します。 public virtual int IndexOf(string id) Parameters id string Feature の id。 Returns int Feature の id に該当する FeatureCollection のインデクス。存在しない場合は -1。 Insert(int, Feature) FeatureCollection 内の指定したインデックスの位置に要素を挿入します。 public virtual void Insert(int index, Feature value) Parameters index int value を挿入する位置の、0 から始まるインデックス番号。 value Feature 挿入する Feature 。 値は null 参照 (Visual Basic では Nothing) に設定できます。 Remarks 詳細については Insert(int, object) を参照してください。 Exceptions ArgumentOutOfRangeException index が 0 未満です。 または index が Count より大きい値です。 NotSupportedException FeatureCollection が読み取り専用です。 または FeatureCollection が固定サイズです。 または FeatureCollection は既に指定された要素を含んでいます。また、 FeatureCollection は含まれる要素が全てユニークであることを保障します。 InvalidateEnvelope() FeatureCollection にキャッシュされている領域を無効にします。 public virtual void InvalidateEnvelope() Remarks Geometry を変更される場合は、このメソッドを呼び出してください。 Query(Envelope) 指定された範囲の地物を検索します。 public virtual IFeatureList Query(Envelope area) Parameters area Envelope 検索したい範囲。 Returns IFeatureList 検索されたインデックスによって個別にアクセスできる IFeatureList コレクション。 Remove(Envelope) FeatureCollection 内から指定された範囲に含まれる Feature オブジェクトを削除します。 public virtual IFeatureList Remove(Envelope area) Parameters area Envelope FeatureCollection から削除したい範囲を示す Envelope 。 Returns IFeatureList FeatureCollection から削除した Feature を持つ IFeatureList オブジェクト。 Remove(Feature) 指定された Feature を削除します。 public virtual void Remove(Feature value) Parameters value Feature FeatureCollection から削除する Feature 。 値は null 参照 (Visual Basic では Nothing) に設定できます。 Remarks 詳細については Remove(object) を参照してください。 Exceptions NotSupportedException FeatureCollection が読み取り専用です。 または FeatureCollection が固定サイズです。 Remove(IFeatureList) 指定された複数の Feature を削除します。 public virtual void Remove(IFeatureList collection) Parameters collection IFeatureList FeatureCollection から削除したい 1 つ以上の Feature を持つ IFeatureList 。 Remarks 詳細については Remove(object) を参照してください。 RemoveAt(int) FeatureCollection の指定したインデックスにある地物を削除します。 public virtual void RemoveAt(int index) Parameters index int 削除する地物の、0 から始まるインデックス番号。 Remarks 詳細については RemoveAt(int) を参照してください。 Exceptions ArgumentOutOfRangeException index が 0 未満です。 または index が Count 以上です。 NotSupportedException FeatureCollection が読み取り専用です。 または FeatureCollection が固定サイズです。 RemoveRange(int, int) FeatureCollection から指定された範囲の地物を削除します。 public virtual void RemoveRange(int index, int count) Parameters index int 削除する地物の範囲の開始位置を示す 0 から始まるインデックス。 count int 削除する地物の数。 Remarks 詳細については RemoveRange(int, int) を参照してください。 Exceptions ArgumentOutOfRangeException index が 0 未満です。 または Count が 0 未満です。 ArgumentException index および count が FeatureCollection 内の有効な範囲を指定していません。 NotSupportedException FeatureCollection が読み取り専用です。 または FeatureCollection が固定サイズです。 Reverse() FeatureCollection の全体の要素の順序を反転させます。 public virtual void Reverse() Remarks 詳細については Reverse() を参照してください。 Exceptions NotSupportedException FeatureCollection が読み取り専用です。 Reverse(int, int) 指定した範囲の要素の順序を反転させます。 public virtual void Reverse(int index, int count) Parameters index int 反転させる範囲の開始位置を示す 0 から始まるインデックス。 count int 反転させる範囲内にある地物の数。 Remarks 詳細については Reverse() を参照してください。 Exceptions ArgumentOutOfRangeException index が 0 未満です。 または Count が 0 未満です。 ArgumentException index および count が FeatureCollection 内の有効な範囲を指定していません。 NotSupportedException FeatureCollection が読み取り専用です。 Sort() 各要素の IComparable 実装を使用して、 FeatureCollection 内の地物を並べ替えます。 public virtual void Sort() Remarks 詳細については Sort() を参照してください。 Exceptions NotSupportedException FeatureCollection が読み取り専用です。 Sort(IComparer) 指定した比較演算子を使用して、 FeatureCollection 内の地物を並べ替えます。 public virtual void Sort(IComparer comparer) Parameters comparer IComparer 要素を比較する場合に使用する IComparer 実装。 または 各要素の IComparer 実装を使用する場合は null 参照 (Visual Basic では Nothing) 。 Remarks 詳細については Sort() を参照してください。 Exceptions NotSupportedException FeatureCollection が読み取り専用です。 Sort(int, int, IComparer) 指定した比較演算子を使用して、 FeatureCollection のセクション内の要素を並べ替えます。 public virtual void Sort(int index, int count, IComparer comparer) Parameters index int 並べ替える範囲の開始位置を示す 0 から始まるインデックス。 count int 並べ替える範囲の長さ。 comparer IComparer 要素を比較する場合に使用する IComparer 実装。 または 各要素の IComparer 実装を使用する場合は null 参照 (Visual Basic では Nothing) 。 Remarks 詳細については Sort() を参照してください。 Exceptions ArgumentOutOfRangeException index が 0 未満です。 または Count が 0 未満です。 ArgumentException index および count が FeatureCollection 内の有効な範囲を指定していません。 NotSupportedException FeatureCollection が読み取り専用です。 ToArray() FeatureCollection の地物を新しい配列にコピーします。 public virtual Feature[] ToArray() Returns Feature[] FeatureCollection の要素のコピーを格納する Feature 型の配列。 Remarks 詳細については ToArray() を参照してください。 TrimToSize() 容量を FeatureCollection 内にある実際の地物数に設定します。 public virtual void TrimToSize() Remarks 詳細については TrimToSize() を参照してください。 Exceptions NotSupportedException FeatureCollection が読み取り専用です。 または FeatureCollection が固定サイズです。 UpdateEnvelope() FeatureCollection にキャッシュされている領域を更新します。 public virtual void UpdateEnvelope()"
  },
  "api/MapQuest.Features.FeatureDataType.html": {
    "href": "api/MapQuest.Features.FeatureDataType.html",
    "title": "Enum FeatureDataType | mysite",
    "keywords": "Enum FeatureDataType Namespace MapQuest.Features Assembly MapQuest.Features.dll データタイプのフィールド、 または FeatureType のパラメータを定義します。 public enum FeatureDataType : short Fields AnsiString = 0 1 から 8,000 文字の範囲内の非 Unicode 文字の可変長ストリーム。 AnsiStringFixedLength = 22 非 Unicode 文字の固定長ストリーム。 Binary = 1 1 から 8,000 バイトの範囲内のバイナリ データの可変長ストリーム。 Boolean = 3 true または false のブール値を表す単純型。 Byte = 2 値が 0 から 255 までの範囲内の 8 ビット符号なし整数。 Currency = 4 精度が通貨単位の 1/10,000 の、-263 (-922,337,203,685,477.5808) から 2 63 -1 (+922,337,203,685,477.5807) までの範囲内の通貨値。 Date = 5 1753 年 1 月 1 日から 9999 年 12 月 31 日までの範囲で、 精度 3.33 ミリ秒の日付と時刻のデータ。 DateTime = 6 1753 年 1 月 1 日から 9999 年 12 月 31 日までの範囲で、 精度 3.33 ミリ秒の日付と時刻のデータ。 Decimal = 7 1.0 x 10-28 から概数 7.9 x 1028 までの範囲で、有効桁数が 28 または 29 の値を表す単純型。 Double = 8 概数 5.0 x 10-324 から 1.7 x 10308 までの範囲で、有効桁数が 15 または 16 の値を表す浮動小数点型。 Geometry = 24 MapQuest.Topology.Geometries.Geometry オブジェクト タイプ。 Guid = 9 グローバル一意識別子 (GUID)。 Image = 25 イメージ オブジェクト タイプ。 Integer = 11 -2147483648 から 2147483647 までの値を保持する符号付き 32 ビット整数を表す整数型。 Long = 12 -9223372036854775808 から 9223372036854775807 までの値を保持する 符号付き 64 ビット整数を表す整数型。 Object = 13 別の DbType 値で明示的に表されていない参照型または値型を表す汎用型。 SByte = 14 -128 から 127 までの値を保持する符号付き 8 ビット整数を表す整数型。 Short = 10 32768 から 32767 までの値を保持する符号付き 16 ビット整数を表す整数型。 Single = 15 概数 1.5 x 10-45 から 3.4 x 1038 までの範囲で、有効桁数が 7 の値を表す浮動小数点型。 String = 16 Unicode 文字列を表す型。 StringFixedLength = 23 Unicode 文字の固定長ストリーム。 Time = 17 1753 年 1 月 1 日から 9999 年 12 月 31 日までの範囲で、 精度 3.33 ミリ秒の日付と時刻のデータ。 UInteger = 19 0 から 4294967295 までの値を保持する符号なし 32 ビット整数を表す整数型。 ULong = 20 0 から 18446744073709551615 までの値を保持する符号なし 64 ビット整数を表す整数型。 UShort = 18 0 から 65535 までの値を保持する符号なし 16 ビット整数を表す整数型。 Unknown = -1 未知のオブジェクト タイプ。 VarNumeric = 21 可変長数値。"
  },
  "api/MapQuest.Features.FeatureException.html": {
    "href": "api/MapQuest.Features.FeatureException.html",
    "title": "Class FeatureException | mysite",
    "keywords": "Class FeatureException Namespace MapQuest.Features Assembly MapQuest.Features.dll MapQuest.Features パッケージ内で実行中に発生した場合にスローされる例外。 public class FeatureException : DefaultException Inheritance object FeatureException Remarks 詳細については MapQuest.ExceptionManagement.DefaultException を参照してください。 Constructors FeatureException() FeatureException クラスの新しいインスタンスを初期化します。 public FeatureException() FeatureException(int, Exception, params object[]) エラー番号、およびこの例外の原因である内部例外への参照を指定して、 FeatureException クラスの新しいインスタンスを初期化します。 public FeatureException(int exceptionID, Exception inner, params object[] args) Parameters exceptionID int エラー メッセージを識別するエラー番号。 inner Exception 現在の例外の原因である例外。 inner パラメータが null 参照でない場合は、内部例外を処理する catch ブロックで現在の例外が発生します。 args object[] このパラメータは、現在サポートしていません。 Remarks 詳細については MapQuest.ExceptionManagement.DefaultException を参照してください。 FeatureException(int, params object[]) エラー番号、および{}を指定して、 FeatureException クラスの新しいインスタンスを初期化します。 public FeatureException(int exceptionID, params object[] args) Parameters exceptionID int エラー メッセージを識別するエラー番号。 args object[] このパラメータは、現在サポートしていません。 Remarks 詳細については MapQuest.ExceptionManagement.DefaultException を参照してください。 FeatureException(SerializationInfo, StreamingContext) Protected constructor to de-serialize data. protected FeatureException(SerializationInfo info, StreamingContext context) Parameters info SerializationInfo context StreamingContext FeatureException(string) 指定したエラー メッセージを使用して、 FeatureException クラスの新しいインスタンスを初期化します。 public FeatureException(string message) Parameters message string エラーを説明するメッセージ。 Remarks 詳細については MapQuest.ExceptionManagement.DefaultException を参照してください。 FeatureException(string, Exception) エラー メッセージ、およびこの例外の原因である内部例外への参照を指定して、 FeatureException クラスの新しいインスタンスを初期化します。 public FeatureException(string message, Exception inner) Parameters message string 例外の原因を説明するエラー メッセージ。 inner Exception 現在の例外の原因である例外。 inner パラメータが null 参照でない場合は、内部例外を処理する catch ブロックで現在の例外が発生します。 Remarks 詳細については MapQuest.ExceptionManagement.DefaultException を参照してください。 FeatureException(string, int) Constructor allowing the Message property to be set through the exception ID. protected FeatureException(string prefix, int exceptionID) Parameters prefix string exceptionID int A number identifying the message of the exception in resource file. FeatureException(string, int, Exception) Constructor allowing the Message resource ID and InnerException property to be set. protected FeatureException(string prefix, int exceptionID, Exception inner) Parameters prefix string exceptionID int A number identifying the message of the exception in resource file. inner Exception Sets a reference to the InnerException. FeatureException(string, int, Exception, params object[]) Constructor allowing the Message resource ID and InnerException property to be set. protected FeatureException(string prefix, int exceptionID, Exception inner, params object[] args) Parameters prefix string exceptionID int A number identifying the message of the exception in resource file. inner Exception Sets a reference to the InnerException. args object[] FeatureException(string, int, params object[]) Constructor allowing the Message property to be set through the exception ID. protected FeatureException(string prefix, int exceptionID, params object[] args) Parameters prefix string exceptionID int A number identifying the message of the exception in resource file. args object[]"
  },
  "api/MapQuest.Features.FeatureFactory.html": {
    "href": "api/MapQuest.Features.FeatureFactory.html",
    "title": "Class FeatureFactory | mysite",
    "keywords": "Class FeatureFactory Namespace MapQuest.Features Assembly MapQuest.Features.dll 指定された情報を元に、 Feature オブジェクトを生成するためのクラスです。 public class FeatureFactory Inheritance object FeatureFactory Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors FeatureFactory() FeatureFactory クラスの新しいインスタンスを初期化します。 public FeatureFactory() FeatureFactory(GeometryFactory, string, string) 指定した MapQuest.Topology.Geometries.GeometryFactory を備えた、 FeatureFactory クラスの新しいインスタンスを初期化します。 public FeatureFactory(GeometryFactory factory, string source, string path) Parameters factory GeometryFactory 地物形状を生成する MapQuest.Topology.Geometries.GeometryFactory オブジェクト。 source string この引数は、現在サポートしていません。\"\"(空文字)を指定してください。 path string この引数は、現在サポートしていません。\"\"(空文字)を指定してください。 FeatureFactory(string, string) FeatureFactory クラスの新しいインスタンスを初期化します。 このコンストラクタは、現在サポートしていません。 public FeatureFactory(string source, string path) Parameters source string この引数は、現在サポートしていません。\"\"(空文字)を指定してください。 path string この引数は、現在サポートしていません。\"\"(空文字)を指定してください。 Properties FeatureType public virtual IFeatureType FeatureType { get; set; } Property Value IFeatureType GeometryFactory 各種 MapQuest.Topology.Geometries.Geometry を生成するための GeometryFactory を取得します。 public GeometryFactory GeometryFactory { get; } Property Value GeometryFactory Path public string Path { get; set; } Property Value string Source public string Source { get; set; } Property Value string Methods Create(int, IFeatureType) 指定した識別子（数値）と Feature の種類を示す IFeatureType を備えた Feature インスタンスを生成します。 public virtual Feature Create(int id, IFeatureType featureType) Parameters id int Feature を区別するための識別番号。 featureType IFeatureType Feature の種類を示す IFeatureType オブジェクト。 Returns Feature 生成された Feature オブジェクト。 Create(int, IFeatureType, IFeatureProperty[]) 指定した識別子（数値）と Feature の種類を示す IFeatureType を備えた Feature インスタンスを生成します。 また、指定した IFeatureProperty の配列は、Feature の Propertiesに設定されます。 public virtual Feature Create(int id, IFeatureType featureType, IFeatureProperty[] properties) Parameters id int Feature を区別するための識別番号。 featureType IFeatureType Feature の種類を示す IFeatureType オブジェクト。 properties IFeatureProperty[] Feature の付加情報を示す IFeatureProperty の配列。 Returns Feature 生成された Feature オブジェクト。 Create(int, Geometry) 指定した識別子（数値）と地物形状を備えた Feature インスタンスを生成します。 public virtual Feature Create(int id, Geometry geometry) Parameters id int Feature を区別するための識別番号。 geometry Geometry 地物形状として登録する MapQuest.Topology.Geometries.Geometry オブジェクト。 Returns Feature 生成された Feature オブジェクト。 Create(int, string) 指定した識別子（数値）と地物形状を備えた Feature インスタンスを生成します。 public virtual Feature Create(int id, string wktGeometry) Parameters id int Feature を区別するための識別番号。 wktGeometry string 地物形状を表す Well-known Text ( WKT ) 。 Returns Feature 生成された Feature オブジェクト。 Create(string, IFeatureType) 指定した識別子（文字）と Feature の種類を示す IFeatureType を備えた Feature インスタンスを生成します。 public virtual Feature Create(string id, IFeatureType featureType) Parameters id string Feature を区別するための識別文字列。 featureType IFeatureType Feature の種類を示す IFeatureType オブジェクト。 Returns Feature 生成された Feature オブジェクト。 Create(string, IFeatureType, IFeatureProperty[]) 指定した識別子（文字）と Feature の種類を示す IFeatureType を備えた Feature インスタンスを生成します。 また、指定した IFeatureProperty の配列は、Feature の Propertiesに設定されます。 public virtual Feature Create(string id, IFeatureType featureType, IFeatureProperty[] properties) Parameters id string Feature を区別するための識別文字列。 featureType IFeatureType Feature の種類を示す IFeatureType オブジェクト。 properties IFeatureProperty[] Feature の付加情報を示す IFeatureProperty の配列。 Returns Feature 生成された Feature オブジェクト。 Create(string, Geometry) 指定した識別子（文字）と地物形状を備えた Feature インスタンスを生成します。 public virtual Feature Create(string id, Geometry geometry) Parameters id string Feature を区別するための識別文字列。 geometry Geometry 地物形状として登録する MapQuest.Topology.Geometries.Geometry オブジェクト。 Returns Feature 生成された Feature オブジェクト。 Create(string, byte[]) 指定した識別子（文字）と地物形状を備えた Feature インスタンスを生成します。 public virtual Feature Create(string id, byte[] wkbGeometry) Parameters id string Feature を区別するための識別文字列。 wkbGeometry byte[] 地物形状を表す WKB(Well-known binary)形式で表したバイト列。 Returns Feature 生成された Feature オブジェクト。 Create(string, Stream) 指定した識別子（文字）と地物形状を備えた Feature インスタンスを生成します。 public virtual Feature Create(string id, Stream wkbStream) Parameters id string Feature を区別するための識別文字列。 wkbStream Stream WKB(Well-known binary)形式のストリーム Returns Feature 生成された Feature オブジェクト。 Create(string, string) 指定した識別子（文字）と地物形状を備えた Feature インスタンスを生成します。 public virtual Feature Create(string id, string wktGeometry) Parameters id string Feature を区別するための識別文字列。 wktGeometry string 地物形状を表す Well-known Text ( WKT ) 。 Returns Feature 生成された Feature オブジェクト。 CreateFeatureID(Geometry) 新しい Feature に付与する ID を生成します。 public virtual string CreateFeatureID(Geometry geometry) Parameters geometry Geometry 付与する ID 生成のための情報となる MapQuest.Topology.Geometries.Geometry 。 Returns string 新しい Feature に付与する ID 。 Remarks このメソッドは、Feature の新規追加などで、生成した新しい Feature に付ける ID を提供します。 引数 geometry は、ID 生成の アルゴリズムに使われる場合があります。 例えば、派生クラスである MqxFeatureFactory.CreateFeatureID では、geometry の中心位置を ID とするルールがあります。 しかし、既定の実装では geometry は使用していません。 既定の実装では ID には、新しい GUID(Guid.NewGuid) が使用されます。 CreateFeatureProperty(string, object) Feature インスタンスを生成します。 public virtual FeatureProperty CreateFeatureProperty(string name, object value) Parameters name string Feature を区別するための識別文字列。 value object 地物形状として登録する MapQuest.Topology.Geometries.Geometry オブジェクト。 Returns FeatureProperty 生成された FeatureProperty オブジェクト。 CreateFeatureType(AttributesSchemaList) public virtual FeatureType CreateFeatureType(AttributesSchemaList schema) Parameters schema AttributesSchemaList Returns FeatureType CreateFeatureType(AttributesSchemaList, IFeatureType[], IFeatureType[]) public virtual FeatureType CreateFeatureType(AttributesSchemaList schema, IFeatureType[] parents, IFeatureType[] children) Parameters schema AttributesSchemaList parents IFeatureType[] children IFeatureType[] Returns FeatureType CreateFeatureType(DataTable) public virtual FeatureType CreateFeatureType(DataTable table) Parameters table DataTable Returns FeatureType CreateFeatureType(DataTable, IFeatureType[], IFeatureType[]) public virtual FeatureType CreateFeatureType(DataTable table, IFeatureType[] parents, IFeatureType[] children) Parameters table DataTable parents IFeatureType[] children IFeatureType[] Returns FeatureType CreateFeatureType(IDbConnection, string) creates an instance of a IFeatureType from an array of FeatureTypeProperties, its parents and childs and its name. public virtual FeatureType CreateFeatureType(IDbConnection connection, string tableName) Parameters connection IDbConnection tableName string Returns FeatureType instance of a IFeatureType CreateFeatureType(IDbConnection, string, IFeatureType[], IFeatureType[]) creates an instance of a IFeatureType from an array of FeatureTypeProperties, its parents and childs and its name. public virtual FeatureType CreateFeatureType(IDbConnection connection, string tableName, IFeatureType[] parents, IFeatureType[] children) Parameters connection IDbConnection tableName string parents IFeatureType[] parents of the IFeatureType children IFeatureType[] known children of the IFeatureType Returns FeatureType instance of a IFeatureType CreateFeatureType(string, IFeatureType[], IFeatureType[], IFeatureTypeProperty[]) creates an instance of a IFeatureType from an array of FeatureTypeProperties, its parents and childs and its name. public virtual FeatureType CreateFeatureType(string name, IFeatureType[] parents, IFeatureType[] children, IFeatureTypeProperty[] properties) Parameters name string name of the IFeatureType parents IFeatureType[] parents of the IFeatureType children IFeatureType[] known children of the IFeatureType properties IFeatureTypeProperty[] properties containing the IFeatureTypes content Returns FeatureType instance of a IFeatureType CreateFeatureTypeProperty(string, string, bool) creates an instance of a IFeatureTypeProperty from its name and the data type it describes public virtual FeatureTypeProperty CreateFeatureTypeProperty(string name, string type, bool nullable) Parameters name string name of the feature type property type string type represented by the feature type property nullable bool true if the feature type property is allowed to be null Returns FeatureTypeProperty instance of a IFeatureTypeProperty CreateFromWKT(string) public virtual Feature CreateFromWKT(string featureWKT) Parameters featureWKT string Returns Feature CreateFromXML(string) public virtual Feature CreateFromXML(string featureXML) Parameters featureXML string Returns Feature"
  },
  "api/MapQuest.Features.FeatureIterator.html": {
    "href": "api/MapQuest.Features.FeatureIterator.html",
    "title": "Class FeatureIterator | mysite",
    "keywords": "Class FeatureIterator Namespace MapQuest.Features Assembly MapQuest.Features.dll Feature のコレクションを順番に走査するためのクラスです。 public sealed class FeatureIterator : IFeatureIterator, IEnumerator<Feature>, IDisposable, IEnumerator Inheritance object FeatureIterator Implements IFeatureIterator IEnumerator<Feature> IDisposable IEnumerator Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() Properties Count コレクションに格納されている地物の数を取得します。 public int Count { get; } Property Value int コレクションに格納されている地物の数。 caution 結果の総数が判らない場合は「-1」を返します。 Current コレクション内の現在の Feature を取得します。 public Feature Current { get; } Property Value Feature コレクション内の現在の Feature 。 Remarks 詳細については Current を参照してください。 Exceptions InvalidOperationException 列挙子が、コレクションの最初の要素の前、 または最後の要素の後に位置しています。 Methods Close() コレクションの内容を解放します。 このメソッドは、現在サポートしていません。 public void Close() Dispose() public void Dispose() MoveNext() 列挙子をコレクションの次の Feature に進めます。 public bool MoveNext() Returns bool 列挙子が次の Feature に正常に進んだ場合は true 。 列挙子がコレクションの末尾を越えた場合は false 。 Remarks 詳細については MoveNext() を参照してください。 Exceptions InvalidOperationException 列挙子が作成された後に、コレクションが変更されました。 Reset() 列挙子を初期位置、つまりコレクションの最初の Feature の前に設定します。 public void Reset() Remarks 詳細については Reset() を参照してください。 Exceptions InvalidOperationException 列挙子が作成された後に、コレクションが変更されました。"
  },
  "api/MapQuest.Features.FeatureOperator.html": {
    "href": "api/MapQuest.Features.FeatureOperator.html",
    "title": "Class FeatureOperator | mysite",
    "keywords": "Class FeatureOperator Namespace MapQuest.Features Assembly MapQuest.Features.dll 空間解析や空間演算を処理するためのクラスです。 Feature から MapQuest.Topology.Geometries.Geometry を取得しなくても解析や演算処理を行うことができます。 public sealed class FeatureOperator Inheritance object FeatureOperator Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() Constructors FeatureOperator(FeatureFactory) 指定した Factory を備えた、 FeatureOperator クラスの新しいインスタンスを初期化します。 public FeatureOperator(FeatureFactory factory) Parameters factory FeatureFactory 空間演算により Feature を生成するための FeatureFactory オブジェクト。 Remarks バッファ処理のキャップ スタイルには、 全て MapQuest.Topology.Operation.BufferEndCapStyle.Round が指定されます。 FeatureOperator(FeatureFactory, BufferEndCapStyle) 指定した Factory 、キャップ スタイルを備えた、 FeatureOperator クラスの新しいインスタンスを初期化します。 public FeatureOperator(FeatureFactory factory, BufferEndCapStyle bufferStyle) Parameters factory FeatureFactory 空間演算により Feature を生成するための FeatureFactory オブジェクト。 bufferStyle BufferEndCapStyle バッファ処理で使用されるキャップ スタイル。 Properties BufferStyle バッファ処理で使用されるキャップ スタイルを取得または設定します。 public BufferEndCapStyle BufferStyle { get; set; } Property Value BufferEndCapStyle バッファ処理で使用されるキャップ スタイル。 Error FeatureOperator 内の直前の処理で発生したエラー情報を取得します。 public Exception Error { get; } Property Value Exception FeatureOperator 内の直前の処理で発生したエラー情報。 Factory 空間演算処理において Feature の生成に使用される FeatureFactory を取得または設定します。 public FeatureFactory Factory { get; set; } Property Value FeatureFactory Feature の生成に使用される FeatureFactory オブジェクト。 Exceptions ArgumentNullException 指定された FeatureFactory が null 参照 (Visual Basic では Nothing) です。 Methods Buffer(Feature, double) 指定された距離から、一定幅のエリアを計算します。 public Feature Buffer(Feature feature, double distance) Parameters feature Feature バッファリングする Feature オブジェクト。 distance double バッファリングする距離。 Returns Feature バッファリングした Feature 。 それ以外の場合は null 。 Remarks 通常、バッファリングで得られるアウトラインには、カーブが含まれます。 MapQuest.NET では、ラインのジオメトリを用いて、その形状にに近づけます。 このとき、近似の程度はユーザーによってコントロールすることができます。 MapQuest.NET では、4 分割した円を基準としたセグメント数（分割数）。 このセグメント数を多く指定すると、より実際の形状に近づくことになります。 セグメント数の既定値は 8 です。 Buffer(Feature, double, int) 指定された距離とセグメント数から、一定幅のエリアを計算します。 public Feature Buffer(Feature feature, double distance, int quadrantSegments) Parameters feature Feature バッファリングする Feature オブジェクト。 distance double バッファリングする距離。 quadrantSegments int カーブのセグメント数。 Returns Feature バッファリングした Feature 。 それ以外の場合は null 。 Remarks セグメント数については Buffer(Feature, double) の解説を参照してください。 Buffer(IFeatureIterator, double) 指定された距離と複数の地物から、一定幅のエリアを計算します。 public Feature Buffer(IFeatureIterator iterator, double distance) Parameters iterator IFeatureIterator バッファリングする 1 つ以上の地物を含む IFeatureIterator 。 distance double バッファリングする距離。 Returns Feature バッファリングした Feature 。 それ以外の場合は null 。 Buffer(IFeatureIterator, double, int) 指定された距離と複数の地物とセグメント数から、一定幅のエリアを計算します。 public Feature Buffer(IFeatureIterator iterator, double distance, int quadrantSegments) Parameters iterator IFeatureIterator バッファリングする 1 つ以上の地物を含む IFeatureIterator 。 distance double バッファリングする距離。 quadrantSegments int カーブのセグメント数。 Returns Feature バッファリングした Feature 。 それ以外の場合は null 。 Remarks セグメント数については Buffer(Feature, double) の解説を参照してください。 Buffer(IFeatureList, double) 指定された距離と複数の地物から、一定幅のエリアを計算します。 public Feature Buffer(IFeatureList features, double distance) Parameters features IFeatureList バッファリングする 1 つ以上の地物を含む IFeatureList 。 distance double バッファリングする距離。 Returns Feature バッファリングした Feature 。 それ以外の場合は null 。 Buffer(IFeatureList, double, int) 指定された距離と複数の地物とセグメント数から、一定幅のエリアを計算します。 public Feature Buffer(IFeatureList features, double distance, int quadrantSegments) Parameters features IFeatureList バッファリングする 1 つ以上の地物を含む IFeatureList 。 distance double バッファリングする距離。 quadrantSegments int カーブのセグメント数。 Returns Feature バッファリングした Feature 。 それ以外の場合は null 。 Remarks セグメント数については Buffer(Feature, double) の解説を参照してください。 ConvexHull(Feature) 指定された地物の全てのポイントを含む、 最も小さな凸面を持つ地物を計算します。 public Feature ConvexHull(Feature feature) Parameters feature Feature 計算対象となるポイントを持つ Feature 。 Returns Feature 凸面を計算した Feature 。 それ以外の場合は null 。 Difference(Feature, Feature) 二つの地物形状の論理差を計算します。 public Feature Difference(Feature feature1, Feature feature2) Parameters feature1 Feature 論理差を求める Feature オブジェクト。 feature2 Feature 差分となる Feature オブジェクト。 Returns Feature 論理差を計算した Feature 。 それ以外の場合は null 。 Intersection(Feature, Feature) 二つの地物形状の交差を計算します。 public Feature Intersection(Feature feature1, Feature feature2) Parameters feature1 Feature 交差する Feature オブジェクト１。 feature2 Feature 交差する Feature オブジェクト２。 Returns Feature 交差した Feature 。 それ以外の場合は null 。 Intersection(IFeatureIterator) 複数の地物形状の交差を計算します。 public Feature Intersection(IFeatureIterator iterator) Parameters iterator IFeatureIterator 計算対象となる 1 つ以上の地物を含む IFeatureIterator 。 Returns Feature 交差した Feature 。 それ以外の場合は null 。 Intersection(IFeatureList) 複数の地物形状の交差を計算します。 public Feature Intersection(IFeatureList features) Parameters features IFeatureList 交差する 1 つ以上の地物を含む IFeatureList 。 Returns Feature 交差した Feature 。 それ以外の場合は null 。 Relate(Feature, Feature) 指定された地物間の位置関係（リレーションシップ）を計算します。 このメソッドは、現在サポートしていません。 public IntersectionMatrix Relate(Feature feature1, Feature feature2) Parameters feature1 Feature 比較する Feature オブジェクト１。 feature2 Feature 比較する Feature オブジェクト２。 Returns IntersectionMatrix 二つの地物のリレーションシップが定義された MapQuest.Topology.Geometries.IntersectionMatrix オブジェクト。 それ以外の場合は null 。 Remarks MapQuest.Topology.Geometries.IntersectionMatrix は、 http://www.opengis.org に定義されている交差マトリックス 「 Dimensionally-Extended 9 Intersection Matrix 」 ( DE-9IM ) に準拠しています。 SymmetricDifference(Feature, Feature) 二つの地物形状の排他的論理和を計算します。 public Feature SymmetricDifference(Feature feature1, Feature feature2) Parameters feature1 Feature 排他的論理和を求める Feature オブジェクト１。 feature2 Feature 排他的論理和を求める Feature オブジェクト２。 Returns Feature 排他的論理和を計算した Feature 。 それ以外の場合は null 。 Union(Feature, Feature) 二つの地物形状の結合を計算します。 public Feature Union(Feature feature1, Feature feature2) Parameters feature1 Feature 結合する Feature オブジェクト１。 feature2 Feature 結合する Feature オブジェクト２。 Returns Feature 結合した Feature 。 それ以外の場合は null 。 Union(IFeatureIterator) 複数の地物形状の結合を計算します。 public Feature Union(IFeatureIterator iterator) Parameters iterator IFeatureIterator 結合する 1 つ以上の地物を含む IFeatureIterator 。 Returns Feature 結合した Feature 。 それ以外の場合は null 。 Union(IFeatureList) 複数の地物形状の結合を計算します。 public Feature Union(IFeatureList features) Parameters features IFeatureList 結合する 1 つ以上の地物を含む IFeatureList 。 Returns Feature 結合した Feature 。 それ以外の場合は null 。"
  },
  "api/MapQuest.Features.FeatureProperty.html": {
    "href": "api/MapQuest.Features.FeatureProperty.html",
    "title": "Struct FeatureProperty | mysite",
    "keywords": "Struct FeatureProperty Namespace MapQuest.Features Assembly MapQuest.Features.dll Summary description for FeatureProperty. public struct FeatureProperty Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Constructors FeatureProperty(string, object) public FeatureProperty(string name, object value) Parameters name string value object Properties Name public string Name { get; set; } Property Value string Value public object Value { get; set; } Property Value object"
  },
  "api/MapQuest.Features.FeatureReprojection.html": {
    "href": "api/MapQuest.Features.FeatureReprojection.html",
    "title": "Class FeatureReprojection | mysite",
    "keywords": "Class FeatureReprojection Namespace MapQuest.Features Assembly MapQuest.Features.dll Feature の座標系を変換するためのクラスです。 public sealed class FeatureReprojection : IGeometryComponentVisitor, ICloneable Inheritance object FeatureReprojection Implements IGeometryComponentVisitor ICloneable Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() Remarks このクラスは、Feature.Geometry の座標系を変換します。 Constructors FeatureReprojection(ICoordinateTransformation) 変換に使用する MapQuest.CoordinateTransformations.ICoordinateTransformation を指定して、 新しいインスタンスを初期化します。 public FeatureReprojection(ICoordinateTransformation transformation) Parameters transformation ICoordinateTransformation 変換の際に使用する MapQuest.CoordinateTransformations.ICoordinateTransformation 。 Properties FixAngleByReprojection 投影変換によるシンボル、及びテキストを回転しない public bool FixAngleByReprojection { get; set; } Property Value bool LastException 最後に発生した例外を取得します。 public Exception LastException { get; } Property Value Exception 最後に発生した Exception 。 Transformation 現在の MapQuest.CoordinateTransformations.ICoordinateTransformation を取得します。 public ICoordinateTransformation Transformation { get; } Property Value ICoordinateTransformation 現在の MapQuest.CoordinateTransformations.ICoordinateTransformation Methods Clone() 現在のインスタンスの簡易コピーを生成します。 public object Clone() Returns object 現在のインスタンスの簡易コピー Remarks Transformation は、Clone されません。参照が渡されます。 GetDistance(Coordinate, Coordinate) 指定された 2 点間の距離を取得します。 public static double GetDistance(Coordinate p1, Coordinate p2) Parameters p1 Coordinate 第 1 の座標。 p2 Coordinate 第 2 の座標。 Returns double 2 点間の距離。 Remarks NSECOM32.DLL nse_GetDistance からの移植です。 GetLineAngle(Coordinate, Coordinate, Coordinate) 3 つの座標で構成される線分の狭い領域の角度を取得します。 public static double GetLineAngle(Coordinate p1, Coordinate p2, Coordinate p3) Parameters p1 Coordinate 第 1 の座標。 p2 Coordinate 第 2 の座標。 p3 Coordinate 第 3 の座標。 Returns double 3 つの座標で構成される線分の狭い領域の角度。 必ず 0 ～ 180 の値になります。 Remarks NSECOM32.DLL nse_GetLineAngle からの移植です。 Reprojected(Feature) 指定した Feature の座標を変換します。 public bool Reprojected(Feature feature) Parameters feature Feature 座標を変換する Feature 。 Returns bool 変換に成功したら true 、それ以外の場合は false を返します。 Remarks Reprojected(feature.Geometry) を呼び出します。 Reprojected(Geometry) 指定した MapQuest.Topology.Geometries.Geometry の座標を変換します。 public bool Reprojected(Geometry geometry) Parameters geometry Geometry 座標を変換する MapQuest.Topology.Geometries.Geometry 。 Returns bool 変換に成功したら true 、それ以外の場合は false を返します。"
  },
  "api/MapQuest.Features.FeatureSchema.html": {
    "href": "api/MapQuest.Features.FeatureSchema.html",
    "title": "Class FeatureSchema | mysite",
    "keywords": "Class FeatureSchema Namespace MapQuest.Features Assembly MapQuest.Features.dll 座標系や形状の種類など、 IFeatureClass の定義情報を管理します。 このクラスが持つ情報は、「階層」として管理される情報と同じものです。 public class FeatureSchema : ICloneable, ISerializable Inheritance object FeatureSchema Implements ICloneable ISerializable Inherited Members object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Remarks FeatureSchema は、FeatureClass の定義情報(メタ情報)です。 主に、LayerManager によって FeatureLayer が生成される際に使用されます。 例えば、階層の番号には、Number が適用され、 階層の名称には、Name が適用されます。 階層のスタイルには、Styling で示されるスタイル名称を キーにして、FeatureStylesManager から取得した StyleList が適用されます。 Constructors FeatureSchema() FeatureSchema クラスの新しいインスタンスを初期化します。 public FeatureSchema() Remarks 文字列のメンバは、全て Empty が指定されます。 FeatureSchema(ICoordinateSystem, string, string, Envelope) 指定した座標系、スタイル、名前、管理範囲を備えた、 FeatureSchema クラスの新しいインスタンスを初期化します。 public FeatureSchema(ICoordinateSystem spatialRef, string styling, string name, Envelope bounds) Parameters spatialRef ICoordinateSystem 空間参照を表す CoordinateSystem 。 styling string スタイルへのインデックス名称。 name string 地物が属しているグループの名前。 bounds Envelope 管理範囲を表す Envelope 。 FeatureSchema(ICoordinateSystem, string, string, GeometryType, AttributesSchemaList[]) 指定した座標系、スタイル、名前、地物形状の種類、属性定義を備えた、 FeatureSchema クラスの新しいインスタンスを初期化します。 public FeatureSchema(ICoordinateSystem spatialRef, string styling, string name, GeometryType geometryType, AttributesSchemaList[] attributesSchemaLists) Parameters spatialRef ICoordinateSystem 空間参照を表す CoordinateSystem 。 styling string スタイルへのインデックス名称。 name string 地物が属しているグループの名前。 geometryType GeometryType 地物形状の種類を表す MapQuest.Topology.Geometries.GeometryType 。 attributesSchemaLists AttributesSchemaList[] 属性定義を表す MapQuest.Database.AttributesSchemaList の配列。 FeatureSchema(ICoordinateSystem, string, string, GeometryType, AttributesSchemaList[], int, Envelope) FeatureSchema が管理する全ての項目を指定した、 新しいインスタンスを初期化します。 public FeatureSchema(ICoordinateSystem spatialRef, string styling, string name, GeometryType geometryType, AttributesSchemaList[] attributesSchemaLists, int number, Envelope bounds) Parameters spatialRef ICoordinateSystem 空間参照を定義した CoordinateSystem オブジェクト。 styling string スタイルへのインデックス名称。 name string 地物が属しているグループの名前。 geometryType GeometryType 地物形状の種類を表す MapQuest.Topology.Geometries.GeometryType 。 attributesSchemaLists AttributesSchemaList[] 属性定義を表す MapQuest.Database.AttributesSchemaList の配列。 number int 地物が属しているデータセットの番号。 bounds Envelope 管理範囲を表す Envelope 。 FeatureSchema(FeatureSchema) FeatureSchema を指定して、新しいインスタンスを初期化します。 public FeatureSchema(FeatureSchema schema) Parameters schema FeatureSchema FeatureSchema オブジェクト。 Remarks FeatureSchema をコピーするためのコピー コンストラクタです。 FeatureSchema(SerializationInfo, StreamingContext) シリアル化された情報からFeatureSchemaを作成します。 public FeatureSchema(SerializationInfo info, StreamingContext context) Parameters info SerializationInfo シリアル化する情報を格納するオブジェクト context StreamingContext FeatureSchema(string, int) 名前、番号を指定して、 FeatureSchema クラスの新しいインスタンスを初期化します。 public FeatureSchema(string name, int number) Parameters name string 地物が属しているクラスの名前。 number int 地物が属しているクラスの番号。 Properties AttributesSchemaLists 地物にリンクする属性の定義情報を取得します。 public AttributesSchemaList[] AttributesSchemaLists { get; set; } Property Value AttributesSchemaList[] Bounds 地物が属しているグループの管理範囲を取得します。 public Envelope Bounds { get; } Property Value Envelope 管理範囲を表す Envelope 。 CoordinateSystem 地物が属しているグループの座標系を取得します。 public ICoordinateSystem CoordinateSystem { get; } Property Value ICoordinateSystem 空間参照を表す ICoordinateSystem 。 GeometryType 地物形状の種類を取得します。 public GeometryType GeometryType { get; set; } Property Value GeometryType 地物形状の種類を表す MapQuest.Topology.Geometries.GeometryType 。 Invisible [Browsable(false)] public bool Invisible { get; set; } Property Value bool IsEditable public bool IsEditable { get; set; } Property Value bool IsExportable public bool IsExportable { get; set; } Property Value bool IsSelectable public bool IsSelectable { get; set; } Property Value bool Name 地物が属しているグループの名称を取得します。 public string Name { get; set; } Property Value string 地物が属しているグループの名称。 Remarks 通常、このプロパティの値は、階層名称として使用されます。 Number 地物が属しているグループの番号を取得します。 public int Number { get; } Property Value int 地物が属しているグループの番号。 Remarks 通常、このプロパティの値は、階層番号として使用されます。 Styling 地物を表現するスタイルへのインデックス名称を取得します。 public string Styling { get; set; } Property Value string スタイルへのインデックス名称。 Remarks 通常、地物を表現するスタイルは、ユニークな名称と対で用意されます。 スタイルを要する機能は、このプロパティから名称を取得することで、 対応するスタイルを検索します。 Methods Clone() 現在のインスタンスのコピーである新しいオブジェクトを作成します。 public object Clone() Returns object コピーされた新しい FeatureSchema オブジェクト。 Equals(object) このインスタンスと他のインスタンスが等しいかを調べます。 public override bool Equals(object obj) Parameters obj object 等しいか調べる他の FeatureSchema インスタンス。 Returns bool 等しければ true を返します。 それ以外の場合は false を返します。 Remarks このメソッドは、FeatureSchema の 全てのプロパティに対して Equals を行い、 全て true が返されれば一致しているとみなします。 GetHashCode() このメンバは Object.GetHashCode をオーバーライドします。 public override int GetHashCode() Returns int GetObjectData(SerializationInfo, StreamingContext) オブジェクトをシリアル化します。 public void GetObjectData(SerializationInfo info, StreamingContext context) Parameters info SerializationInfo シリアル化する情報を格納するオブジェクト context StreamingContext"
  },
  "api/MapQuest.Features.FeatureType.html": {
    "href": "api/MapQuest.Features.FeatureType.html",
    "title": "Class FeatureType | mysite",
    "keywords": "Class FeatureType Namespace MapQuest.Features Assembly MapQuest.Features.dll IFeatureType インターフェースを実装した、 IFeature のタイプの詳細を提供するクラスです。 public class FeatureType : IFeatureType, ISerializable Inheritance object FeatureType Implements IFeatureType ISerializable Inherited Members object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks IFeature は IFeatureType を必要とします。 Constructors FeatureType() インスタンスを生成します。 public FeatureType() FeatureType(IFeatureType[], IFeatureType[], string, IFeatureTypeProperty[]) 親、子、名前、プロパティを指定してインスタンスを生成します。 public FeatureType(IFeatureType[] parents, IFeatureType[] children, string name, IFeatureTypeProperty[] properties) Parameters parents IFeatureType[] Parents にマップされます。 children IFeatureType[] Children にマップされます。 name string Name にマップされます。 properties IFeatureTypeProperty[] Properties にマップされます。 FeatureType(SerializationInfo, StreamingContext) シリアル化された情報からFeatureTypeを作成します。 public FeatureType(SerializationInfo info, StreamingContext context) Parameters info SerializationInfo シリアル化する情報を格納するオブジェクト context StreamingContext Properties Children 子となる IFeatureType の配列を返します。 public IFeatureType[] Children { get; } Property Value IFeatureType[] 子となる IFeatureType の配列。子が存在しない場合は null 。 読み取り専用です。 Name この FeatureType の名称を返します。 public string Name { get; } Property Value string FeatureType の名称。読み取り専用です。 Parents 親となる IFeatureType の配列を返します。 public IFeatureType[] Parents { get; } Property Value IFeatureType[] 親となる IFeatureType の配列。親が存在しない場合は null 。 読み取り専用です。 Properties この FeatureType のプロパティを取得します。 public IFeatureTypeProperty[] Properties { get; } Property Value IFeatureTypeProperty[] FeatureType のプロパティを示す IFeatureTypeProperty を配列。 Methods Equals(object) オブジェクトの内容が等しい場合に真を返します。 public override bool Equals(object obj) Parameters obj object 比較するFeatureType Returns bool 等価であるか GetObjectData(SerializationInfo, StreamingContext) オブジェクトをシリアル化します。 public void GetObjectData(SerializationInfo info, StreamingContext context) Parameters info SerializationInfo シリアル化する情報を格納するオブジェクト context StreamingContext GetProperty(string) 指定した名称の IFeatureTypeProperty を取得します。 public IFeatureTypeProperty GetProperty(string name) Parameters name string 取得したい IFeatureTypeProperty の名称。 Returns IFeatureTypeProperty 指定した名称の IFeatureTypeProperty 。 ToString() このインスタンスを文字列化します。 public override string ToString() Returns string この FeatureType を文字列化したもの。"
  },
  "api/MapQuest.Features.FeatureTypeProperty.html": {
    "href": "api/MapQuest.Features.FeatureTypeProperty.html",
    "title": "Class FeatureTypeProperty | mysite",
    "keywords": "Class FeatureTypeProperty Namespace MapQuest.Features Assembly MapQuest.Features.dll the interface describes a property entry of a feature type. the name of the property must be equal to the name of the corresponding feature property. public sealed class FeatureTypeProperty : IFeatureTypeProperty, ISerializable Inheritance object FeatureTypeProperty Implements IFeatureTypeProperty ISerializable Inherited Members object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() Constructors FeatureTypeProperty(SerializationInfo, StreamingContext) シリアル化された情報からFeatureTypePropertyを作成します。 public FeatureTypeProperty(SerializationInfo info, StreamingContext context) Parameters info SerializationInfo シリアル化する情報を格納するオブジェクト context StreamingContext FeatureTypeProperty(string, string, bool) initializes a IFeatureTypeProperty with its name its associated type and a boolean variable that says if the propetry maybe null public FeatureTypeProperty(string name, string type, bool nullable) Parameters name string type string nullable bool Properties IsNullable returns true if the property value is allowed to be null public bool IsNullable { get; } Property Value bool Name returns the name of the property public string Name { get; } Property Value string Type returns the name of the data type of the property. public string Type { get; } Property Value string Methods Equals(object) オブジェクトの内容が等しい場合に真を返します。 public override bool Equals(object obj) Parameters obj object 比較するFeatureTypeProperty Returns bool 等価であるか GetObjectData(SerializationInfo, StreamingContext) オブジェクトをシリアル化します。 public void GetObjectData(SerializationInfo info, StreamingContext context) Parameters info SerializationInfo シリアル化する情報を格納するオブジェクト context StreamingContext ToString() public override string ToString() Returns string"
  },
  "api/MapQuest.Features.IFeature.html": {
    "href": "api/MapQuest.Features.IFeature.html",
    "title": "Interface IFeature | mysite",
    "keywords": "Interface IFeature Namespace MapQuest.Features Assembly MapQuest.Features.dll 実世界の現象の抽出概念である地物を表現するためのインターフェースです。 道路や建物を現す形状とこれにリンクする属性などの情報を一つのまとまりとし、 地図を表現する最小単位として定義します。 public interface IFeature : IComparable, ICloneable, ISerializable Inherited Members IComparable.CompareTo(object) ICloneable.Clone() ISerializable.GetObjectData(SerializationInfo, StreamingContext) Properties Envelope 地物の範囲を取得します。 Envelope Envelope { get; } Property Value Envelope 地物が管理される範囲の Envelope オブジェクト。それ以外の場合は null 。 Geometry 地物の形状を取得します。 Geometry Geometry { get; } Property Value Geometry 地物として定義された Geometry オブジェクト。それ以外の場合は null 。 ID 地物の識別子を取得します。 string ID { get; } Property Value string 地物を識別する一意の文字列。 Remarks このプロパティの値は、各プロバイダが管理してください。 this[string] 指定されたインデックスの属性を取得または設定します。 object this[string name] { get; set; } Parameters name string 取得する属性のインデックス名。 Property Value object 指定されたインデックスの属性の値。 Properties 地物の属性を取得します。 IDictionary Properties { get; } Property Value IDictionary 定義されている地物の属性を定義した IDictionary オブジェクト。それ以外の場合は null 。 PropertyCount 地物の属性の数を取得します。 int PropertyCount { get; } Property Value int 設定されている地物の属性の数。 Methods GetProperty(string) 地物の属性の有無を確認します。 object GetProperty(string name) Parameters name string Returns object 指定された項目の属性がある場合は true。それ以外の場合は false 。 HasProperty(string) 地物の属性の有無を確認します。 bool HasProperty(string name) Parameters name string Returns bool 指定された項目の属性がある場合は true。それ以外の場合は false 。 SetProperty(string, object) 地物の属性を設定します。 void SetProperty(string name, object value) Parameters name string 設定する属性の項目名。 value object 設定する属性の値。"
  },
  "api/MapQuest.Features.IFeatureCollection.html": {
    "href": "api/MapQuest.Features.IFeatureCollection.html",
    "title": "Interface IFeatureCollection | mysite",
    "keywords": "Interface IFeatureCollection Namespace MapQuest.Features Assembly MapQuest.Features.dll Feature を収集するコレクションについて、 サイズ、列挙子、および同期メソッドを定義します。 public interface IFeatureCollection : IEnumerable<Feature>, IEnumerable Inherited Members IEnumerable<Feature>.GetEnumerator() Remarks FeatureCollection は、地物用に最適化された ICollection コレクションを提供します。 Properties Count FeatureCollection に実際に格納されている地物の数を取得します。 int Count { get; } Property Value int FeatureCollection に実際に格納されている地物の数。 Remarks 詳細については Count を参照してください。 Envelope FeatureCollection に格納されている地物の範囲を取得します。 Envelope Envelope { get; } Property Value Envelope FeatureCollection に格納されている要素全てを包括する範囲。 IsSynchronized FeatureCollection へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。 このプロパティは、現在サポートしていません。 bool IsSynchronized { get; } Property Value bool FeatureCollection へのアクセスが同期されている (スレッド セーフである) 場合は true 。 それ以外の場合は false 。 Remarks 詳細については IsSynchronized を参照してください。 Schema この FeatureCollection についての情報を取得します。 FeatureSchema Schema { get; } Property Value FeatureSchema FeatureCollection についての情報。 Remarks Schema は、Feature が持つ地物に関する定義情報です。 MapQuest.FeatureProviders.FeatureClass が管理します。 SyncRoot FeatureCollection へのアクセスを同期するために使用できるオブジェクトを取得します。 このプロパティは、現在サポートしていません。 object SyncRoot { get; } Property Value object FeatureCollection へのアクセスを同期するために使用できるオブジェクト。 Remarks 詳細については SyncRoot を参照してください。 Methods CopyTo(Feature[], int) 指定のインデックスを開始位置として、 FeatureCollection の要素を Feature の 1 次元配列にコピーします。 void CopyTo(Feature[] array, int arrayIndex) Parameters array Feature[] FeatureCollection から要素がコピーされる Feature の 1 次元配列。この配列には、0 から始まるインデックス番号が必要です。 arrayIndex int コピーの開始位置となる、 0 から始まるインデックス番号。 Remarks 詳細については CopyTo(Array, int) を参照してください。 CreateIterator() FeatureCollection に格納されている地物を順にアクセスする方法を提供する IFeatureIterator を作成します。 IFeatureIterator CreateIterator() Returns IFeatureIterator FeatureCollection に格納されている地物を順にアクセスする方法を含んだ IFeatureIterator オブジェクト。 Remarks 詳細については GetEnumerator() を参照してください。 Query(Envelope) 指定された範囲の地物を検索します。 IFeatureList Query(Envelope area) Parameters area Envelope 検索したい範囲。 Returns IFeatureList 検索されたインデックスによって個別にアクセスできる IFeatureList コレクション。 Remove(Envelope) FeatureCollection 内から指定された範囲に含まれる Feature オブジェクトを削除します。 IFeatureList Remove(Envelope area) Parameters area Envelope FeatureCollection から削除したい範囲を示す Envelope 。 Returns IFeatureList FeatureCollection から削除した Feature を持つ IFeatureList オブジェクト。 Sort() 各要素の IComparable 実装を使用して、 IFeatureCollection 全体内の要素を並べ替えます。 void Sort() Sort(IComparer) 指定した比較演算子を使用して、 IFeatureCollection 全体内の要素を並べ替えます。 void Sort(IComparer comparer) Parameters comparer IComparer 要素を比較する場合に使用する IComparer 実装。 Sort(int, int, IComparer) 指定した比較演算子を使用して、 IFeatureCollection の一部の要素を並べ替えます。 void Sort(int index, int count, IComparer comparer) Parameters index int 並べ替える範囲の開始位置を示す 0 から始まるインデックス。 count int 並べ替える範囲の長さ。 comparer IComparer 要素を比較する場合に使用する IComparer 実装。 または 各要素の IComparable 実装を使用する場合は null 。"
  },
  "api/MapQuest.Features.IFeatureIterator.html": {
    "href": "api/MapQuest.Features.IFeatureIterator.html",
    "title": "Interface IFeatureIterator | mysite",
    "keywords": "Interface IFeatureIterator Namespace MapQuest.Features Assembly MapQuest.Features.dll Feature のコレクションを順番に走査するためのインターフェースです。 public interface IFeatureIterator Remarks IFeatureIterator は、 Feature に特化した IEnumerator インターフェースを提供します。 Properties Count コレクションに格納されている地物の数を取得します。 int Count { get; } Property Value int コレクションに格納されている地物の数。 caution 結果の総数が判らない場合は「-1」を返します。 Current コレクション内の現在の Feature を取得します。 Feature Current { get; } Property Value Feature コレクション内の現在の Feature 。 Remarks 詳細については IEnumerator.Current を参照してください。 Exceptions InvalidOperationException 列挙子が、コレクションの最初の要素の前、 または最後の要素の後に位置しています。 Methods Close() コレクションの内容を解放します。 void Close() Remarks このインターフェースを実装する際は、 IDisposable インターフェースをサポートすることを 推奨します。 MoveNext() 列挙子をコレクションの次の Feature に進めます。 bool MoveNext() Returns bool 列挙子が次の Feature に正常に進んだ場合は true 。 列挙子がコレクションの末尾を越えた場合は false 。 Remarks 詳細については IEnumerator.MoveNext を参照してください。 Exceptions InvalidOperationException 列挙子が作成された後に、コレクションが変更されました。 Reset() 列挙子を初期位置、つまりコレクションの最初の Feature の前に設定します。 void Reset() Remarks 詳細については IEnumerator.Reset を参照してください。 Exceptions InvalidOperationException 列挙子が作成された後に、コレクションが変更されました。"
  },
  "api/MapQuest.Features.IFeatureList.html": {
    "href": "api/MapQuest.Features.IFeatureList.html",
    "title": "Interface IFeatureList | mysite",
    "keywords": "Interface IFeatureList Namespace MapQuest.Features Assembly MapQuest.Features.dll インデックスによって個別にアクセスできる地物のコレクションを表します。 public interface IFeatureList : IFeatureCollection, IEnumerable<Feature>, IEnumerable Inherited Members IFeatureCollection.CopyTo(Feature[], int) IFeatureCollection.CreateIterator() IFeatureCollection.Query(Envelope) IFeatureCollection.Remove(Envelope) IFeatureCollection.Sort() IFeatureCollection.Sort(IComparer) IFeatureCollection.Sort(int, int, IComparer) IFeatureCollection.Count IFeatureCollection.IsSynchronized IFeatureCollection.SyncRoot IFeatureCollection.Envelope IFeatureCollection.Schema IEnumerable<Feature>.GetEnumerator() Remarks IFeatureList は、地物用に最適化された IList コレクションを提供します。 Properties IsFixedSize IFeatureList が固定サイズかどうかを示す値を取得します。 bool IsFixedSize { get; } Property Value bool IFeatureList が固定サイズの場合は true 。それ以外の場合は false 。 Remarks 詳細については IList.IsFixedSize を参照してください。 IsReadOnly IFeatureList が読み取り専用かどうかを示す値を取得します。 bool IsReadOnly { get; } Property Value bool IFeatureList が読み取り専用の場合は true 。それ以外の場合は false 。 既定値は false です。 Remarks 詳細については IList.IsReadOnly を参照してください。 this[int] 指定されたインデックスの地物を取得または設定します。 Feature this[int index] { get; set; } Parameters index int 取得または設定する要素の、0 から始まるインデックス番号。 Property Value Feature 指定したインデックスにある地物 IFeature 。 Remarks 詳細については IList.this を参照してください。 Exceptions ArgumentOutOfRangeException index が 0 未満です。 または index が Count 以上です。 NotSupportedException このプロパティが設定されていますが、 IFeatureList が読み取り専用です。 Methods Add(Feature) IIFeatureList に Feature を追加します。 int Add(Feature value) Parameters value Feature IIFeatureList に追加する Feature 。 値は null 参照 (Visual Basic では Nothing) に設定できます。 Returns int 新しい Feature が挿入された位置。 Remarks 詳細については IList.Add を参照してください。 Exceptions NotSupportedException IFeatureList が読み取り専用です。 または IFeatureList が固定サイズです。 Clear() IFeatureList からすべての地物を削除します。 void Clear() Remarks 詳細については IList.Clear を参照してください。 Exceptions NotSupportedException IFeatureList が読み取り専用です。 Contains(Feature) ある地物が IFeatureList 内に存在するかどうかを判断します。 bool Contains(Feature value) Parameters value Feature IFeatureList 内で検索される Feature 。 値は null 参照 (Visual Basic では Nothing) に設定できます。 Returns bool value が IFeatureList に存在する場合は true 。それ以外の場合は false 。 Remarks 詳細については IList.Contains を参照してください。 IndexOf(Feature) 指定した Feature を検索し、 IFeatureList 全体内で最初に見つかった位置の 0 から始まるインデックスを返します。 int IndexOf(Feature value) Parameters value Feature IFeatureList 内で検索される Feature 。 値は null 参照 (Visual Basic では Nothing) に設定できます。 Returns int IFeatureList 全体内で value が見つかった場合は、最初に見つかった位置の 0 から始まるインデックス番号。 それ以外の場合は -1。 Remarks 詳細については IList.IndexOf を参照してください。 IndexOf(string) IFeatureList から id を持つ Feature のインデクスを返します。 int IndexOf(string id) Parameters id string Feature の id。 Returns int Feature の id に該当する IFeatureList のインデクス。存在しない場合は -1。 Insert(int, Feature) IFeatureList 内の指定したインデックスの位置に地物を挿入します。 void Insert(int index, Feature value) Parameters index int value を挿入する位置の、0 から始まるインデックス番号。 value Feature 挿入する Feature 。 値は null 参照 (Visual Basic では Nothing) に設定できます。 Remarks 詳細については IList.Insert を参照してください。 Exceptions ArgumentOutOfRangeException index が 0 未満です。 または index が Count より大きい値です。 NotSupportedException IFeatureList が読み取り専用です。 または IFeatureList が固定サイズです。 Remove(Feature) IFeatureList 内から指定された Feature オブジェクトを削除します。 void Remove(Feature value) Parameters value Feature IFeatureList から削除する Feature 。 値は null 参照 (Visual Basic では Nothing) に設定できます。 Remarks 詳細については IList.Remove を参照してください。 Exceptions NotSupportedException IFeatureList が読み取り専用です。 または IFeatureList が固定サイズです。 RemoveAt(int) IFeatureList の指定したインデックスにある地物を削除します。 void RemoveAt(int index) Parameters index int 削除する地物の、0 から始まるインデックス番号。 Remarks 詳細については IList.RemoveAt を参照してください。 Exceptions ArgumentOutOfRangeException index が 0 未満です。 または index が Count 以上です。 NotSupportedException IFeatureList が読み取り専用です。 または IFeatureList が固定サイズです。"
  },
  "api/MapQuest.Features.IFeatureProperty.html": {
    "href": "api/MapQuest.Features.IFeatureProperty.html",
    "title": "Interface IFeatureProperty | mysite",
    "keywords": "Interface IFeatureProperty Namespace MapQuest.Features Assembly MapQuest.Features.dll the interface describes a property entry of a feature public interface IFeatureProperty Properties Name returns the name of the property string Name { get; set; } Property Value string Value returns the value of the property object Value { get; set; } Property Value object"
  },
  "api/MapQuest.Features.IFeatureType.html": {
    "href": "api/MapQuest.Features.IFeatureType.html",
    "title": "Interface IFeatureType | mysite",
    "keywords": "Interface IFeatureType Namespace MapQuest.Features Assembly MapQuest.Features.dll IFeatureType インターフェースは、IFeature のタイプの詳細を提供します。 public interface IFeatureType Remarks IFeature は IFeatureType を必要とします。 Properties Children 子となる IFeatureType の配列を返します。 IFeatureType[] Children { get; } Property Value IFeatureType[] 子となる IFeatureType の配列。子が存在しない場合は null 。 読み取り専用です。 Name この FeatureType の名称を返します。 string Name { get; } Property Value string FeatureType の名称。読み取り専用です。 Parents 親となる IFeatureType の配列を返します。 IFeatureType[] Parents { get; } Property Value IFeatureType[] 親となる IFeatureType の配列。親が存在しない場合は null 。 読み取り専用です。 Properties この FeatureType のプロパティを取得します。 IFeatureTypeProperty[] Properties { get; } Property Value IFeatureTypeProperty[] FeatureType のプロパティを示す IFeatureTypeProperty を配列。 Methods GetProperty(string) 指定した名称の IFeatureTypeProperty を取得します。 IFeatureTypeProperty GetProperty(string name) Parameters name string 取得したい IFeatureTypeProperty の名称。 Returns IFeatureTypeProperty 指定した名称の IFeatureTypeProperty 。"
  },
  "api/MapQuest.Features.IFeatureTypeProperty.html": {
    "href": "api/MapQuest.Features.IFeatureTypeProperty.html",
    "title": "Interface IFeatureTypeProperty | mysite",
    "keywords": "Interface IFeatureTypeProperty Namespace MapQuest.Features Assembly MapQuest.Features.dll the interface describes a property entry of a feature type. the name of the property must be equal to the name of the corresponding feature property. public interface IFeatureTypeProperty Properties IsNullable returns true if the property value is allowed to be null bool IsNullable { get; } Property Value bool Name returns the name of the property string Name { get; } Property Value string Type returns the name of the data type of the property string Type { get; } Property Value string"
  },
  "api/MapQuest.Features.SpatialIndexers.HyperBox.html": {
    "href": "api/MapQuest.Features.SpatialIndexers.HyperBox.html",
    "title": "Class HyperBox | mysite",
    "keywords": "Class HyperBox Namespace MapQuest.Features.SpatialIndexers Assembly MapQuest.Features.dll A HyperBox in the n-dimensional space. It is represented by two points of n dimensions each. public class HyperBox : ICloneable Inheritance object HyperBox Implements ICloneable Inherited Members object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors HyperBox(Envelope) public HyperBox(Envelope envelope) Parameters envelope Envelope HyperBox(HyperPoint, HyperPoint) public HyperBox(HyperPoint pointMin, HyperPoint pointMax) Parameters pointMin HyperPoint pointMax HyperPoint Properties Area public double Area { get; } Property Value double Dimension public int Dimension { get; } Property Value int MaxPoint public HyperPoint MaxPoint { get; } Property Value HyperPoint MinPoint public HyperPoint MinPoint { get; } Property Value HyperPoint Methods Clone() public object Clone() Returns object Contains(HyperBox) public bool Contains(HyperBox box) Parameters box HyperBox Returns bool CreateNullBox(int) public static HyperBox CreateNullBox(int dimension) Parameters dimension int Returns HyperBox Equals(HyperBox) public bool Equals(HyperBox box) Parameters box HyperBox Returns bool GetMinDistance(HyperPoint) public double GetMinDistance(HyperPoint point) Parameters point HyperPoint Returns double GetUnionBounds(HyperBox) public HyperBox GetUnionBounds(HyperBox box) Parameters box HyperBox Returns HyperBox Overlaps(HyperBox) public bool Overlaps(HyperBox box) Parameters box HyperBox Returns bool ToString() public override string ToString() Returns string"
  },
  "api/MapQuest.Features.SpatialIndexers.HyperPoint.html": {
    "href": "api/MapQuest.Features.SpatialIndexers.HyperPoint.html",
    "title": "Class HyperPoint | mysite",
    "keywords": "Class HyperPoint Namespace MapQuest.Features.SpatialIndexers Assembly MapQuest.Features.dll A point in the n-dimensional space. All dimensions are stored in an array of double precision. public class HyperPoint : ICloneable Inheritance object HyperPoint Implements ICloneable Inherited Members object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Constructors HyperPoint(Coordinate) public HyperPoint(Coordinate coord) Parameters coord Coordinate HyperPoint(double[]) public HyperPoint(double[] coords) Parameters coords double[] Properties Coords public double[] Coords { get; } Property Value double[] Dimension public int Dimension { get; } Property Value int Methods Clone() public object Clone() Returns object CreateNullPoint(int) public static HyperPoint CreateNullPoint(int dimension) Parameters dimension int Returns HyperPoint Equals(HyperPoint) public bool Equals(HyperPoint point) Parameters point HyperPoint Returns bool Equals(object) public override bool Equals(object obj) Parameters obj object Returns bool GetHashCode() public override int GetHashCode() Returns int GetOrdinate(int) public double GetOrdinate(int index) Parameters index int Returns double ToString() public override string ToString() Returns string"
  },
  "api/MapQuest.Features.SpatialIndexers.ISpatialIndexer.html": {
    "href": "api/MapQuest.Features.SpatialIndexers.ISpatialIndexer.html",
    "title": "Interface ISpatialIndexer | mysite",
    "keywords": "Interface ISpatialIndexer Namespace MapQuest.Features.SpatialIndexers Assembly MapQuest.Features.dll Summary description for ISpatialIndexer. public interface ISpatialIndexer Methods Close() void Close() Contains(HyperBox) object[] Contains(HyperBox box) Parameters box HyperBox Returns object[] Create(int, int) bool Create(int dimension, int nodeCapacity) Parameters dimension int nodeCapacity int Returns bool Create(int, int, string) bool Create(int dimension, int nodeCapacity, string fileName) Parameters dimension int nodeCapacity int fileName string Returns bool Delete(HyperBox) bool Delete(HyperBox box) Parameters box HyperBox Returns bool Delete(HyperBox, int) bool Delete(HyperBox box, int objID) Parameters box HyperBox objID int Returns bool Insert(object, HyperBox) bool Insert(object obj, HyperBox box) Parameters obj object box HyperBox Returns bool Intersects(HyperBox) object[] Intersects(HyperBox box) Parameters box HyperBox Returns object[] NearestNeighbor(HyperPoint, double) object[] NearestNeighbor(HyperPoint point, double distance) Parameters point HyperPoint distance double Returns object[] Open(string, int) bool Open(string fileName, int capacity) Parameters fileName string capacity int Returns bool Search(HyperBox) object[] Search(HyperBox box) Parameters box HyperBox Returns object[] Within(HyperBox) object[] Within(HyperBox box) Parameters box HyperBox Returns object[]"
  },
  "api/MapQuest.Features.SpatialIndexers.IndexNode.html": {
    "href": "api/MapQuest.Features.SpatialIndexers.IndexNode.html",
    "title": "Class IndexNode | mysite",
    "keywords": "Class IndexNode Namespace MapQuest.Features.SpatialIndexers Assembly MapQuest.Features.dll public sealed class IndexNode : Node, ICloneable Inheritance object Node IndexNode Implements ICloneable Inherited Members Node.GetHyperBox(int) Node.UpdateNodeBoundingBox() Node.ToString() Node.Parent Node.ParentNumber Node.PageNumber Node.Place Node.UsedSpace Node.UnionMinBounds Node.HyperBoxes Node.Root object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() Constructors IndexNode(int, PageFile) public IndexNode(int pageNumber, PageFile file) Parameters pageNumber int file PageFile Properties IsLeaf public override bool IsLeaf { get; } Property Value bool Methods Clone() public override object Clone() Returns object DeleteData(int) public override void DeleteData(int index) Parameters index int GetData(int) public override object GetData(int index) Parameters index int Returns object GetDataIndex(int) public object GetDataIndex(int index) Parameters index int Returns object GetLeastEnlargement(HyperBox) public int GetLeastEnlargement(HyperBox box) Parameters box HyperBox Returns int InsertData(object, HyperBox) public override void InsertData(object node, HyperBox box) Parameters node object box HyperBox SetDataIndex(int, int) public void SetDataIndex(int index, int obj) Parameters index int obj int SetDataIndex(int, object) public void SetDataIndex(int index, object obj) Parameters index int obj object"
  },
  "api/MapQuest.Features.SpatialIndexers.IndexedFeatureCollection.html": {
    "href": "api/MapQuest.Features.SpatialIndexers.IndexedFeatureCollection.html",
    "title": "Class IndexedFeatureCollection | mysite",
    "keywords": "Class IndexedFeatureCollection Namespace MapQuest.Features.SpatialIndexers Assembly MapQuest.Features.dll Summary description for IndexedFeatureCollection. public class IndexedFeatureCollection : FeatureCollection, IFeatureList, IFeatureCollection, IEnumerable<Feature>, IList, ICollection, IEnumerable, ICloneable, ISerializable Inheritance object FeatureCollection IndexedFeatureCollection Implements IFeatureList IFeatureCollection IEnumerable<Feature> IList ICollection IEnumerable ICloneable ISerializable Inherited Members FeatureCollection.Equals(object) FeatureCollection.Add(Feature) FeatureCollection.AddRange(FeatureCollection) FeatureCollection.AddRange(Feature[]) FeatureCollection.BinarySearch(Feature) FeatureCollection.Clear() FeatureCollection.Clone() FeatureCollection.Contains(Feature) FeatureCollection.CopyTo(Feature[]) FeatureCollection.CopyTo(Feature[], int) FeatureCollection.CreateIterator() FeatureCollection.GetEnumerator() FeatureCollection.IndexOf(Feature) FeatureCollection.IndexOf(string) FeatureCollection.Insert(int, Feature) FeatureCollection.Remove(Feature) FeatureCollection.Remove(IFeatureList) FeatureCollection.RemoveAt(int) FeatureCollection.RemoveRange(int, int) FeatureCollection.Reverse() FeatureCollection.Reverse(int, int) FeatureCollection.Sort() FeatureCollection.Sort(IComparer) FeatureCollection.Sort(int, int, IComparer) FeatureCollection.ToArray() FeatureCollection.TrimToSize() FeatureCollection.Remove(Envelope) FeatureCollection.InvalidateEnvelope() FeatureCollection.UpdateEnvelope() FeatureCollection.GetObjectData(SerializationInfo, StreamingContext) FeatureCollection.Capacity FeatureCollection.Count FeatureCollection.IsFixedSize FeatureCollection.IsReadOnly FeatureCollection.IsSynchronized FeatureCollection.IsUnique FeatureCollection.this[int] FeatureCollection.SyncRoot FeatureCollection.Envelope FeatureCollection.Schema object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors IndexedFeatureCollection(FeatureCollection) Initializes a new instance of the IndexedFeatureCollection class that contains elements copied from the specified collection and that has the same initial capacity as the number of elements copied. public IndexedFeatureCollection(FeatureCollection collection) Parameters collection FeatureCollection The IndexedFeatureCollection whose elements are copied to the new collection. Remarks Please refer to ArrayList(ICollection) for details. Exceptions ArgumentNullException collection is a null reference. IndexedFeatureCollection(FeatureSchema) Initializes a new instance of the FeatureCollection class that is empty and has the default initial capacity. public IndexedFeatureCollection(FeatureSchema schema) Parameters schema FeatureSchema Remarks Please refer to ArrayList() for details. IndexedFeatureCollection(Feature[]) Initializes a new instance of the IndexedFeatureCollection class that contains elements copied from the specified Feature array and that has the same initial capacity as the number of elements copied. public IndexedFeatureCollection(Feature[] array) Parameters array Feature[] An Array of Feature elements that are copied to the new collection. Remarks Please refer to ArrayList(ICollection) for details. Exceptions ArgumentNullException array is a null reference. IndexedFeatureCollection(Feature[], FeatureSchema) Initializes a new instance of the FeatureCollection class that contains elements copied from the specified Feature array and that has the same initial capacity as the number of elements copied. public IndexedFeatureCollection(Feature[] array, FeatureSchema schema) Parameters array Feature[] An Array of Feature elements that are copied to the new collection. schema FeatureSchema Remarks Please refer to ArrayList(ICollection) for details. Exceptions ArgumentNullException array is a null reference. IndexedFeatureCollection(int, FeatureSchema) Initializes a new instance of the FeatureCollection class that is empty and has the specified initial capacity. public IndexedFeatureCollection(int capacity, FeatureSchema Schema) Parameters capacity int The number of elements that the new FeatureCollection is initially capable of storing. Schema FeatureSchema Remarks Please refer to ArrayList(int) for details. Exceptions ArgumentOutOfRangeException capacity is less than zero. Methods Query(Envelope) 指定された範囲の地物を検索します。 public override IFeatureList Query(Envelope area) Parameters area Envelope 検索したい範囲。 Returns IFeatureList 検索されたインデックスによって個別にアクセスできる IFeatureList コレクション。"
  },
  "api/MapQuest.Features.SpatialIndexers.LeafNode.html": {
    "href": "api/MapQuest.Features.SpatialIndexers.LeafNode.html",
    "title": "Class LeafNode | mysite",
    "keywords": "Class LeafNode Namespace MapQuest.Features.SpatialIndexers Assembly MapQuest.Features.dll public sealed class LeafNode : Node, ICloneable Inheritance object Node LeafNode Implements ICloneable Inherited Members Node.GetHyperBox(int) Node.UpdateNodeBoundingBox() Node.ToString() Node.Parent Node.ParentNumber Node.PageNumber Node.Place Node.UsedSpace Node.UnionMinBounds Node.HyperBoxes Node.Root object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() Constructors LeafNode(PageFile) public LeafNode(PageFile file) Parameters file PageFile LeafNode(int, PageFile) public LeafNode(int pageNumber, PageFile file) Parameters pageNumber int file PageFile Properties IsLeaf public override bool IsLeaf { get; } Property Value bool Methods Clone() public override object Clone() Returns object DeleteData(int) public override void DeleteData(int index) Parameters index int GetData(int) public override object GetData(int index) Parameters index int Returns object InsertData(object, HyperBox) public override void InsertData(object obj, HyperBox box) Parameters obj object box HyperBox SetData(int, object) public void SetData(int index, object obj) Parameters index int obj object"
  },
  "api/MapQuest.Features.SpatialIndexers.MemoryPageFile.html": {
    "href": "api/MapQuest.Features.SpatialIndexers.MemoryPageFile.html",
    "title": "Class MemoryPageFile | mysite",
    "keywords": "Class MemoryPageFile Namespace MapQuest.Features.SpatialIndexers Assembly MapQuest.Features.dll Implements a memory page file. Holds all pages into a Hashtable with keys equal to each object's page number. public sealed class MemoryPageFile : PageFile, IDisposable Inheritance object MarshalByRefObject PageFile MemoryPageFile Implements IDisposable Inherited Members PageFile.Close() PageFile.Initialize(int, int) PageFile.Dispose() PageFile.Dispose(bool) PageFile.Dimension PageFile.Minimum PageFile.Capacity MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.CreateObjRef(Type) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() Constructors MemoryPageFile() public MemoryPageFile() Methods DeleteNode(int) Marks a specific page as empty. public override Node DeleteNode(int pageNumber) Parameters pageNumber int Returns Node ReadNode(int) Returns the node stored in the requested page. public override Node ReadNode(int pageFile) Parameters pageFile int Returns Node WriteNode(Node) Writes the node into the first available page and returns that page. public override int WriteNode(Node node) Parameters node Node Returns int"
  },
  "api/MapQuest.Features.SpatialIndexers.Node.html": {
    "href": "api/MapQuest.Features.SpatialIndexers.Node.html",
    "title": "Class Node | mysite",
    "keywords": "Class Node Namespace MapQuest.Features.SpatialIndexers Assembly MapQuest.Features.dll public abstract class Node : ICloneable Inheritance object Node Implements ICloneable Derived IndexNode LeafNode Inherited Members object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors Node(int, PageFile) protected Node(int pageNumber, PageFile pageFile) Parameters pageNumber int pageFile PageFile Properties HyperBoxes public virtual HyperBox[] HyperBoxes { get; } Property Value HyperBox[] IsLeaf public abstract bool IsLeaf { get; } Property Value bool PageNumber public virtual int PageNumber { get; set; } Property Value int Parent public virtual Node Parent { get; } Property Value Node ParentNumber public int ParentNumber { get; set; } Property Value int Place public int Place { get; set; } Property Value int Root public virtual bool Root { get; } Property Value bool UnionMinBounds public virtual HyperBox UnionMinBounds { get; } Property Value HyperBox UsedSpace public virtual int UsedSpace { get; set; } Property Value int Methods Clone() public abstract object Clone() Returns object DeleteData(int) public abstract void DeleteData(int index) Parameters index int GetData(int) public abstract object GetData(int index) Parameters index int Returns object GetHyperBox(int) public virtual HyperBox GetHyperBox(int index) Parameters index int Returns HyperBox InsertData(object, HyperBox) public abstract void InsertData(object obj, HyperBox box) Parameters obj object box HyperBox ToString() public override string ToString() Returns string UpdateNodeBoundingBox() public void UpdateNodeBoundingBox()"
  },
  "api/MapQuest.Features.SpatialIndexers.PageFile.html": {
    "href": "api/MapQuest.Features.SpatialIndexers.PageFile.html",
    "title": "Class PageFile | mysite",
    "keywords": "Class PageFile Namespace MapQuest.Features.SpatialIndexers Assembly MapQuest.Features.dll Abstract class for all classes implementing a storage manager for the SpatialIndexer. Every node should be stored in a unique page. The root node is always stored in page 0. The storage manager should have the control over the page numbers where each node should be stored. public abstract class PageFile : MarshalByRefObject, IDisposable Inheritance object MarshalByRefObject PageFile Implements IDisposable Derived MemoryPageFile PersistentPageFile Inherited Members MarshalByRefObject.MemberwiseClone(bool) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.CreateObjRef(Type) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors PageFile() protected PageFile() Properties Capacity public virtual int Capacity { get; } Property Value int Dimension public virtual int Dimension { get; } Property Value int Minimum public virtual int Minimum { get; } Property Value int Methods Close() Closes the pagefile and frees the underlying recourses. public virtual void Close() DeleteNode(int) Marks a specific page as empty. public abstract Node DeleteNode(int pageNumber) Parameters pageNumber int Returns Node Dispose() public void Dispose() Dispose(bool) public virtual void Dispose(bool disposing) Parameters disposing bool ~PageFile() protected ~PageFile() Initialize(int, int) public virtual void Initialize(int dimension, int capacity) Parameters dimension int capacity int ReadNode(int) Returns the node stored in the requested page. public abstract Node ReadNode(int pageNumber) Parameters pageNumber int Returns Node WriteNode(Node) Writes the node into the first available page and returns that page. public abstract int WriteNode(Node node) Parameters node Node Returns int"
  },
  "api/MapQuest.Features.SpatialIndexers.PageFileException.html": {
    "href": "api/MapQuest.Features.SpatialIndexers.PageFileException.html",
    "title": "Class PageFileException | mysite",
    "keywords": "Class PageFileException Namespace MapQuest.Features.SpatialIndexers Assembly MapQuest.Features.dll Summary description for PageFileException. public class PageFileException : DefaultException Inheritance object PageFileException Constructors PageFileException() Default constructor. public PageFileException() PageFileException(int, Exception, params object[]) Constructor allowing the Message resource ID and InnerException property to be set. public PageFileException(int exceptionID, Exception inner, params object[] args) Parameters exceptionID int A number identifying the message of the exception in resource file. inner Exception Sets a reference to the InnerException. args object[] PageFileException(int, params object[]) Constructor allowing the Message property to be set through the exception ID. public PageFileException(int exceptionID, params object[] args) Parameters exceptionID int A number identifying the message of the exception in resource file. args object[] PageFileException(SerializationInfo, StreamingContext) Protected constructor to de-serialize data. protected PageFileException(SerializationInfo info, StreamingContext context) Parameters info SerializationInfo context StreamingContext PageFileException(string) Constructor with exception message. public PageFileException(string message) Parameters message string PageFileException(string, Exception) Constructor with message and inner exception. public PageFileException(string message, Exception inner) Parameters message string inner Exception PageFileException(string, int) Constructor allowing the Message property to be set through the exception ID. protected PageFileException(string prefix, int exceptionID) Parameters prefix string exceptionID int A number identifying the message of the exception in resource file. PageFileException(string, int, Exception) Constructor allowing the Message resource ID and InnerException property to be set. protected PageFileException(string prefix, int exceptionID, Exception inner) Parameters prefix string exceptionID int A number identifying the message of the exception in resource file. inner Exception Sets a reference to the InnerException. PageFileException(string, int, Exception, params object[]) Constructor allowing the Message resource ID and InnerException property to be set. protected PageFileException(string prefix, int exceptionID, Exception inner, params object[] args) Parameters prefix string exceptionID int A number identifying the message of the exception in resource file. inner Exception Sets a reference to the InnerException. args object[] PageFileException(string, int, params object[]) Constructor allowing the Message property to be set through the exception ID. protected PageFileException(string prefix, int exceptionID, params object[] args) Parameters prefix string exceptionID int A number identifying the message of the exception in resource file. args object[]"
  },
  "api/MapQuest.Features.SpatialIndexers.PersistentPageFile.html": {
    "href": "api/MapQuest.Features.SpatialIndexers.PersistentPageFile.html",
    "title": "Class PersistentPageFile | mysite",
    "keywords": "Class PersistentPageFile Namespace MapQuest.Features.SpatialIndexers Assembly MapQuest.Features.dll A page file that stores all pages into Persistent storage. It uses a random access file stream to store node data. public class PersistentPageFile : PageFile, IDisposable Inheritance object MarshalByRefObject PageFile PersistentPageFile Implements IDisposable Inherited Members PageFile.Close() PageFile.Dispose() PageFile.Dimension PageFile.Minimum PageFile.Capacity MarshalByRefObject.MemberwiseClone(bool) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.CreateObjRef(Type) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks The format of the page file is as follows. First, a header is writen that stores important information about the SpatialIndexer. The header format is as shown below: ... Deleted pages are stored into a Stack. If a new entry is inserted it is placed in the last deleted page. That way the page file does not grow for ever. Constructors PersistentPageFile(string) public PersistentPageFile(string fileName) Parameters fileName string Methods DeleteNode(int) Marks a specific page as empty. public override Node DeleteNode(int pageNumber) Parameters pageNumber int Returns Node Dispose(bool) public override void Dispose(bool disposing) Parameters disposing bool Initialize(int, int) public override void Initialize(int dimension, int capacity) Parameters dimension int capacity int ReadNode(int) Returns the node stored in the requested page. public override Node ReadNode(int pageNumber) Parameters pageNumber int Returns Node WriteNode(Node) Writes the node into the first available page and returns that page. public override int WriteNode(Node node) Parameters node Node Returns int"
  },
  "api/MapQuest.Features.SpatialIndexers.SpatialIndexer.html": {
    "href": "api/MapQuest.Features.SpatialIndexers.SpatialIndexer.html",
    "title": "Class SpatialIndexer | mysite",
    "keywords": "Class SpatialIndexer Namespace MapQuest.Features.SpatialIndexers Assembly MapQuest.Features.dll public sealed class SpatialIndexer : ISpatialIndexer Inheritance object SpatialIndexer Implements ISpatialIndexer Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() Constructors SpatialIndexer() public SpatialIndexer() SpatialIndexer(PageFile) public SpatialIndexer(PageFile pageFile) Parameters pageFile PageFile Methods Close() Closes the rtree and frees the ressources. @throws SpatialIndexerException if an error occures. public void Close() Contains(HyperBox) public object[] Contains(HyperBox box) Parameters box HyperBox Returns object[] Create(int, int) public bool Create(int dimension, int nodeCapacity) Parameters dimension int nodeCapacity int Returns bool Create(int, int, string) public bool Create(int dimension, int nodeCapacity, string fileName) Parameters dimension int nodeCapacity int fileName string Returns bool Delete(HyperBox) public bool Delete(HyperBox box) Parameters box HyperBox Returns bool Delete(HyperBox, int) public bool Delete(HyperBox box, int objID) Parameters box HyperBox objID int Returns bool Insert(object, HyperBox) public bool Insert(object obj, HyperBox box) Parameters obj object box HyperBox Returns bool Intersects(HyperBox) public object[] Intersects(HyperBox box) Parameters box HyperBox Returns object[] NearestNeighbor(HyperPoint, double) public object[] NearestNeighbor(HyperPoint point, double distance) Parameters point HyperPoint distance double Returns object[] Open(string, int) public bool Open(string fileName, int capacity) Parameters fileName string capacity int Returns bool Search(HyperBox) public object[] Search(HyperBox box) Parameters box HyperBox Returns object[] Within(HyperBox) public object[] Within(HyperBox box) Parameters box HyperBox Returns object[]"
  },
  "api/MapQuest.Features.SpatialIndexers.SpatialIndexerException.html": {
    "href": "api/MapQuest.Features.SpatialIndexers.SpatialIndexerException.html",
    "title": "Class SpatialIndexerException | mysite",
    "keywords": "Class SpatialIndexerException Namespace MapQuest.Features.SpatialIndexers Assembly MapQuest.Features.dll The common exception thrown by problems during the R-Tree methods. Thats the exception a user of the package get if errors occure. public class SpatialIndexerException : DefaultException Inheritance object SpatialIndexerException Constructors SpatialIndexerException() Default constructor. public SpatialIndexerException() SpatialIndexerException(int, Exception, params object[]) Constructor allowing the Message resource ID and InnerException property to be set. public SpatialIndexerException(int exceptionID, Exception inner, params object[] args) Parameters exceptionID int A number identifying the message of the exception in resource file. inner Exception Sets a reference to the InnerException. args object[] SpatialIndexerException(int, params object[]) Constructor allowing the Message property to be set through the exception ID. public SpatialIndexerException(int exceptionID, params object[] args) Parameters exceptionID int A number identifying the message of the exception in resource file. args object[] SpatialIndexerException(SerializationInfo, StreamingContext) Protected constructor to de-serialize data. protected SpatialIndexerException(SerializationInfo info, StreamingContext context) Parameters info SerializationInfo context StreamingContext SpatialIndexerException(string) Constructor with exception message. public SpatialIndexerException(string message) Parameters message string SpatialIndexerException(string, Exception) Constructor with message and inner exception. public SpatialIndexerException(string message, Exception inner) Parameters message string inner Exception SpatialIndexerException(string, int) Constructor allowing the Message property to be set through the exception ID. protected SpatialIndexerException(string prefix, int exceptionID) Parameters prefix string exceptionID int A number identifying the message of the exception in resource file. SpatialIndexerException(string, int, Exception) Constructor allowing the Message resource ID and InnerException property to be set. protected SpatialIndexerException(string prefix, int exceptionID, Exception inner) Parameters prefix string exceptionID int A number identifying the message of the exception in resource file. inner Exception Sets a reference to the InnerException. SpatialIndexerException(string, int, Exception, params object[]) Constructor allowing the Message resource ID and InnerException property to be set. protected SpatialIndexerException(string prefix, int exceptionID, Exception inner, params object[] args) Parameters prefix string exceptionID int A number identifying the message of the exception in resource file. inner Exception Sets a reference to the InnerException. args object[] SpatialIndexerException(string, int, params object[]) Constructor allowing the Message property to be set through the exception ID. protected SpatialIndexerException(string prefix, int exceptionID, params object[] args) Parameters prefix string exceptionID int A number identifying the message of the exception in resource file. args object[]"
  },
  "api/MapQuest.Features.SpatialIndexers.html": {
    "href": "api/MapQuest.Features.SpatialIndexers.html",
    "title": "Namespace MapQuest.Features.SpatialIndexers | mysite",
    "keywords": "Namespace MapQuest.Features.SpatialIndexers Classes HyperBox A HyperBox in the n-dimensional space. It is represented by two points of n dimensions each. HyperPoint A point in the n-dimensional space. All dimensions are stored in an array of double precision. IndexNode IndexedFeatureCollection Summary description for IndexedFeatureCollection. LeafNode MemoryPageFile Implements a memory page file. Holds all pages into a Hashtable with keys equal to each object's page number. Node PageFile Abstract class for all classes implementing a storage manager for the SpatialIndexer. Every node should be stored in a unique page. The root node is always stored in page 0. The storage manager should have the control over the page numbers where each node should be stored. PageFileException Summary description for PageFileException. PersistentPageFile A page file that stores all pages into Persistent storage. It uses a random access file stream to store node data. SpatialIndexer SpatialIndexerException The common exception thrown by problems during the R-Tree methods. Thats the exception a user of the package get if errors occure. Interfaces ISpatialIndexer Summary description for ISpatialIndexer."
  },
  "api/MapQuest.Features.UnitUtil.html": {
    "href": "api/MapQuest.Features.UnitUtil.html",
    "title": "Class UnitUtil | mysite",
    "keywords": "Class UnitUtil Namespace MapQuest.Features Assembly MapQuest.Features.dll 単位に関する汎用的な関数を格納するクラスです。 メンバは、すべて static なメソッドで構成されます。 public class UnitUtil Inheritance object UnitUtil Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors UnitUtil() public UnitUtil() Methods ConvertFeatureSizeToTarget(Feature, ICoordinateSystem, ICoordinateSystem) Featureのジオメトリがテキスト、またはポイントの場合にtargetCSの座標系の単位にサイズを変換する public static void ConvertFeatureSizeToTarget(Feature feature, ICoordinateSystem sourceCS, ICoordinateSystem targetCS) Parameters feature Feature サイズ変換を行うFeature sourceCS ICoordinateSystem 変換元座標系 targetCS ICoordinateSystem 変換先座標系 GetStyleUnitType(ICoordinateSystem) 座標系の単位を取得 ※緯度経度系の座標系の場合Noneが返されます public static StyleUnitType GetStyleUnitType(ICoordinateSystem cs) Parameters cs ICoordinateSystem Returns StyleUnitType GetStyleUnitType(double) メートル換算した値から単位を取得 public static StyleUnitType GetStyleUnitType(double metersPerUnit) Parameters metersPerUnit double Returns StyleUnitType StyleUnitTypeToUnit(StyleUnitType) MapQuest.Styles.StyleUnitType を IUnit に変換します。 unitTypeがPixelの場合はDPI値を96とした場合の LinearUnit に変換します。 public static IUnit StyleUnitTypeToUnit(StyleUnitType unitType) Parameters unitType StyleUnitType 変換する MapQuest.Styles.StyleUnitType 。 Returns IUnit 変換された IUnit 。 unitType に対応する IUnit が存在しない場合 null を返します。"
  },
  "api/MapQuest.Features.html": {
    "href": "api/MapQuest.Features.html",
    "title": "Namespace MapQuest.Features | mysite",
    "keywords": "Namespace MapQuest.Features Classes Feature 実世界の現象の抽出概念である地物を表現するためのクラスです。 FeatureCollection 地物用に最適化されたコレクションの実装です。 FeatureException MapQuest.Features パッケージ内で実行中に発生した場合にスローされる例外。 FeatureFactory 指定された情報を元に、 Feature オブジェクトを生成するためのクラスです。 FeatureIterator Feature のコレクションを順番に走査するためのクラスです。 FeatureOperator 空間解析や空間演算を処理するためのクラスです。 Feature から MapQuest.Topology.Geometries.Geometry を取得しなくても解析や演算処理を行うことができます。 FeatureReprojection Feature の座標系を変換するためのクラスです。 FeatureSchema 座標系や形状の種類など、 IFeatureClass の定義情報を管理します。 このクラスが持つ情報は、「階層」として管理される情報と同じものです。 FeatureType IFeatureType インターフェースを実装した、 IFeature のタイプの詳細を提供するクラスです。 FeatureTypeProperty the interface describes a property entry of a feature type. the name of the property must be equal to the name of the corresponding feature property. UnitUtil 単位に関する汎用的な関数を格納するクラスです。 メンバは、すべて static なメソッドで構成されます。 Structs FeatureProperty Summary description for FeatureProperty. Interfaces IFeature 実世界の現象の抽出概念である地物を表現するためのインターフェースです。 道路や建物を現す形状とこれにリンクする属性などの情報を一つのまとまりとし、 地図を表現する最小単位として定義します。 IFeatureCollection Feature を収集するコレクションについて、 サイズ、列挙子、および同期メソッドを定義します。 IFeatureIterator Feature のコレクションを順番に走査するためのインターフェースです。 IFeatureList インデックスによって個別にアクセスできる地物のコレクションを表します。 IFeatureProperty the interface describes a property entry of a feature IFeatureType IFeatureType インターフェースは、IFeature のタイプの詳細を提供します。 IFeatureTypeProperty the interface describes a property entry of a feature type. the name of the property must be equal to the name of the corresponding feature property. Enums FeatureDataType データタイプのフィールド、 または FeatureType のパラメータを定義します。"
  },
  "api/MapQuest.Geocoding.IGeocoder.html": {
    "href": "api/MapQuest.Geocoding.IGeocoder.html",
    "title": "Interface IGeocoder | mysite",
    "keywords": "Interface IGeocoder Namespace MapQuest.Geocoding Assembly MapQuest.Core.dll 住所文字列から地理的な場所の座標を検索するためのインターフェースです。 public interface IGeocoder Remarks ジオコーディングは、指定された住所や地名を地理的な座標（緯度と経度）に変換するプロセスです。 このインターフェースを使用して、アプリケーションはユーザーが提供する住所情報から正確な位置情報を取得できます。 Methods Search<T>() 指定した住所文字列に基づいて地理的な場所の座標を検索します。 T Search<T>() Returns T 指定した住所にマッチした地理的な場所の座標を含むオブジェクトを返します。 Type Parameters T 住所情報のクラス Remarks ジオコーディングは、文字列形式の住所や地名を地理的な座標（緯度と経度）に変換するプロセスです。 このメソッドは、ユーザーが提供する住所文字列から対応する地点の座標情報を取得するために使用されます。"
  },
  "api/MapQuest.Geocoding.IReverseGeocoder.html": {
    "href": "api/MapQuest.Geocoding.IReverseGeocoder.html",
    "title": "Interface IReverseGeocoder | mysite",
    "keywords": "Interface IReverseGeocoder Namespace MapQuest.Geocoding Assembly MapQuest.Core.dll 地理的な場所の座標または範囲から住所文字列を検索するためのインターフェースです。 public interface IReverseGeocoder Remarks リバースジオコーディングは、地理的な座標（緯度と経度）を人間が読み取り可能な住所に変換するプロセスです。 このインターフェースを利用することで、地点の座標からその地点の住所や地名を特定することが可能になります。 Methods Search<T>() 指定した地理的な場所の座標または範囲に基づいて住所文字列を検索します。 T Search<T>() Returns T 指定した座標にマッチした住所文字列を含むオブジェクトを返します。 Type Parameters T 住所情報のクラス Remarks リバースジオコーディングは、地理的な座標（緯度と経度）を人間が読み取り可能な住所に変換するプロセスです。 このメソッドは、地点の座標からその地点の住所や地名を特定するために使用されます。"
  },
  "api/MapQuest.Geocoding.html": {
    "href": "api/MapQuest.Geocoding.html",
    "title": "Namespace MapQuest.Geocoding | mysite",
    "keywords": "Namespace MapQuest.Geocoding Interfaces IGeocoder 住所文字列から地理的な場所の座標を検索するためのインターフェースです。 IReverseGeocoder 地理的な場所の座標または範囲から住所文字列を検索するためのインターフェースです。"
  },
  "api/MapQuest.IO.AppSettingsManager.html": {
    "href": "api/MapQuest.IO.AppSettingsManager.html",
    "title": "Class AppSettingsManager | mysite",
    "keywords": "Class AppSettingsManager Namespace MapQuest.IO Assembly MapQuest.Core.dll public class AppSettingsManager Inheritance object AppSettingsManager Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors AppSettingsManager() public AppSettingsManager() Methods GetDouble(string, double) public static double GetDouble(string key, double defaultValue) Parameters key string defaultValue double Returns double GetInt32(string, int) public static int GetInt32(string key, int defaultValue) Parameters key string defaultValue int Returns int GetSingle(string, float) public static float GetSingle(string key, float defaultValue) Parameters key string defaultValue float Returns float GetString(string, string) public static string GetString(string key, string defaultValue) Parameters key string defaultValue string Returns string"
  },
  "api/MapQuest.IO.BinaryFormatReader.html": {
    "href": "api/MapQuest.IO.BinaryFormatReader.html",
    "title": "Class BinaryFormatReader | mysite",
    "keywords": "Class BinaryFormatReader Namespace MapQuest.IO Assembly MapQuest.Core.dll プリミティブ データ型を特定のエンコーディングのバイナリ値として読み取ります。 public class BinaryFormatReader : IDisposable Inheritance object BinaryFormatReader Implements IDisposable Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks BinaryFormatReader は、リトルエンディアン／ビッグエンディアン両方に対応した BinaryReader です。 Constructors BinaryFormatReader(Stream) 指定したストリームを基にし、UTF8Encoding を使用して、BinaryFormatReader クラスの新しいインスタンスを初期化します。 public BinaryFormatReader(Stream input) Parameters input Stream Exceptions ArgumentException ストリームが読み取りをサポートしていないか、null であるか、または既に閉じています。 BinaryFormatReader(Stream, Encoding) 供給されたストリームと特定の文字エンコーディングに基づいて、BinaryFormatReader クラスの新しいインスタンスを初期化します。 public BinaryFormatReader(Stream input, Encoding encoding) Parameters input Stream 供給するストリーム。 encoding Encoding 文字エンコーディング。 Exceptions ArgumentException ストリームが読み取りをサポートしていないか、null であるか、または既に閉じています。 ArgumentNullException encoding が null です。 Properties BaseStream BinaryFormatReader の基になるストリームへのアクセスを公開します。 public virtual Stream BaseStream { get; } Property Value Stream InternalBuffer 内部で使用しているバッファを取得します。 protected virtual byte[] InternalBuffer { get; } Property Value byte[] InternalCharBuffer 内部で使用している文字のバッファを取得します。 protected char[] InternalCharBuffer { get; } Property Value char[] InternalDecoder 内部で使用している Decoder を取得します。 protected Decoder InternalDecoder { get; } Property Value Decoder InternalSingleChar 内部で使用している文字の配列を取得します。 protected char[] InternalSingleChar { get; } Property Value char[] IsLittleEndian 読み取る Stream がリトルエンディアンかどうかを取得します。 public bool IsLittleEndian { get; set; } Property Value bool Stream がリトルエンディアンである場合は true 、 ビッグエンディアンである場合は false を返します。 既定値は BitConverter.IsLittleEndian に依存します。 Methods Close() 現在のリーダーと基になるストリームをクローズします。 public virtual void Close() Dispose(bool) BinaryFormatReader によって使用されている アンマネージ リソースを解放し、オプションでマネージ リソースも解放します。 protected virtual void Dispose(bool disposing) Parameters disposing bool マネージ リソースとアンマネージ リソースの両方を解放する場合は true。アンマネージ リソースだけを解放する場合は false。 FillBuffer(int) 指定したバイト数分だけストリームから読み取ったバイトを内部バッファに格納します。 protected virtual void FillBuffer(int numBytes) Parameters numBytes int 読み取るバイト数。 Exceptions EndOfStreamException numBytes 分のバイトを読み取る前にストリームの末尾に到達しました。 IOException I/O エラーが発生しました。 PeekChar() 読み取り可能な次の文字を返します。バイトの位置または文字の位置は変化しません。 public virtual int PeekChar() Returns int 使用できる次の文字。使用できる文字がないか、ストリームがシークをサポートしていない場合は -1。 Exceptions IOException I/O エラーが発生しました。 Read() 基になるストリームから文字を読み取り、使用した Encoding とストリームから読み取った特定の文字に従ってストリームの現在位置を進めます。 public virtual int Read() Returns int 入力ストリームの次の文字。現在取り可能な文字がない場合は -1。 Exceptions IOException I/O エラーが発生しました。 ObjectDisposedException ストリームが閉じています。 Read(byte[], int, int) index をバイト配列内の開始点として、ストリームから count で指定したバイト数分のバイトを読み取ります。 public virtual int Read(byte[] buffer, int index, int count) Parameters buffer byte[] データを読み取るバッファ。 index int バッファ内の、バッファへの読み取り開始点。 count int 読み取る文字数。 Returns int buffer に読み取った文字数。要求したバイト数分のバイトを読み取れなかった場合、この値は要求したバイト数より小さくなります。ストリームの末尾に到達した場合は 0 になることがあります。 Exceptions ArgumentException バッファ長から index を差し引いた値が count より小さい値です。 ArgumentNullException buffer が null です。 ArgumentOutOfRangeException index または count が負の値です。 ObjectDisposedException ストリームが閉じています。 IOException I/O エラーが発生しました。 Read(char[], int, int) index を文字配列内の開始点として、ストリームから count で指定した文字数分だけ文字を読み取ります。 public virtual int Read(char[] buffer, int index, int count) Parameters buffer char[] index int count int Returns int バッファに読み取られた合計文字数。要求した文字数分の文字を読み取れなかった場合、この値は要求した文字数より小さくなります。また、ストリームの末尾に到達した場合は 0 になることがあります。 Exceptions ArgumentException バッファ長から index を差し引いた値が count より小さい値です。 ArgumentNullException buffer が null です。 ArgumentOutOfRangeException index または count が負の値です。 ObjectDisposedException ストリームが閉じています。 IOException I/O エラーが発生しました。 Read7BitEncodedInt() 32 ビット整数を圧縮形式で読み取ります。 protected int Read7BitEncodedInt() Returns int 圧縮形式の 32 ビット整数。 Exceptions EndOfStreamException ストリームの末尾に到達しました。 ObjectDisposedException ストリームが閉じています。 IOException I/O エラーが発生しました。 ReadBoolean() 現在のストリームから Boolean 値を読み取り、ストリームの現在位置を 1 バイトだけ進めます。 public virtual bool ReadBoolean() Returns bool 読み取ったバイトが 0 以外の場合は true。0 の場合は false。 Exceptions EndOfStreamException ストリームの末尾に到達しました。 ObjectDisposedException ストリームが閉じています。 IOException I/O エラーが発生しました。 ReadByte() 現在のストリームから次のバイトを読み取り、ストリームの現在位置を 1 バイトだけ進めます。 public virtual byte ReadByte() Returns byte 現在のストリームから読み取った次のバイト。 Exceptions EndOfStreamException ストリームの末尾に到達しました。 ObjectDisposedException ストリームが閉じています。 IOException I/O エラーが発生しました。 ReadBytes(int) 現在のストリームからバイト配列に count で指定したバイト数分のバイトを読み取り、count で指定したバイト数だけ現在位置を進めます。 public virtual byte[] ReadBytes(int count) Parameters count int 読み取るバイト数。 Returns byte[] 基になるストリームから読み取ったデータが格納されているバイト配列。ストリームの末尾に到達した場合は要求したバイト数より小さくなることがあります。 Exceptions IOException I/O エラーが発生しました。 ObjectDisposedException ストリームが閉じています。 ArgumentOutOfRangeException count が負の値です。 ReadChar() 現在のストリームの次の文字を読み取り、使用した Encoding とストリームから読み取った特定の文字に従ってストリームの現在位置を進めます。 public virtual char ReadChar() Returns char 現在のストリームから読み取った文字。 Exceptions EndOfStreamException ストリームの末尾に到達しました。 ObjectDisposedException ストリームが閉じています。 IOException I/O エラーが発生しました。 ReadChars(int) 現在のストリームから count で指定した文字数分の文字を読み取り、そのデータを文字配列として返します。使用した Encoding とストリームから読み取った特定の文字に従って現在位置を進めます。 public virtual char[] ReadChars(int count) Parameters count int 読み取る文字数。 Returns char[] 基になるストリームから読み取ったデータが格納されている文字配列。ストリームの末尾に到達した場合は、要求された文字数より小さくなることがあります。 Exceptions EndOfStreamException ストリームの末尾に到達しました。 ObjectDisposedException ストリームが閉じています。 IOException I/O エラーが発生しました。 ArgumentOutOfRangeException count が負の値です。 ReadDecimal() 現在のストリームから 10 進数値を読み取り、ストリームの現在位置を 16 バイトだけ進めます。 public virtual decimal ReadDecimal() Returns decimal 現在のストリームから読み取った 10 進数値。 Exceptions EndOfStreamException ストリームの末尾に到達しました。 ObjectDisposedException ストリームが閉じています。 IOException I/O エラーが発生しました。 ReadDouble() 現在のストリームから 8 バイト浮動小数点値を読み取り、ストリームの現在位置を 8 バイトだけ進めます。 public virtual double ReadDouble() Returns double 現在のストリームから読み取った 8 バイト浮動小数点値。 Exceptions EndOfStreamException ストリームの末尾に到達しました。 ObjectDisposedException ストリームが閉じています。 IOException I/O エラーが発生しました。 ReadInt16() 現在のストリームから 2 バイト符号付き整数を読み取り、ストリームの現在位置を 2 バイトだけ進めます。 public virtual short ReadInt16() Returns short 現在のストリームから読み取った 2 バイト符号付き整数。 Exceptions EndOfStreamException ストリームの末尾に到達しました。 ObjectDisposedException ストリームが閉じています。 IOException I/O エラーが発生しました。 ReadInt32() 現在のストリームから 4 バイト符号付き整数を読み取り、ストリームの現在位置を 4 バイトだけ進めます。 public virtual int ReadInt32() Returns int 現在のストリームから読み取った 4 バイト符号付き整数。 Exceptions EndOfStreamException ストリームの末尾に到達しました。 ObjectDisposedException ストリームが閉じています。 IOException I/O エラーが発生しました。 ReadInt64() 現在のストリームから 8 バイト符号付き整数を読み取り、ストリームの現在位置を 8 バイトだけ進めます。 public virtual long ReadInt64() Returns long 現在のストリームから読み取った 8 バイト符号付き整数。 Exceptions EndOfStreamException ストリームの末尾に到達しました。 ObjectDisposedException ストリームが閉じています。 IOException I/O エラーが発生しました。 ReadSByte() 現在のストリームから符号付きバイトを読み取り、ストリームの現在位置を 1 バイトだけ進めます。 [CLSCompliant(false)] public virtual sbyte ReadSByte() Returns sbyte 現在のストリームから読み取った符号付きバイト。 Exceptions EndOfStreamException ストリームの末尾に到達しました。 ObjectDisposedException ストリームが閉じています。 IOException I/O エラーが発生しました。 ReadSingle() 現在のストリームから 4 バイト浮動小数点値を読み取り、ストリームの現在位置を 4 バイトだけ進めます。 public virtual float ReadSingle() Returns float 現在のストリームから読み取った 4 バイト浮動小数点値。 Exceptions EndOfStreamException ストリームの末尾に到達しました。 ObjectDisposedException ストリームが閉じています。 IOException I/O エラーが発生しました。 ReadString() 現在のストリームから文字列を読み取ります。文字列の先頭に長さを付け、7 ビットの整数としてまとめてエンコードします。 public virtual string ReadString() Returns string 読み取った文字列。 Exceptions EndOfStreamException ストリームの末尾に到達しました。 ObjectDisposedException ストリームが閉じています。 IOException I/O エラーが発生しました。 ReadUInt16() 現在のストリームから 2 バイト符号なし整数を読み取り、ストリームの位置を 2 バイトだけ進めます。 [CLSCompliant(false)] public virtual ushort ReadUInt16() Returns ushort 現在のストリームから読み取った 2 バイト符号なし整数。 Exceptions EndOfStreamException ストリームの末尾に到達しました。 ObjectDisposedException ストリームが閉じています。 IOException I/O エラーが発生しました。 ReadUInt32() 現在のストリームから 4 バイト符号なし整数を読み取り、ストリームの位置を 4 バイトだけ進めます。 [CLSCompliant(false)] public virtual uint ReadUInt32() Returns uint 現在のストリームから読み取った 4 バイト符号なし整数。 Exceptions EndOfStreamException ストリームの末尾に到達しました。 ObjectDisposedException ストリームが閉じています。 IOException I/O エラーが発生しました。 ReadUInt64() 現在のストリームから 8 バイト符号なし整数を読み取り、ストリームの位置を 8 バイトだけ進めます。 [CLSCompliant(false)] public virtual ulong ReadUInt64() Returns ulong 現在のストリームから読み取った 8 バイト符号なし整数。 Exceptions EndOfStreamException ストリームの末尾に到達しました。 IOException I/O エラーが発生しました。 ObjectDisposedException ストリームが閉じています。"
  },
  "api/MapQuest.IO.BinaryFormatWriter.html": {
    "href": "api/MapQuest.IO.BinaryFormatWriter.html",
    "title": "Class BinaryFormatWriter | mysite",
    "keywords": "Class BinaryFormatWriter Namespace MapQuest.IO Assembly MapQuest.Core.dll プリミティブ型をバイナリでストリームに書き込みます。 特定のエンコーディングの文字列の書き込みをサポートします。 public class BinaryFormatWriter : IDisposable Inheritance object BinaryFormatWriter Implements IDisposable Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks BinaryFormatWriter は、リトルエンディアン／ビッグエンディアン両方に対応した BinaryWriter です。 Constructors BinaryFormatWriter() ストリームへの書き込みを行う BinaryFormatWriter クラスの新しいインスタンスを初期化します。 protected BinaryFormatWriter() Remarks Protected default constructor that sets the output stream to a null stream (a bit bucket). BinaryFormatWriter(Stream) 供給されたストリームに基づき、文字列のエンコードとして UTF-8 を使用して、BinaryFormatWriter クラスの新しいインスタンスを初期化します。 public BinaryFormatWriter(Stream output) Parameters output Stream 出力ストリーム。 Exceptions ArgumentException ストリームが書き込みをサポートしていないか、既に閉じています。 ArgumentNullException output が null です。 BinaryFormatWriter(Stream, Encoding) 供給されたストリームと特定の文字エンコーディングに基づいて、BinaryFormatWriter クラスの新しいインスタンスを初期化します。 public BinaryFormatWriter(Stream output, Encoding encoding) Parameters output Stream 供給するストリーム。 encoding Encoding Exceptions ArgumentException ストリームが書き込みをサポートしていないか、既に閉じています。 ArgumentNullException outputまたは encoding が null です。 Fields Null バッキング ストアを持たない BinaryFormatWriter を指定します。 public static readonly BinaryFormatWriter Null Field Value BinaryFormatWriter m_objStream ベースとなる Stream です。 protected Stream m_objStream Field Value Stream Properties BaseStream 基になるストリームを保持します。 public virtual Stream BaseStream { get; } Property Value Stream Remarks Returns the stream associate with the writer. It flushes all pending writes before returning. All subclasses should override Flush to ensure that all buffered data is sent to the stream. InternalBuffer 内部で使用しているバッファを取得します。 protected virtual byte[] InternalBuffer { get; } Property Value byte[] InternalEncoding 内部で使用している Encoding を取得します。 protected Encoding InternalEncoding { get; } Property Value Encoding IsLittleEndian 読み取る Stream がリトルエンディアンかどうかを取得します。 public bool IsLittleEndian { get; set; } Property Value bool Stream がリトルエンディアンである場合は true 、 ビッグエンディアンである場合は false を返します。 既定値は BitConverter.IsLittleEndian に依存します。 Methods Close() 現在の BinaryFormatWriter と基になるストリームを閉じます。 public virtual void Close() Remarks Closes this writer and releases any system resources associated with the writer. Following a call to Close, any operations on the writer may raise exceptions. Dispose(bool) BinaryFormatWriter によって使用されているアンマネージ リソースを解放し、オプションでマネージ リソースも解放します。 protected virtual void Dispose(bool disposing) Parameters disposing bool マネージ リソースとアンマネージ リソースの両方を解放する場合は true。アンマネージ リソースだけを解放する場合は false。 Flush() 現在のライタのすべてのバッファをクリアし、バッファ内のデータを基になるデバイスに書き込みます。 public virtual void Flush() Remarks Clears all buffers for this writer and causes any buffered data to be written to the underlying device. Seek(int, SeekOrigin) 現在のストリーム内の位置を設定します。 public virtual long Seek(int offset, SeekOrigin origin) Parameters offset int origin からのバイト オフセット。 origin SeekOrigin Returns long 現在のストリームの位置。 Exceptions IOException ファイル ポインタが無効な位置に移動しました。 ArgumentException SeekOrigin 値が無効です。 Write(bool) 現在のストリームに 1 バイト Boolean 値を書き込みます。値 0 は false を表し、値 1 は true を表します。 public virtual void Write(bool value) Parameters value bool 書き込む Boolean 値 (0 または 1)。 Exceptions IOException I/O エラーが発生しました。 ObjectDisposedException ストリームが閉じています。 Write(byte) 現在のストリームに符号なしバイトを書き込み、ストリームの位置を 1 バイトだけ進めます。 public virtual void Write(byte value) Parameters value byte 書き込む符号なしバイト。 Exceptions IOException I/O エラーが発生しました。 ObjectDisposedException ストリームが閉じています。 Write(byte[]) 基になるストリームにバイト配列を書き込みます。 public virtual void Write(byte[] buffer) Parameters buffer byte[] 書き込むデータが格納されているバイト配列。 Exceptions IOException I/O エラーが発生しました。 ObjectDisposedException ストリームが閉じています。 ArgumentNullException buffer が null です。 Write(byte[], int, int) 現在のストリームにバイト配列の特定の領域を書き込みます。 public virtual void Write(byte[] buffer, int index, int count) Parameters buffer byte[] 書き込むデータが格納されているバイト配列。 index int count int Exceptions ArgumentException バッファ長から index を差し引いた値が count より小さい値です。 ArgumentNullException buffer が null です。 ArgumentOutOfRangeException index または count が負の値です。 IOException I/O エラーが発生しました。 ObjectDisposedException ストリームが閉じています。 Write(char) 現在のストリームに Unicode 文字を書き込み、使用した Encoding とストリームに書き込んだ特定の文字に従ってストリームの現在位置を進めます。 public virtual void Write(char ch) Parameters ch char 書き込む文字。 Exceptions IOException I/O エラーが発生しました。 ObjectDisposedException ストリームが閉じています。 Write(char[]) 現在のストリームに文字配列を書き込み、使用した Encoding とストリームに書き込んだ特定の文字に従ってストリームの現在位置を進めます。 public virtual void Write(char[] chars) Parameters chars char[] 書き込むデータを格納する文字配列。 Exceptions ArgumentNullException chars が null です。 ObjectDisposedException ストリームが閉じています。 IOException I/O エラーが発生しました。 Write(char[], int, int) 現在のストリームに文字配列の特定の領域を書き込み、使用した Encoding とストリームに書き込んだ特定の文字に従ってストリームの現在位置を進めます。 public virtual void Write(char[] chars, int index, int count) Parameters chars char[] 書き込むデータを格納する文字配列。 index int buffer 内の書き込み開始点。 count int 書き込む文字の数。 Exceptions ArgumentException バッファ長から index を差し引いた値が count より小さい値です。 ArgumentNullException chars が null です。 ArgumentOutOfRangeException index または count が負の値です。 IOException I/O エラーが発生しました。 ObjectDisposedException ストリームが閉じています。 Write(decimal) 現在のストリームに 10 進数値を書き込み、ストリームの位置を 8 バイトだけ進めます。 public virtual void Write(decimal value) Parameters value decimal 書き込む 10 進値。 Exceptions IOException I/O エラーが発生しました。 ObjectDisposedException ストリームが閉じています。 Write(double) 現在のストリームに 8 バイト浮動小数点値を書き込み、ストリームの位置を 8 バイトだけ進めます。 public virtual void Write(double value) Parameters value double 書き込む 8 バイト浮動小数点値。 Exceptions IOException I/O エラーが発生しました。 ObjectDisposedException ストリームが閉じています。 Write(short) 現在のストリームに 2 バイト符号付き整数を書き込み、ストリームの位置を 2 バイトだけ進めます。 public virtual void Write(short value) Parameters value short 書き込む 2 バイト符号付き整数。 Exceptions IOException I/O エラーが発生しました。 ObjectDisposedException ストリームが閉じています。 Write(int) 現在のストリームに 4 バイト符号付き整数を書き込み、ストリームの位置を 4 バイトだけ進めます。 public virtual void Write(int value) Parameters value int 書き込む 4 バイト符号付き整数。 Exceptions IOException I/O エラーが発生しました。 ObjectDisposedException ストリームが閉じています。 Write(long) 現在のストリームに 8 バイト符号付き整数を書き込み、ストリームの位置を 8 バイトだけ進めます。 public virtual void Write(long value) Parameters value long 書き込む 8 バイト符号付き整数。 Exceptions IOException I/O エラーが発生しました。 ObjectDisposedException ストリームが閉じています。 Write(sbyte) 現在のストリームに符号付きバイトを書き込み、ストリームの位置を 1 バイトだけ進めます。 [CLSCompliant(false)] public virtual void Write(sbyte value) Parameters value sbyte 書き込む符号付きバイト。 Exceptions IOException I/O エラーが発生しました。 ObjectDisposedException ストリームが閉じています。 Write(float) 現在のストリームに 4 バイト浮動小数点値を書き込み、ストリームの位置を 4 バイトだけ進めます。 public virtual void Write(float value) Parameters value float 書き込む 4 バイト浮動小数点値。 Exceptions IOException I/O エラーが発生しました。 ObjectDisposedException ストリームが閉じています。 Write(string) 文字長プリフィックスを持つ文字列を、BinaryFormatWriter の現在のエンコーディングでこのストリームに書き込み、使用したエンコーディングとストリームに書き込んだ特定の文字に従ってストリームの現在位置を進めます。 public virtual void Write(string value) Parameters value string 書き込む値。 Exceptions IOException I/O エラーが発生しました。 ArgumentNullException value が null です。 ObjectDisposedException ストリームが閉じています。 Write(ushort) 現在のストリームに 2 バイト符号なし整数を書き込み、ストリームの位置を 2 バイトだけ進めます。 [CLSCompliant(false)] public virtual void Write(ushort value) Parameters value ushort 書き込む 2 バイト符号なし整数。 Exceptions IOException I/O エラーが発生しました。 ObjectDisposedException ストリームが閉じています。 Write(uint) 現在のストリームに 4 バイト符号なし整数を書き込み、ストリームの位置を 4 バイトだけ進めます。 [CLSCompliant(false)] public virtual void Write(uint value) Parameters value uint 書き込む 4 バイト符号なし整数。 Exceptions IOException I/O エラーが発生しました。 ObjectDisposedException ストリームが閉じています。 Write(ulong) 現在のストリームに 8 バイト符号なし整数を書き込み、ストリームの位置を 8 バイトだけ進めます。 [CLSCompliant(false)] public virtual void Write(ulong value) Parameters value ulong 書き込む 8 バイト符号なし整数。 Exceptions IOException I/O エラーが発生しました。 ObjectDisposedException ストリームが閉じています。 Write7BitEncodedInt(int) 32 ビット整数を圧縮形式で書き込みます。 protected void Write7BitEncodedInt(int value) Parameters value int 書き込む 32 ビット整数。 Exceptions EndOfStreamException ストリームの末尾に到達しました。 ObjectDisposedException ストリームが閉じています。 IOException ストリームが閉じています。"
  },
  "api/MapQuest.IO.CacheFileDeletedEventArgs.html": {
    "href": "api/MapQuest.IO.CacheFileDeletedEventArgs.html",
    "title": "Class CacheFileDeletedEventArgs | mysite",
    "keywords": "Class CacheFileDeletedEventArgs Namespace MapQuest.IO Assembly MapQuest.Core.dll CacheFileDeleted イベントにデータを提供します。 public class CacheFileDeletedEventArgs : EventArgs Inheritance object EventArgs CacheFileDeletedEventArgs Inherited Members EventArgs.Empty object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors CacheFileDeletedEventArgs(StringList, double, double) public CacheFileDeletedEventArgs(StringList deletedFiles, double currentCacheSize, double maxCacheSize) Parameters deletedFiles StringList currentCacheSize double maxCacheSize double Properties CurrentCacheSize public double CurrentCacheSize { get; set; } Property Value double DeletedFileList public StringList DeletedFileList { get; set; } Property Value StringList MaxCacheSize public double MaxCacheSize { get; set; } Property Value double"
  },
  "api/MapQuest.IO.CacheFileDeletedEventHandler.html": {
    "href": "api/MapQuest.IO.CacheFileDeletedEventHandler.html",
    "title": "Delegate CacheFileDeletedEventHandler | mysite",
    "keywords": "Delegate CacheFileDeletedEventHandler Namespace MapQuest.IO Assembly MapQuest.Core.dll CacheFileDeleted イベントを処理するメソッドを表します。 public delegate void CacheFileDeletedEventHandler(object sender, CacheFileDeletedEventArgs args) Parameters sender object イベントのソース。 args CacheFileDeletedEventArgs イベント データを格納している CacheFileDeletedEventArgs 。 Constructors CacheFileDeletedEventHandler(object, IntPtr) public CacheFileDeletedEventHandler(object @object, IntPtr method) Parameters object object method IntPtr Methods BeginInvoke(object, CacheFileDeletedEventArgs, AsyncCallback, object) public virtual IAsyncResult BeginInvoke(object sender, CacheFileDeletedEventArgs args, AsyncCallback callback, object @object) Parameters sender object args CacheFileDeletedEventArgs callback AsyncCallback object object Returns IAsyncResult EndInvoke(IAsyncResult) public virtual void EndInvoke(IAsyncResult result) Parameters result IAsyncResult Invoke(object, CacheFileDeletedEventArgs) public virtual void Invoke(object sender, CacheFileDeletedEventArgs args) Parameters sender object args CacheFileDeletedEventArgs"
  },
  "api/MapQuest.IO.CharTypeBits.html": {
    "href": "api/MapQuest.IO.CharTypeBits.html",
    "title": "Enum CharTypeBits | mysite",
    "keywords": "Enum CharTypeBits Namespace MapQuest.IO Assembly MapQuest.Core.dll Bitwise enumeration for character types. [Flags] public enum CharTypeBits : byte Fields Comment = 2 or something for line comments Digit = 16 usually 0 to 9 Eof = 64 eof char HexDigit = 32 usually 0 to 9, a-f and A-F Quote = 8 ' or \" type Whitespace = 4 whitespace Word = 1 word characters (usually alpha, digits, and domain specific)"
  },
  "api/MapQuest.IO.CoreIOException.html": {
    "href": "api/MapQuest.IO.CoreIOException.html",
    "title": "Class CoreIOException | mysite",
    "keywords": "Class CoreIOException Namespace MapQuest.IO Assembly MapQuest.Core.dll MapQuest.IO 名前空間で発生した例外を示すクラスです。 public class CoreIOException : CoreException Inheritance object CoreException CoreIOException Constructors CoreIOException() パラメータを指定しないでインスタンスを初期化します。 public CoreIOException() CoreIOException(int, Exception, params object[]) リソースID、例外の原因となった例外、例外のパラメータ群 を指定してインスタンスを初期化します。 public CoreIOException(int exceptionID, Exception inner, params object[] args) Parameters exceptionID int リソースに格納されているエラーメッセージの ID 。 inner Exception 例外の原因となった Exception 。 args object[] 例外のパラメータ群。 CoreIOException(int, params object[]) リソースID、例外のパラメータ群 を指定してインスタンスを初期化します。 public CoreIOException(int exceptionID, params object[] args) Parameters exceptionID int リソースに格納されているエラーメッセージの ID 。 args object[] 例外のパラメータ群。 CoreIOException(SerializationInfo, StreamingContext) デシリアライズの際に使用されるコンストラクタです。 protected CoreIOException(SerializationInfo info, StreamingContext context) Parameters info SerializationInfo 新しいインスタンスをシリアル化するために必要な情報を格納する SerializationInfo 。 context StreamingContext 新しいインスタンスに関連付けられているシリアル化ストリームのソースを格納する StreamingContext 。 CoreIOException(string) エラーメッセージを指定してインスタンスを初期化します。 public CoreIOException(string message) Parameters message string 例外のメッセージ。 CoreIOException(string, Exception) エラーメッセージと「この例外の原因である例外」を指定してインスタンスを初期化します。 public CoreIOException(string message, Exception inner) Parameters message string 例外のメッセージ。 inner Exception 現在の例外の原因である例外。 CoreIOException(string, int) 接頭辞とリソースID を指定してインスタンスを初期化します。 protected CoreIOException(string prefix, int exceptionID) Parameters prefix string 例外の接頭辞。 exceptionID int リソースに格納されているエラーメッセージの ID 。 CoreIOException(string, int, Exception) 接頭辞とリソースID、例外の原因となった例外を指定してインスタンスを初期化します。 protected CoreIOException(string prefix, int exceptionID, Exception inner) Parameters prefix string 例外の接頭辞。 exceptionID int リソースに格納されているエラーメッセージの ID 。 inner Exception 例外の原因となった Exception 。 CoreIOException(string, int, Exception, params object[]) 接頭辞とリソースID、例外のパラメータ群、例外の原因となった例外 を指定してインスタンスを初期化します。 protected CoreIOException(string prefix, int exceptionID, Exception inner, params object[] args) Parameters prefix string 例外の接頭辞。 exceptionID int リソースに格納されているエラーメッセージの ID 。 inner Exception 例外の原因となった Exception 。 args object[] 例外のパラメータ群。 CoreIOException(string, int, params object[]) 接頭辞とリソースID、例外のパラメータ群を指定してインスタンスを初期化します。 protected CoreIOException(string prefix, int exceptionID, params object[] args) Parameters prefix string 例外の接頭辞。 exceptionID int リソースに格納されているエラーメッセージの ID 。 args object[] 例外のパラメータ群。"
  },
  "api/MapQuest.IO.EofToken.html": {
    "href": "api/MapQuest.IO.EofToken.html",
    "title": "Class EofToken | mysite",
    "keywords": "Class EofToken Namespace MapQuest.IO Assembly MapQuest.Core.dll Represents end of file/stream. public class EofToken : Token Inheritance object Token EofToken Inherited Members object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Constructors EofToken() Default constructor. public EofToken() EofToken(int) Constructor that takes line number. public EofToken(int line) Parameters line int Properties StringValue Override, see base Token public override string StringValue { get; } Property Value string Type この Token の種類を取得します。 public override TokenType Type { get; } Property Value TokenType TokenType.Eof を返します。 読み取り専用です。 Methods Equals(object) Override, see base Token public override bool Equals(object other) Parameters other object Returns bool GetHashCode() Override, see base Token public override int GetHashCode() Returns int ToDebugString() Override, see base Token public override string ToDebugString() Returns string ToString() Override, see base Token public override string ToString() Returns string"
  },
  "api/MapQuest.IO.EolToken.html": {
    "href": "api/MapQuest.IO.EolToken.html",
    "title": "Class EolToken | mysite",
    "keywords": "Class EolToken Namespace MapQuest.IO Assembly MapQuest.Core.dll Represents end-of-lines (line separator characters). public class EolToken : Token Inheritance object Token EolToken Inherited Members object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Constructors EolToken() Default constructor. public EolToken() EolToken(int) Constructor that takes line number. public EolToken(int line) Parameters line int Properties StringValue Override, see base Token public override string StringValue { get; } Property Value string Type この Token の種類を取得します。 public override TokenType Type { get; } Property Value TokenType TokenType.Eol を返します。 読み取り専用です。 Methods Equals(object) Override, see base Token public override bool Equals(object other) Parameters other object Returns bool GetHashCode() Override, see base Token public override int GetHashCode() Returns int ToDebugString() Override, see base Token public override string ToDebugString() Returns string ToString() Override, see base Token public override string ToString() Returns string"
  },
  "api/MapQuest.IO.FileCache.html": {
    "href": "api/MapQuest.IO.FileCache.html",
    "title": "Class FileCache | mysite",
    "keywords": "Class FileCache Namespace MapQuest.IO Assembly MapQuest.Core.dll 指定したファイルパスからファイルを取得しキャッシュするクラス public class FileCache : IFileCache Inheritance object FileCache Implements IFileCache Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors FileCache() コンストラクタ public FileCache() Properties CacheFolder キャッシュフォルダ public string CacheFolder { get; set; } Property Value string DownloadHeader ファイルをWebから取得する際に設定するWebHeaderCollection public WebHeaderCollection DownloadHeader { get; set; } Property Value WebHeaderCollection FilterFileList キャッシュフォルダから削除しないファイルリスト public string[] FilterFileList { get; set; } Property Value string[] IsCreateEmptyFile キャッシュファイルが見つからなかった場合に空のファイルを作成するか否かの設定 public bool IsCreateEmptyFile { get; set; } Property Value bool LimitLocalCacheSize ローカルフォルダのキャッシュサイズを制限する設定 public bool LimitLocalCacheSize { get; set; } Property Value bool LocalCacheSize ローカルフォルダキャッシュサイズ（単位：MB) public int LocalCacheSize { get; set; } Property Value int MemoryCacheSize メモリキャッシュサイズ（単位：MB) public int MemoryCacheSize { get; set; } Property Value int Methods Clear() キャッシュしたファイルをすべて削除します。 public void Clear() Remarks キャッシュフォルダに元々存在したファイルも削除します フィルターの条件に一致したファイルは削除されません。 Contains(string) public bool Contains(string key) Parameters key string Returns bool GetFile(string, string) パスからファイルを取得しキャッシュメモリとキャッシュフォルダにキャッシュします public Stream GetFile(string path, string cacheFileName) Parameters path string ファイルパス 指定可能なパス：http,ローカルパス,UNCパス cacheFileName string Returns Stream パスから取得したファイルのストリーム GetFileAsync(string, string) パスからファイルを取得しキャッシュメモリとキャッシュフォルダにキャッシュします public Stream GetFileAsync(string path, string cacheFileName) Parameters path string ファイルパス 指定可能なパス：http,ローカルパス,UNCパス cacheFileName string Returns Stream パスから取得したファイルのストリーム Events CacheFileDeleted キャッシュしているファイルが削除された時に発生するイベントです。 public event CacheFileDeletedEventHandler CacheFileDeleted Event Type CacheFileDeletedEventHandler"
  },
  "api/MapQuest.IO.FileLock.html": {
    "href": "api/MapQuest.IO.FileLock.html",
    "title": "Class FileLock | mysite",
    "keywords": "Class FileLock Namespace MapQuest.IO Assembly MapQuest.Core.dll ファイルを「ロック」する手法を提供するクラスです。 public class FileLock : IFileLock, IDisposable Inheritance object FileLock Implements IFileLock IDisposable Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Examples 次の例は、このクラスの一般的な使用方法を示します。 string filename = @\"C:\\Data.dat\"; string lockFilename = @\"C:\\Data.dat.lock\"; try { using (IFileLock locking = new FileLock(lockFilename)) { // ↓↓↓ using 内の処理は排他制御されます。 StreamWriter writer = new StreamWriter(filename); writer.WriteLine(\"My Data...\"); writer.Close(); // ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑ } } catch (FileLockException exp) { Debug.WriteLine(exp.SourceFile + \" は、他のユーザーによって占有されています。\"); } Remarks このクラスは、インスタンスの生成と同時にロックファイルを生成、 破棄と同時にロックファイルを削除します。 このクラスを using 句で使用することにより、using 句内の処理を排他にする事ができます。 必ず using 句でのみ使用するようにしてください。 他のユーザーやプロセスが同じロックファイルを既に生成している場合は、インスタンスの生成時に FileLockException が発生します。 他の理由でロックファイルが生成、または削除できなかった場合は FileLockFatalException が発生します。 Constructors FileLock(string) ロックファイルを指定して、インスタンスを初期化します。 public FileLock(string filePath) Parameters filePath string ロックファイル名。 Remarks ロックファイルを作成し、ロックを開始します。 既にファイルが存在しているなどの理由で、ファイルが作成出来ない場合は、 FileLockException をスローします。 それ以外の原因で、ファイルが作成出来ない場合は、 FileLockFatalException をスローします。 Exceptions FileLockException 他のユーザーによって、 既にファイルロック・オブジェクトが生成されています。 FileLockFatalException ディスク書き込み不可などの 理由で、ロックファイルが生成できません。。 Properties Source 現在のロックファイル名を取得します。 public string Source { get; } Property Value string 現在のロックファイル名。 Methods Dispose() このインスタンスによるファイルロックを解除します。 public void Dispose() Remarks ロックファイルを削除し、ロックを解除します。 Exceptions FileLockFatalException ロックファイルが削除できない場合に発生します。"
  },
  "api/MapQuest.IO.FileLockException.html": {
    "href": "api/MapQuest.IO.FileLockException.html",
    "title": "Class FileLockException | mysite",
    "keywords": "Class FileLockException Namespace MapQuest.IO Assembly MapQuest.Core.dll ファイルロック・オブジェクトが他のユーザーによって 既に生成されていることを示す例外クラスです。 public class FileLockException : SystemException, ISerializable, _Exception Inheritance object Exception SystemException FileLockException Implements ISerializable _Exception Derived FileLockFatalException Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Message Exception.Data Exception.InnerException Exception.TargetSite Exception.StackTrace Exception.HelpLink Exception.Source Exception.HResult Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.MemberwiseClone() Constructors FileLockException(string) ロックファイルを指定して、新しいインスタンスを初期化します。 public FileLockException(string source) Parameters source string ロックファイル名。 FileLockException(string, string, Exception) ロックファイル、エラーメッセージ、この例外の原因となる例外を指定して、 新しいインスタンスを初期化します。 public FileLockException(string source, string message, Exception innerException) Parameters source string ロックファイル名。 message string エラーメッセージ。 innerException Exception 例外の原因となる Exception 。 Properties SourceFile この例外に関連するロックファイル名を取得します。 public string SourceFile { get; } Property Value string この例外に関連するロックファイル名。"
  },
  "api/MapQuest.IO.FileLockFatalErrorCode.html": {
    "href": "api/MapQuest.IO.FileLockFatalErrorCode.html",
    "title": "Enum FileLockFatalErrorCode | mysite",
    "keywords": "Enum FileLockFatalErrorCode Namespace MapQuest.IO Assembly MapQuest.Core.dll FileLockFatalException のエラーコードを示します。 public enum FileLockFatalErrorCode Fields Create = 1 ロックファイル生成時にエラーが発生したことを示します。 Delete = 2 ロックファイル削除時にエラーが発生したことを示します。 None = 0 エラー無し"
  },
  "api/MapQuest.IO.FileLockFatalException.html": {
    "href": "api/MapQuest.IO.FileLockFatalException.html",
    "title": "Class FileLockFatalException | mysite",
    "keywords": "Class FileLockFatalException Namespace MapQuest.IO Assembly MapQuest.Core.dll ロックファイル生成中や削除中に発生した致命的な例外を示すクラスです。 public class FileLockFatalException : FileLockException, ISerializable, _Exception Inheritance object Exception SystemException FileLockException FileLockFatalException Implements ISerializable _Exception Inherited Members FileLockException.SourceFile Exception.GetBaseException() Exception.ToString() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Message Exception.Data Exception.InnerException Exception.TargetSite Exception.StackTrace Exception.HelpLink Exception.Source Exception.HResult Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.MemberwiseClone() Constructors FileLockFatalException(FileLockFatalErrorCode, string, string, Exception) ロックファイル、エラーメッセージ、この例外の原因となる例外を指定して、 新しいインスタンスを初期化します。 public FileLockFatalException(FileLockFatalErrorCode fatalErrCode, string source, string message, Exception innerException) Parameters fatalErrCode FileLockFatalErrorCode エラーの場所などを示すコード。 source string ロックファイル名。 message string エラーメッセージ。 innerException Exception 例外の原因となる Exception 。 Properties ErrorCode エラーの場所などを示すコードを取得します。 public FileLockFatalErrorCode ErrorCode { get; } Property Value FileLockFatalErrorCode エラーの場所などを示すコード。"
  },
  "api/MapQuest.IO.FileUtil.html": {
    "href": "api/MapQuest.IO.FileUtil.html",
    "title": "Class FileUtil | mysite",
    "keywords": "Class FileUtil Namespace MapQuest.IO Assembly MapQuest.Core.dll ローカルファイルか、URL かを意識することなくファイルを開く事ができる クラスです。 public class FileUtil Inheritance object FileUtil Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods CopyStream(Stream, Stream, Delegate) Stream の内容を別の Stream へコピーします。 strm1 の現在位置から strem2 の現在位置へデータをコピーし、 両方の Stream の現在位置を進めます。 つまり、どちらの Stream も、このメソッドに渡す時の現在位置が「0(=開始位置)」 でなければ、全データコピーにはなりません。 また、このメソッドの処理終了時の両方の Stream の現在位置は、どちらも 終点になります。 public static void CopyStream(Stream strm1, Stream strm2, Delegate subscribeProgress) Parameters strm1 Stream コピー元の Stream 。 strm2 Stream コピー先の Stream 。 subscribeProgress Delegate コピーの進捗状況を通知する Delegate 。 GetDirectoryName(string) 指定した引数の、親のディレクトリ名をフルパスで取得します。 ローカルパス、UNCパス、URL に対応しています。 public static string GetDirectoryName(string source) Parameters source string フルパスのローカルパス、UNCパス、URL 。 Returns string source の親のディレクトリをフルパスで示した文字列。 Examples \"C:\\data.dat\" → \"C:\\\" \"C:\\dir\\data.dat\" → \"C:\\dir\\\" \"\\\\NSE_T\\dir\\data.dat\" → \"\\\\NSE_T\\dir\\\" \"http://domain/dir/data.dat\" → \"http://domain/dir/\" IsPhysicalPath(string) パスが絶対パスかどうかを取得する。 パフォーマンスを重視し、文字列の簡単なチェックで判別している ため、厳密には正しくないかもしれない。 しかし、フォルダ存在チェックなどを行うと速度が落ちるので、 これでよしとする。 ローカルパス、UNCパス、URL に対応しています。 public static bool IsPhysicalPath(string path) Parameters path string パス Returns bool 絶対パスならば true。 IsPhysicalPath(string, bool) パスが絶対パスかどうかを取得する。 パフォーマンスを重視し、文字列の簡単なチェックで判別している ため、厳密には正しくないかもしれない。 しかし、フォルダ存在チェックなどを行うと速度が落ちるので、 これでよしとする。 ローカルパス、UNCパス、URL に対応しています。 public static bool IsPhysicalPath(string path, bool checkByUriScheme) Parameters path string パス checkByUriScheme bool Returns bool URL、UNC、絶対パスならば true。空文字 や null などそれ以外の場合はfalse。 LoadAppScope(string) 指定されたパスの、SoapFormatterでシリアライズされたファイルをHashTableに読み込みます。 public static Hashtable LoadAppScope(string filePath) Parameters filePath string SaopFormatterでシリアライズして保存されたファイルへのパス。 Returns Hashtable 指定されたパスのSoapFormatterでシリアライズされたファイルをデシリアライズしたHashTable。 OpenRead(string) ローカルや URL などを指定してファイルを開きます。 public static Stream OpenRead(string source) Parameters source string ファイルの所在を示すローカルパス または UNC または URL 。 Returns Stream Remarks FileUtil.OpenRead(source, true, \"\", null); の処理を行います。 つまり、ローカルにはダウンロードせずにファイルを開き、そのコピーを返します。 OpenRead(string, WebHeaderCollection) public static Stream OpenRead(string source, WebHeaderCollection header) Parameters source string header WebHeaderCollection Returns Stream OpenRead(string, string, Delegate) public static Stream OpenRead(string source, string downloadFolder, Delegate subscribeProgress) Parameters source string downloadFolder string subscribeProgress Delegate Returns Stream OpenRead(string, string, Delegate, bool) コピーを使用するか、ローカルフォルダにダウンロードするかどうかなどを指定して、 ローカルや URL などのファイルを開きます。 public static Stream OpenRead(string source, string downloadFolder, Delegate subscribeProgress, bool createZeroFile) Parameters source string ファイルの所在を示すローカルパス または UNC または URL 。 downloadFolder string useCopy が true で且つ、 この引数にローカルの任意のフォルダを指定すると、 そのフォルダにダウンロードします。既にファイルが存在する場合、 ダウンロードせずそのファイルを読み込みます。 subscribeProgress Delegate ファイル転送中を通知する Delegate 。 詳細未定。 createZeroFile bool Returns Stream 開いた Stream 。 Remarks note downloadFolder の存在確認はしていません。速度が低下するためです。 OpenRead(string, string, Delegate, bool, WebHeaderCollection) コピーを使用するか、ローカルフォルダにダウンロードするかどうかなどを指定して、 ローカルや URL などのファイルを開きます。 public static Stream OpenRead(string source, string downloadFolder, Delegate subscribeProgress, bool createZeroFile, WebHeaderCollection header) Parameters source string ファイルの所在を示すローカルパス または UNC または URL 。 downloadFolder string useCopy が true で且つ、 この引数にローカルの任意のフォルダを指定すると、 そのフォルダにダウンロードします。既にファイルが存在する場合、 ダウンロードせずそのファイルを読み込みます。 subscribeProgress Delegate ファイル転送中を通知する Delegate 。 詳細未定。 createZeroFile bool header WebHeaderCollection Returns Stream 開いた Stream 。 Remarks note downloadFolder の存在確認はしていません。速度が低下するためです。 PathAddBackSlash(string) パスの終端に、パス区切り文字列を付けて返します。 ローカルパス、UNCパス、URL に対応しています。 public static string PathAddBackSlash(string path) Parameters path string 区切り文字を付けるパス文字列。 ローカルパスまたは UNC または URL 。 Returns string 終端に区切り文字がついた文字列。 PathCombine(string, string) ベースのパスに相対パスを連結します。 public static string PathCombine(string basePath, string relativePath) Parameters basePath string ベースとなるローカルパス、UNCパス、URL 。 relativePath string ベースからの相対パス。 Returns string basePath に relativePath を連結したパス。 SaveAppScope(Hashtable, string) 指定されたHashTableをSoapFormatterでシリアライズした内容を、指定されたパスに保存します。 public static void SaveAppScope(Hashtable settings, string filePath) Parameters settings Hashtable 保存するHashtable filePath string 保存先のファイルパス"
  },
  "api/MapQuest.IO.IFileCache.html": {
    "href": "api/MapQuest.IO.IFileCache.html",
    "title": "Interface IFileCache | mysite",
    "keywords": "Interface IFileCache Namespace MapQuest.IO Assembly MapQuest.Core.dll public interface IFileCache Properties CacheFolder string CacheFolder { get; set; } Property Value string DownloadHeader WebHeaderCollection DownloadHeader { get; set; } Property Value WebHeaderCollection LocalCacheSize int LocalCacheSize { get; set; } Property Value int MemoryCacheSize int MemoryCacheSize { get; set; } Property Value int Methods Clear() void Clear() Contains(string) bool Contains(string key) Parameters key string Returns bool GetFile(string, string) Stream GetFile(string path, string cacheFileName) Parameters path string cacheFileName string Returns Stream"
  },
  "api/MapQuest.IO.IFileLock.html": {
    "href": "api/MapQuest.IO.IFileLock.html",
    "title": "Interface IFileLock | mysite",
    "keywords": "Interface IFileLock Namespace MapQuest.IO Assembly MapQuest.Core.dll ファイルをロックする手段を提供するインターフェースです。 FileLock public interface IFileLock : IDisposable Inherited Members IDisposable.Dispose() Properties Source 現在のロックファイル名を取得します。 string Source { get; } Property Value string 現在のロックファイル名。"
  },
  "api/MapQuest.IO.MemoryCache.html": {
    "href": "api/MapQuest.IO.MemoryCache.html",
    "title": "Class MemoryCache | mysite",
    "keywords": "Class MemoryCache Namespace MapQuest.IO Assembly MapQuest.Core.dll public class MemoryCache : IFileCache Inheritance object MemoryCache Implements IFileCache Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors MemoryCache(string, NameValueCollection) public MemoryCache(string name, NameValueCollection config = null) Parameters name string config NameValueCollection Properties CacheFolder public string CacheFolder { get; set; } Property Value string DownloadHeader public WebHeaderCollection DownloadHeader { get; set; } Property Value WebHeaderCollection LocalCacheSize public int LocalCacheSize { get; set; } Property Value int MemoryCacheSize public int MemoryCacheSize { get; set; } Property Value int Methods Clear() public void Clear() Contains(string) public bool Contains(string key) Parameters key string Returns bool GetFile(string, string) public Stream GetFile(string path, string cacheFileName) Parameters path string cacheFileName string Returns Stream"
  },
  "api/MapQuest.IO.html": {
    "href": "api/MapQuest.IO.html",
    "title": "Namespace MapQuest.IO | mysite",
    "keywords": "Namespace MapQuest.IO Classes AppSettingsManager BinaryFormatReader プリミティブ データ型を特定のエンコーディングのバイナリ値として読み取ります。 BinaryFormatWriter プリミティブ型をバイナリでストリームに書き込みます。 特定のエンコーディングの文字列の書き込みをサポートします。 CacheFileDeletedEventArgs CacheFileDeleted イベントにデータを提供します。 CoreIOException MapQuest.IO 名前空間で発生した例外を示すクラスです。 EofToken Represents end of file/stream. EolToken Represents end-of-lines (line separator characters). FileCache 指定したファイルパスからファイルを取得しキャッシュするクラス FileLock ファイルを「ロック」する手法を提供するクラスです。 FileLockException ファイルロック・オブジェクトが他のユーザーによって 既に生成されていることを示す例外クラスです。 FileLockFatalException ロックファイル生成中や削除中に発生した致命的な例外を示すクラスです。 FileUtil ローカルファイルか、URL かを意識することなくファイルを開く事ができる クラスです。 MemoryCache Interfaces IFileCache IFileLock ファイルをロックする手段を提供するインターフェースです。 FileLock Enums CharTypeBits Bitwise enumeration for character types. FileLockFatalErrorCode FileLockFatalException のエラーコードを示します。 Delegates CacheFileDeletedEventHandler CacheFileDeleted イベントを処理するメソッドを表します。"
  },
  "api/MapQuest.Loggers.ILog.html": {
    "href": "api/MapQuest.Loggers.ILog.html",
    "title": "Interface ILog | mysite",
    "keywords": "Interface ILog Namespace MapQuest.Loggers Assembly MapQuest.Core.dll public interface ILog Methods Debug(object) ログレベル Debug としてのログ出力を行います。 void Debug(object message) Parameters message object 出力対象。 Debug(object, Exception) ログレベル Debug として例外のログ出力を行います。 void Debug(object message, Exception t) Parameters message object 出力対象。 t Exception 例外の内容。 Error(object) ログレベル Error としてのログ出力を行います。 void Error(object message) Parameters message object 出力対象。 Error(object, Exception) ログレベル Error として例外のログ出力を行います。 void Error(object message, Exception t) Parameters message object 出力対象。 t Exception 例外の内容。 Fatal(object) ログレベル Fatal としてのログ出力を行います。 void Fatal(object message) Parameters message object 出力対象。 Fatal(object, Exception) ログレベル Fatal として例外のログ出力を行います。 void Fatal(object message, Exception t) Parameters message object 出力対象。 t Exception 例外の内容。 Info(object) ログレベル Info としてのログ出力を行います。 void Info(object message) Parameters message object 出力対象。 Info(object, Exception) ログレベル Info として例外のログ出力を行います。 void Info(object message, Exception t) Parameters message object 出力対象。 t Exception 例外の内容。 SetCheckPoint(string) チェックポイントを設定します。 void SetCheckPoint(string checkPoint) Parameters checkPoint string チェックポイント。 Warn(object) ログレベル Warn としてのログ出力を行います。 void Warn(object message) Parameters message object 出力対象。 Warn(object, Exception) ログレベル Warn として例外のログ出力を行います。 void Warn(object message, Exception t) Parameters message object 出力対象。 t Exception 例外の内容。"
  },
  "api/MapQuest.Loggers.LevelTypes.html": {
    "href": "api/MapQuest.Loggers.LevelTypes.html",
    "title": "Enum LevelTypes | mysite",
    "keywords": "Enum LevelTypes Namespace MapQuest.Loggers Assembly MapQuest.Core.dll デバッグレベルを定義します。 public enum LevelTypes : short Fields Debug = 1 Error = 8 Fatal = 16 Info = 2 None = 128 Warn = 4"
  },
  "api/MapQuest.Loggers.Logger.html": {
    "href": "api/MapQuest.Loggers.Logger.html",
    "title": "Class Logger | mysite",
    "keywords": "Class Logger Namespace MapQuest.Loggers Assembly MapQuest.Core.dll 既定のログ出力クラスです。 public class Logger : ILog Inheritance object Logger Implements ILog Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Fields DEFAULT_BASEDIR 既定のログ出力フォルダ。 public const string DEFAULT_BASEDIR = \"%ALLUSERSPROFILE%\\\\MapQuest\" Field Value string DEFAULT_FILENAME 既定のログファイル名。 public const string DEFAULT_FILENAME = \"{0:yyyyMMddHHmmssfff}.log\" Field Value string DEFAULT_HEADER 既定のログヘッダ。 public const string DEFAULT_HEADER = \"[{0:yyyy/MM/dd HH:mm:ss.fff}] \" Field Value string Properties BaseDir ログを出力するフォルダ名を取得または設定します。 public static string BaseDir { get; set; } Property Value string ログを出力するフォルダ名。 Remarks 環境変数を含めることができます。 CurrentLevel 出力するログレベルの下限値を取得または設定します。 public static LevelTypes CurrentLevel { get; set; } Property Value LevelTypes 出力するログレベルの下限値。 DisableCheckPoint チェックポイントの出力を無効化するかどうかを示す値を取得または設定します。 public static bool DisableCheckPoint { get; set; } Property Value bool チェックポイントの出力を無効化するかどうかを示す値。 FileName ログファイル名を取得または設定します。 public static string FileName { get; set; } Property Value string ログファイル名。 Remarks 初回のログ出力までに設定してください。{0}には DateTime.Now が入ります。 Header ログの各行に出力するヘッダを取得または設定します。 public static string Header { get; set; } Property Value string ログの各行に出力するヘッダ。 Remarks {0}には DateTime.Now が入ります。 Methods Debug(object) ログレベル Debug としてのログ出力を行います。 public void Debug(object message) Parameters message object 出力対象。 Debug(object, Exception) ログレベル Debug として例外のログ出力を行います。 public void Debug(object message, Exception t) Parameters message object 出力対象。 t Exception 例外の内容。 Error(object) ログレベル Error としてのログ出力を行います。 public void Error(object message) Parameters message object 出力対象。 Error(object, Exception) ログレベル Error として例外のログ出力を行います。 public void Error(object message, Exception t) Parameters message object 出力対象。 t Exception 例外の内容。 Fatal(object) ログレベル Fatal としてのログ出力を行います。 public void Fatal(object message) Parameters message object 出力対象。 Fatal(object, Exception) ログレベル Fatal として例外のログ出力を行います。 public void Fatal(object message, Exception t) Parameters message object 出力対象。 t Exception 例外の内容。 GetLogger() ロガーを取得します。 public static Logger GetLogger() Returns Logger ログを出力するためのロガー。 Info(object) ログレベル Info としてのログ出力を行います。 public void Info(object message) Parameters message object 出力対象。 Info(object, Exception) ログレベル Info として例外のログ出力を行います。 public void Info(object message, Exception t) Parameters message object 出力対象。 t Exception 例外の内容。 MakeExceptionInfo(Exception) 例外から例外メッセージを生成します。 public static string MakeExceptionInfo(Exception exception) Parameters exception Exception 対象の例外。 Returns string 例外の情報を示す文字列。 SetCheckPoint(string) チェックポイントを設定します。 public void SetCheckPoint(string checkPoint) Parameters checkPoint string チェックポイント。 Warn(object) ログレベル Warn としてのログ出力を行います。 public void Warn(object message) Parameters message object 出力対象。 Warn(object, Exception) ログレベル Warn として例外のログ出力を行います。 public void Warn(object message, Exception t) Parameters message object 出力対象。 t Exception 例外の内容。"
  },
  "api/MapQuest.Loggers.html": {
    "href": "api/MapQuest.Loggers.html",
    "title": "Namespace MapQuest.Loggers | mysite",
    "keywords": "Namespace MapQuest.Loggers Classes Logger 既定のログ出力クラスです。 Interfaces ILog Enums LevelTypes デバッグレベルを定義します。"
  },
  "api/MapQuest.Patterns.Composite.IEntry.html": {
    "href": "api/MapQuest.Patterns.Composite.IEntry.html",
    "title": "Interface IEntry | mysite",
    "keywords": "Interface IEntry Namespace MapQuest.Patterns.Composite Assembly MapQuest.Core.dll 木構造を表現するデザインパターン Composite における Component を表現するインターフェースです。 Composite パターンは個々のオブジェクトとオブジェクトを合成したものを 一様に扱うことができる木構造を組み立てます。 public interface IEntry Properties IsNode エントリがノードがどうかを示す値を取得します。 bool IsNode { get; } Property Value bool エントリがノードである場合は true 。 エントリがノードでない場合は false 。 Remarks このプロパティは読み取り専用です。 Name エントリの名前を取得または設定します。 string Name { get; set; } Property Value string エントリの名前。 Parent 親のエントリを取得または設定します。 IEntry Parent { get; set; } Property Value IEntry 親のエントリがある場合は IEntry 。 親のエントリがない場合は Null 。"
  },
  "api/MapQuest.Patterns.Composite.ILeaf.html": {
    "href": "api/MapQuest.Patterns.Composite.ILeaf.html",
    "title": "Interface ILeaf | mysite",
    "keywords": "Interface ILeaf Namespace MapQuest.Patterns.Composite Assembly MapQuest.Core.dll 木構造を表現するデザインパターン Composite における Leaf を表現するインターフェースです。 ILeaf は木構造の中の「葉」にあたります。 public interface ILeaf : IEntry Inherited Members IEntry.Name IEntry.IsNode IEntry.Parent"
  },
  "api/MapQuest.Patterns.Composite.INode.html": {
    "href": "api/MapQuest.Patterns.Composite.INode.html",
    "title": "Interface INode | mysite",
    "keywords": "Interface INode Namespace MapQuest.Patterns.Composite Assembly MapQuest.Core.dll 木構造を表現するデザインパターン Composite における Composite を表現するインターフェースです。 INode は木構造の中の「枝」にあたります。 public interface INode : IEntry, IEnumerable Inherited Members IEntry.Name IEntry.IsNode IEntry.Parent IEnumerable.GetEnumerator() Remarks このインターフェースではノードとして IEntry を追加したり削除するインターフェースを定義していますが、 IEntry のコレクションの定義はありません。 コレクションは実装側の要件に応じて、 厳密なインターフェースまたはクラスを扱うようにしてください。 Properties Count INode に格納されているエントリの数を取得します。 int Count { get; } Property Value int INode に格納されているエントリの数。 this[int] 指定したインデックスにあるエントリを取得または設定します。 IEntry this[int index] { get; set; } Parameters index int 取得または設定するエントリの、0 から始まるインデックス番号。 Property Value IEntry 指定したインデックスにあるエントリ。 Methods Add(IEntry) 指定したエントリを追加します。 int Add(IEntry value) Parameters value IEntry 追加する新しいエントリ。 Returns int 新しいエントリが挿入された位置。 Clear() 追加されているすべてのエントリを削除します。 void Clear() Contains(IEntry) INode に特定のエントリが格納されているかどうかを判断します。 bool Contains(IEntry value) Parameters value IEntry INode 内で検索される IEntry 。 Returns bool IEntry が INode に存在する場合は true 。 それ以外の場合は false 。 IndexOf(IEntry) INode 内の特定の項目のインデックスを判断します。 int IndexOf(IEntry value) Parameters value IEntry INode 内で検索される IEntry 。 Returns int リストに存在する場合は value のインデックス。 それ以外の場合は -1。 Insert(int, IEntry) INode 内の指定した位置に項目を挿入します。 void Insert(int index, IEntry value) Parameters index int value を挿入する位置の、0 から始まるインデックス番号。 value IEntry INode に挿入する IEntry 。 Remove(IEntry) 指定したエントリを削除します。 void Remove(IEntry value) Parameters value IEntry 削除するエントリ。 RemoveAt(int) 指定したインデックスにある項目を INode から削除します。 void RemoveAt(int index) Parameters index int 削除する項目の 0 から始まるインデックス。"
  },
  "api/MapQuest.Patterns.Composite.html": {
    "href": "api/MapQuest.Patterns.Composite.html",
    "title": "Namespace MapQuest.Patterns.Composite | mysite",
    "keywords": "Namespace MapQuest.Patterns.Composite Interfaces IEntry 木構造を表現するデザインパターン Composite における Component を表現するインターフェースです。 Composite パターンは個々のオブジェクトとオブジェクトを合成したものを 一様に扱うことができる木構造を組み立てます。 ILeaf 木構造を表現するデザインパターン Composite における Leaf を表現するインターフェースです。 ILeaf は木構造の中の「葉」にあたります。 INode 木構造を表現するデザインパターン Composite における Composite を表現するインターフェースです。 INode は木構造の中の「枝」にあたります。"
  },
  "api/MapQuest.ProductInformation.html": {
    "href": "api/MapQuest.ProductInformation.html",
    "title": "Class ProductInformation | mysite",
    "keywords": "Class ProductInformation Namespace MapQuest Assembly MapQuest.Core.dll 製品情報を示すクラスです。 public class ProductInformation Inheritance object ProductInformation Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors ProductInformation() public ProductInformation() Fields Company 会社名。 public const string Company = \"MapQuest Corp., Japan\" Field Value string Copyright コピーライト。 public const string Copyright = \"Copyright (C) 1992 - 2024 MapQuest Corp, Japan. All Rights Reserved.\" Field Value string Culture 言語。空文字にする必要があります。 public const string Culture = \"\" Field Value string KeyFile キーファイルの位置。 public const string KeyFile = \"..\\\\..\\\\..\\\\MapQuest.snk\" Field Value string Product 製品名。 public const string Product = \"MapQuest.NET GIS System\" Field Value string Trademark トレードマーク。 public const string Trademark = \"\" Field Value string Version リリースバージョン。 public const string Version = \"5.0.0.0\" Field Value string"
  },
  "api/MapQuest.Serialization.SerializationBinderFactory.html": {
    "href": "api/MapQuest.Serialization.SerializationBinderFactory.html",
    "title": "Class SerializationBinderFactory | mysite",
    "keywords": "Class SerializationBinderFactory Namespace MapQuest.Serialization Assembly MapQuest.Core.dll 過去のバージョンのアセンブリでシリアライズされたデータを 最新のアセンブリでデシリアライズするための SerializationBinder を生成するファクトリクラスです。 public class SerializationBinderFactory Inheritance object SerializationBinderFactory Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors SerializationBinderFactory() public SerializationBinderFactory() Methods CreateBinder() シリアライズ／デシリアライズの際に使用されるバインダを生成します。 public static SerializationBinder CreateBinder() Returns SerializationBinder シリアライズ／デシリアライズの際に使用されるバインダ。 Examples // フォーマッタ(シリアライザ)を用意。 IFormatter formatter = new BinaryFormatter(); // Binder を設定。 formatter.Binder = MapQuest.Serialization.SerializationBinderFactory.CreateBinder(); // デシリアライズを実行 object obj = formatter.Deserialize(stream); Remarks .NET Framework のシリアライズは、 シリアライズされた時のアセンブリの情報を詳細に記録します。 そして、デシリアライズする時のアセンブリの情報と異なると、デシリアライズできません。 SerializationBinder を使うと、 シリアライズされたデータをどのように復元させるかを制御できます。 このメソッドは、以前のバージョンで保存されたデータを、 現在のバージョンで復元できるよう実装された SerializationBinder を生成します。 これを、BinaryFormatter, SoapFormatter などの IFormatter に設定することで、 シリアライズされたデータのバージョン互換を保つ事が可能になります。"
  },
  "api/MapQuest.Serialization.SerializationInfoHelper.html": {
    "href": "api/MapQuest.Serialization.SerializationInfoHelper.html",
    "title": "Class SerializationInfoHelper | mysite",
    "keywords": "Class SerializationInfoHelper Namespace MapQuest.Serialization Assembly MapQuest.Core.dll SerializationInfo がサポートしていない型のデータを分解して保持します。 SerializationInfoHelper は SerializationInfo の ラッパーです。実際のデータの保持は SerializationInfo が対応します。 public class SerializationInfoHelper : IDisposable Inheritance object SerializationInfoHelper Implements IDisposable Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Examples シリアライズの例。 public void GetObjectData(SerializationInfo info, StreamingContext context) { // シリアル化情報に、シリアル化に際して値に関連づけられる名称とその値を追加します using(SerializationInfoHelper helper = new SerializationInfoHelper(info)) { // SingleValues プロパティの値を追加( null 値は追加できないので必要に合わせてチェックする) if (this.SingleValues != null) helper.AddValue(\"SingleValues\", this.SingleValues); // PointFValue プロパティの値を追加 helper.AddValue(\"PointFValue\", this.PointFValue); } } デシリアライズの例。 public SerializeClass(SerializationInfo info, StreamingContext context) { // シリアル化情報から値を逆シリアル化された値を取得・設定する using (SerializationInfoHelper helper = new SerializationInfoHelper(info)) { try { m_SingleValues = helper.GetSingleArray(\"SingleValues\"); } catch { // 例外処理 (シリアライズデータにないと判断して既定値を設定する) m_SingleValues = null; } } } Constructors SerializationInfoHelper(SerializationInfo) SerializationInfoHelper クラスの新しいインスタンスを作成します。 public SerializationInfoHelper(SerializationInfo info) Parameters info SerializationInfo Properties Info シリアライズ情報保存オブジェクトを取得または設定します。 public SerializationInfo Info { get; } Property Value SerializationInfo シリアライズ情報保存オブジェクト。 Methods AddValue(string, bool[]) SerializationInfo に bool の配列を追加します。 public void AddValue(string name, bool[] values) Parameters name string 後から逆シリアル化できるように、値に関連付けておく名前。 values bool[] シリアル化する bool 型の配列。 AddValue(string, ArrayList) SerializationInfo に ArrayList を追加します。 public void AddValue(string name, ArrayList values) Parameters name string 後から逆シリアル化できるように、値に関連付けておく名前。 values ArrayList シリアル化する ArrayList Remarks このメソッドは現在サポートしていません。 AddValue(string, HybridDictionary) SerializationInfo に HybridDictionary を追加します。 public void AddValue(string name, HybridDictionary values) Parameters name string 後から逆シリアル化できるように、値に関連付けておく名前。 values HybridDictionary シリアル化する bool 型の配列。 Remarks このメソッドは現在サポートしていません。 AddValue(string, Color) SerializationInfo に Color を追加します。 public void AddValue(string name, Color value) Parameters name string 後から逆シリアル化できるように、値に関連付けておく名前。 value Color シリアル化する Color 型の値。 AddValue(string, Color[]) SerializationInfo に Color の配列を追加します。 public void AddValue(string name, Color[] values) Parameters name string 後から逆シリアル化できるように、値に関連付けておく名前。 values Color[] シリアル化する Color 型の配列。 AddValue(string, Blend) SerializationInfo に Blend を追加します。 public void AddValue(string name, Blend value) Parameters name string 後から逆シリアル化できるように、値に関連付けておく名前。 value Blend シリアル化する Blend 型の値。 AddValue(string, ColorBlend) SerializationInfo に ColorBlend を追加します。 public void AddValue(string name, ColorBlend value) Parameters name string 後から逆シリアル化できるように、値に関連付けておく名前。 value ColorBlend シリアル化する ColorBlend 型の値。 AddValue(string, PointF) SerializationInfo に PointF を追加します。 public void AddValue(string name, PointF value) Parameters name string 後から逆シリアル化できるように、値に関連付けておく名前。 value PointF シリアル化する PointF 型の値。 AddValue(string, PointF[]) SerializationInfo に PointF の配列を追加します。 public void AddValue(string name, PointF[] values) Parameters name string 後から逆シリアル化できるように、値に関連付けておく名前。 values PointF[] シリアル化する PointF 型の配列。 AddValue(string, RectangleF) SerializationInfo に RectangleF を追加します。 public void AddValue(string name, RectangleF value) Parameters name string 後から逆シリアル化できるように、値に関連付けておく名前。 value RectangleF シリアル化する RectangleF 型の値。 AddValue(string, SizeF) SerializationInfo に SizeF を追加します。 public void AddValue(string name, SizeF value) Parameters name string 後から逆シリアル化できるように、値に関連付けておく名前。 value SizeF シリアル化する SizeF 型の値。 AddValue(string, float[]) SerializationInfo に単精度浮動小数点値の配列を追加します。 public void AddValue(string name, float[] values) Parameters name string 後から逆シリアル化できるように、値に関連付けておく名前。 values float[] シリアル化する float 型の値。 Dispose() この SerializationInfoHelper オブジェクトによって使用されているすべてのリソースを解放します。 public void Dispose() GetArrayList(string) SerializationInfo から ArrayList を取得します。 public ArrayList GetArrayList(string name) Parameters name string 取得する値の名前。 Returns ArrayList name に関連付けられた ArrayList Remarks このメソッドは現在サポートしていません。 GetBlend(string) SerializationInfo から Blend を取得します。 public Blend GetBlend(string name) Parameters name string 取得する値の名前。 Returns Blend name に関連付けられた Blend 。 GetBooleanArray(string) SerializationInfo から bool の配列を取得します。 public bool[] GetBooleanArray(string name) Parameters name string 取得する値の名前。 Returns bool[] name に関連付けられた bool の配列。 GetColor(string) SerializationInfo から Color を取得します。 public Color GetColor(string name) Parameters name string 取得する値の名前。 Returns Color name に関連付けられた Color 。 GetColorArray(string) SerializationInfo から Color の配列を取得します。 public Color[] GetColorArray(string name) Parameters name string 取得する値の名前。 Returns Color[] name に関連付けられた Color の配列。 GetColorBlend(string) SerializationInfo から ColorBlend を取得します。 public ColorBlend GetColorBlend(string name) Parameters name string 取得する値の名前。 Returns ColorBlend name に関連付けられた ColorBlend 。 GetHybridDictionary(string) SerializationInfo から HybridDictionary を取得します。 public HybridDictionary GetHybridDictionary(string name) Parameters name string 取得する値の名前。 Returns HybridDictionary name に関連付けられたm_info.GetValue(name + string.Format(\"-{0}\", index),typeof(object)); HybridDictionary 。 Remarks このメソッドは現在サポートしていません。 GetPointF(string) SerializationInfo から PointF を取得します。 public PointF GetPointF(string name) Parameters name string 取得する値の名前。 Returns PointF name に関連付けられた PointF 。 GetPointFArray(string) SerializationInfo から PointF の配列を取得します。 public PointF[] GetPointFArray(string name) Parameters name string 取得する値の名前。 Returns PointF[] name に関連付けられた PointF の配列。 GetRectangleF(string) SerializationInfo から RectangleF を取得します。 public RectangleF GetRectangleF(string name) Parameters name string 取得する値の名前。 Returns RectangleF name に関連付けられた RectangleF 。 GetSingleArray(string) SerializationInfo から単精度浮動小数点値の配列を取得します。 public float[] GetSingleArray(string name) Parameters name string 取得する値の名前。 Returns float[] name に関連付けられた単精度浮動小数点値の配列。 GetSizeF(string) SerializationInfo から SizeF を取得します。 public SizeF GetSizeF(string name) Parameters name string 取得する値の名前。 Returns SizeF name に関連付けられた SizeF 。"
  },
  "api/MapQuest.Serialization.html": {
    "href": "api/MapQuest.Serialization.html",
    "title": "Namespace MapQuest.Serialization | mysite",
    "keywords": "Namespace MapQuest.Serialization Classes SerializationBinderFactory 過去のバージョンのアセンブリでシリアライズされたデータを 最新のアセンブリでデシリアライズするための SerializationBinder を生成するファクトリクラスです。 SerializationInfoHelper SerializationInfo がサポートしていない型のデータを分解して保持します。 SerializationInfoHelper は SerializationInfo の ラッパーです。実際のデータの保持は SerializationInfo が対応します。"
  },
  "api/MapQuest.Utilities.CoreUtilitiesException.html": {
    "href": "api/MapQuest.Utilities.CoreUtilitiesException.html",
    "title": "Class CoreUtilitiesException | mysite",
    "keywords": "Class CoreUtilitiesException Namespace MapQuest.Utilities Assembly MapQuest.Core.dll MapQuest.Utilities 名前空間で発生した例外を示すクラスです。 public class CoreUtilitiesException : CoreException Inheritance object CoreException CoreUtilitiesException Constructors CoreUtilitiesException() パラメータを指定しないでインスタンスを初期化します。 public CoreUtilitiesException() CoreUtilitiesException(int, Exception, params object[]) リソースID、例外の原因となった例外、例外のパラメータ群 を指定してインスタンスを初期化します。 public CoreUtilitiesException(int exceptionID, Exception inner, params object[] args) Parameters exceptionID int リソースに格納されているエラーメッセージの ID 。 inner Exception 例外の原因となった Exception 。 args object[] 例外のパラメータ群。 CoreUtilitiesException(int, params object[]) リソースID、例外のパラメータ群 を指定してインスタンスを初期化します。 public CoreUtilitiesException(int exceptionID, params object[] args) Parameters exceptionID int リソースに格納されているエラーメッセージの ID 。 args object[] 例外のパラメータ群。 CoreUtilitiesException(SerializationInfo, StreamingContext) デシリアライズの際に使用されるコンストラクタです。 protected CoreUtilitiesException(SerializationInfo info, StreamingContext context) Parameters info SerializationInfo 新しいインスタンスをシリアル化するために必要な情報を格納する SerializationInfo 。 context StreamingContext 新しいインスタンスに関連付けられているシリアル化ストリームのソースを格納する StreamingContext 。 CoreUtilitiesException(string) エラーメッセージを指定してインスタンスを初期化します。 public CoreUtilitiesException(string message) Parameters message string 例外のメッセージ。 CoreUtilitiesException(string, Exception) エラーメッセージと「この例外の原因である例外」を指定してインスタンスを初期化します。 public CoreUtilitiesException(string message, Exception inner) Parameters message string 例外のメッセージ。 inner Exception 現在の例外の原因である例外。 CoreUtilitiesException(string, int) 接頭辞とリソースID を指定してインスタンスを初期化します。 protected CoreUtilitiesException(string prefix, int exceptionID) Parameters prefix string 例外の接頭辞。 exceptionID int リソースに格納されているエラーメッセージの ID 。 CoreUtilitiesException(string, int, Exception) 接頭辞とリソースID、例外の原因となった例外を指定してインスタンスを初期化します。 protected CoreUtilitiesException(string prefix, int exceptionID, Exception inner) Parameters prefix string 例外の接頭辞。 exceptionID int リソースに格納されているエラーメッセージの ID 。 inner Exception 例外の原因となった Exception 。 CoreUtilitiesException(string, int, Exception, params object[]) 接頭辞とリソースID、例外のパラメータ群、例外の原因となった例外 を指定してインスタンスを初期化します。 protected CoreUtilitiesException(string prefix, int exceptionID, Exception inner, params object[] args) Parameters prefix string 例外の接頭辞。 exceptionID int リソースに格納されているエラーメッセージの ID 。 inner Exception 例外の原因となった Exception 。 args object[] 例外のパラメータ群。 CoreUtilitiesException(string, int, params object[]) 接頭辞とリソースID、例外のパラメータ群を指定してインスタンスを初期化します。 protected CoreUtilitiesException(string prefix, int exceptionID, params object[] args) Parameters prefix string 例外の接頭辞。 exceptionID int リソースに格納されているエラーメッセージの ID 。 args object[] 例外のパラメータ群。"
  },
  "api/MapQuest.Utilities.MathUtil.html": {
    "href": "api/MapQuest.Utilities.MathUtil.html",
    "title": "Class MathUtil | mysite",
    "keywords": "Class MathUtil Namespace MapQuest.Utilities Assembly MapQuest.Core.dll Math 名前空間では提供されない、 数学関係の便利なユーティリティ関数を提供します。 public class MathUtil Inheritance object MathUtil Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors MathUtil() public MathUtil() Methods DegreeAdd(double, double) 角度の足し算を行います。 public static double DegreeAdd(double degree, double add) Parameters degree double 足される基となる角度(度)。 add double 足す値(度)。 Returns double 足し算の結果。必ず 0 ～ 360 の範囲の値になります。 Remarks このメソッドは、角度値は 0 ～ 360 の範囲である事を考慮して加算を行います。 例えば、340 + 30 は、通常は 370 ですが、このメソッドの結果は、 10 になります。 DigitCeiling(double, int) 指定された小数点以下の桁数となるように数値を切り上げます public static double DigitCeiling(double value, int digit) Parameters value double digit int Returns double DigitFloor(double, int) 指定された小数点以下の桁数となるように数値を切り捨てます public static double DigitFloor(double value, int digit) Parameters value double digit int Returns double Max(params double[]) 指定された数値のリストの中で最大のものを返します。 public static double Max(params double[] values) Parameters values double[] 数値のリスト。 Returns double values の中で最大の値。 Remarks System.Math.Max() では 2 つの数値しか指定できませんが、この関数は、3 つ以上の数値を 指定する事が可能です。 Min(params double[]) 指定された数値のリストの中で最小のものを返します。 public static double Min(params double[] values) Parameters values double[] 数値のリスト。 Returns double values の中で最小の値。 Remarks System.Math.Min() では 2 つの数値しか指定できませんが、この関数は、3 つ以上の数値を 指定する事が可能です。 NormalizeDegree(ref double) 角度の値を正規化します。 public static void NormalizeDegree(ref double degree) Parameters degree double [IN/OUT]角度値。 Remarks 角度の値（度）がマイナスの値、0～360の範囲外の値を、正しく 0～360 の範囲 に納めるようにします。 例) ・390 → 30 ・-30 → 330"
  },
  "api/MapQuest.Utilities.ObjectConverter.html": {
    "href": "api/MapQuest.Utilities.ObjectConverter.html",
    "title": "Class ObjectConverter | mysite",
    "keywords": "Class ObjectConverter Namespace MapQuest.Utilities Assembly MapQuest.Core.dll public class ObjectConverter Inheritance object ObjectConverter Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors ObjectConverter() public ObjectConverter() Methods GetDouble(object, double) 指定されたオブジェクトを double 型に変換します。 変換できない場合は defaultValue で指定された値を返します。 public static double GetDouble(object value, double defaultValue) Parameters value object 変換するオブジェクト defaultValue double 変換できなかった場合に返される値 Returns double GetDouble(object, double, out double) public static bool GetDouble(object value, double defaultValue, out double result) Parameters value object defaultValue double result double Returns bool GetInt16(object, short, out short) public static bool GetInt16(object value, short defaultValue, out short result) Parameters value object defaultValue short result short Returns bool GetInt32(object, short) 指定されたオブジェクトを short 型に変換します。 変換できない場合は defaultValue で指定された値を返します。 public static short GetInt32(object value, short defaultValue) Parameters value object 変換するオブジェクト defaultValue short 変換できなかった場合に返される値 Returns short GetInt32(object, int) 指定されたオブジェクトを int 型に変換します。 変換できない場合は defaultValue で指定された値を返します。 public static int GetInt32(object value, int defaultValue) Parameters value object 変換するオブジェクト defaultValue int 変換できなかった場合に返される値 Returns int GetInt32(object, int, out int) public static bool GetInt32(object value, int defaultValue, out int result) Parameters value object defaultValue int result int Returns bool GetString(object, string) 指定されたオブジェクトを string 型に変換します。 変換できない場合は defaultValue で指定された値を返します。 public static string GetString(object value, string defaultValue) Parameters value object 変換するオブジェクト defaultValue string 変換できなかった場合に返される値 Returns string GetString(object, string, out string) public static bool GetString(object value, string defaultValue, out string result) Parameters value object defaultValue string result string Returns bool"
  },
  "api/MapQuest.Utilities.StringUtil.html": {
    "href": "api/MapQuest.Utilities.StringUtil.html",
    "title": "Class StringUtil | mysite",
    "keywords": "Class StringUtil Namespace MapQuest.Utilities Assembly MapQuest.Core.dll 文字列操作に関する便利な機能を集めたクラスです。 public sealed class StringUtil Inheritance object StringUtil Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() Methods CsvRecordBuilder(string[]) フィールドの配列からCSV形式の1レコード分の文字列を生成します。 public static string CsvRecordBuilder(string[] fieldArray) Parameters fieldArray string[] フィールドの配列。 Returns string 生成されたCSV形式の1レコード分の文字列。 Remarks string型の配列をカンマでつなげます。 もしも各string中にカンマが入っている場合はダブルコーテーションで文字列全体を囲み、 ダブルコーテーション自体が入っている場合は、ダブルコーテーションを2つ出力してエスケープします。 CultureAwareCompare(string, string) 全角や半角などを考慮せずに文字列を比較します。 public static int CultureAwareCompare(string stringA, string stringB) Parameters stringA string 比較対象の文字列A。 stringB string 比較対象の文字列B。 Returns int 一致する場合は 0 。一致しない場合はそれ以外の値を返します。 IsSameString(string, string) 全角や半角などを考慮せずに文字列を比較します。 public static bool IsSameString(string stringA, string stringB) Parameters stringA string 比較対象の文字列A。 stringB string 比較対象の文字列B。 Returns bool 一致した場合は true 。不一致だと false を返します。"
  },
  "api/MapQuest.Utilities.UnitConverter.html": {
    "href": "api/MapQuest.Utilities.UnitConverter.html",
    "title": "Class UnitConverter | mysite",
    "keywords": "Class UnitConverter Namespace MapQuest.Utilities Assembly MapQuest.Core.dll メートルやインチなどの単位に解像度を反映させてピクセルの単位を求めたり、その逆を行うための単位換算用クラスです。 public sealed class UnitConverter Inheritance object UnitConverter Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() Fields MILLIMETER_PER_CENTIMETER 1 センチ あたりの ミリメートル サイズ [mm/cm] 。 public const double MILLIMETER_PER_CENTIMETER = 10 Field Value double MILLIMETER_PER_INCHI 1 インチ あたりの ミリメートル サイズ [mm/inchi] 。 public const double MILLIMETER_PER_INCHI = 25.4 Field Value double MILLIMETER_PER_METER 1 メートル あたりの ミリメートル サイズ [mm/m] 。 public const double MILLIMETER_PER_METER = 1000 Field Value double POINT_PER_INCHI 1 インチ あたりの ポイント サイズ [pt/inchi] 。 public const double POINT_PER_INCHI = 72 Field Value double Methods CentimeterToPixel(double, double) 単位がセンチメートルの値に解像度を反映させて、ピクセルとして換算します。 public static double CentimeterToPixel(double fromValue, double dpi) Parameters fromValue double ピクセルに換算したい値 [cm]。 dpi double 解像度 [dpi]。 Returns double ピクセルに換算された値 [pixel]。 InchToPixel(double, double) 単位がインチの値に解像度を反映させて、ピクセルとして換算します。 public static double InchToPixel(double fromValue, double dpi) Parameters fromValue double ピクセルに換算したい値 [inchi]。 dpi double 解像度 [dpi]。 Returns double ピクセルに換算された値 [pixel]。 MeterToPixel(double, double) 単位がメートルの値に解像度を反映させて、ピクセルとして換算します。 public static double MeterToPixel(double fromValue, double dpi) Parameters fromValue double ピクセルに換算したい値 [m]。 dpi double 解像度 [dpi]。 Returns double ピクセルに換算された値 [pixel]。 MillimeterToPixel(double, double) 単位がミリメートルの値に解像度を反映させて、ピクセルとして換算します。 public static double MillimeterToPixel(double fromValue, double dpi) Parameters fromValue double ピクセルに換算したい値 [mm]。 dpi double 解像度 [dpi]。 Returns double ピクセルに換算された値 [pixel]。 PixelToCentimeter(double, double) 単位がピクセルの値に解像度を反映させて、センチメートルとして換算します。 public static double PixelToCentimeter(double fromValue, double dpi) Parameters fromValue double センチメートルに換算したい値 [pixel]。 dpi double 解像度 [dpi]。 Returns double センチメートルに換算された値 [cm]。 Remarks 解像度として 0 を与えると、+∞または、-∞になります。 PixelToInch(double, double) 単位がピクセルの値に解像度を反映させて、インチとして換算します。 public static double PixelToInch(double fromValue, double dpi) Parameters fromValue double インチに換算したい値 [pixel]。 dpi double 解像度 [dpi]。 Returns double インチに換算された値 [inchi]。 Remarks 解像度として 0 を与えると、+∞または、-∞になります。 PixelToMeter(double, double) 単位がピクセルの値に解像度を反映させて、メートルとして換算します。 public static double PixelToMeter(double fromValue, double dpi) Parameters fromValue double メートルに換算したい値 [pixel]。 dpi double 解像度 [dpi]。 Returns double メートルに換算された値 [m]。 Remarks 解像度として 0 を与えると、+∞または、-∞になります。 PixelToMillimeter(double, double) 単位がピクセルの値に解像度を反映させて、ミリメートルとして換算します。 public static double PixelToMillimeter(double fromValue, double dpi) Parameters fromValue double ミリメートルに換算したい値 [pixel]。 dpi double 解像度 [dpi]。 Returns double ミリメートルに換算された値 [mm]。 Remarks 解像度として 0 を与えると、+∞または、-∞になります。 PixelToPoint(double, double) 単位がピクセルの値に解像度を反映させて、ポイントとして換算します。 public static double PixelToPoint(double fromValue, double dpi) Parameters fromValue double ポイントに換算したい値 [pixel]。 dpi double 解像度 [dpi]。 Returns double ポイントに換算された値 [pt]。 Remarks 解像度として 0 を与えると、+∞または、-∞になります。 PointToPixel(double, double) 単位がポイントの値に解像度を反映させて、ピクセルとして換算します。 public static double PointToPixel(double fromValue, double dpi) Parameters fromValue double ピクセルに換算したい値 [pt]。 dpi double 解像度 [dpi]。 Returns double ピクセルに換算された値 [pixel]。"
  },
  "api/MapQuest.Utilities.html": {
    "href": "api/MapQuest.Utilities.html",
    "title": "Namespace MapQuest.Utilities | mysite",
    "keywords": "Namespace MapQuest.Utilities Classes CoreUtilitiesException MapQuest.Utilities 名前空間で発生した例外を示すクラスです。 MathUtil Math 名前空間では提供されない、 数学関係の便利なユーティリティ関数を提供します。 ObjectConverter StringUtil 文字列操作に関する便利な機能を集めたクラスです。 UnitConverter メートルやインチなどの単位に解像度を反映させてピクセルの単位を求めたり、その逆を行うための単位換算用クラスです。"
  },
  "api/MapQuest.WebApi.IAuthManager.html": {
    "href": "api/MapQuest.WebApi.IAuthManager.html",
    "title": "Interface IAuthManager | mysite",
    "keywords": "Interface IAuthManager Namespace MapQuest.WebApi Assembly MapQuest.Core.dll Web API 認証を管理するためのインターフェースです。 public interface IAuthManager : IDisposable Inherited Members IDisposable.Dispose() Remarks IDisposableを継承しリソースを解放し、必要に応じてログアウト処理を行います。 Methods ApplyAuthentication(HttpRequestMessage) 指定された HttpRequestMessage に認証情報を適用し、認証済みのリクエストを返します。 HttpRequestMessage ApplyAuthentication(HttpRequestMessage request) Parameters request HttpRequestMessage 認証を適用したい System.Net.Http.HttpRequestMessage。 Returns HttpRequestMessage 認証情報が適用された System.Net.Http.HttpRequestMessage。"
  },
  "api/MapQuest.WebApi.WebApiClient.html": {
    "href": "api/MapQuest.WebApi.WebApiClient.html",
    "title": "Class WebApiClient | mysite",
    "keywords": "Class WebApiClient Namespace MapQuest.WebApi Assembly MapQuest.Core.dll Web API との通信を管理するための抽象クラスです。 public abstract class WebApiClient Inheritance object WebApiClient Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks HTTP リクエストの送信と応答の処理をします。 成功した場合、内容をWebApiResponse<T>のジェネリッククラスとしてデシリアライズします。 Constructors WebApiClient() WebApiClient クラスの新規インスタンスを初期化します。 protected WebApiClient() Properties EndPoint 対象 Web API のエンドポイントを取得します。 protected abstract string EndPoint { get; } Property Value string Methods HandleResponseAsync<T>(HttpResponseMessage) 受け取った HttpResponseMessage を解析し、適切な型の API レスポンスクラスにデシリアライズして返します。 protected virtual Task<WebApiResponse<T>> HandleResponseAsync<T>(HttpResponseMessage response) Parameters response HttpResponseMessage 解析する HTTP レスポンス Returns Task<WebApiResponse<T>> デシリアライズしたレスポンスクラス Type Parameters T API レスポンスの型 SendRequestAsync(HttpRequestMessage) 指定された HttpRequestMessage を非同期に送信し、結果の HttpResponseMessage を返します。 protected virtual Task<HttpResponseMessage> SendRequestAsync(HttpRequestMessage request) Parameters request HttpRequestMessage 送信する HTTP リクエスト Returns Task<HttpResponseMessage> 取得した HTTP レスポンス"
  },
  "api/MapQuest.WebApi.WebApiResponse-1.html": {
    "href": "api/MapQuest.WebApi.WebApiResponse-1.html",
    "title": "Class WebApiResponse<T> | mysite",
    "keywords": "Class WebApiResponse<T> Namespace MapQuest.WebApi Assembly MapQuest.Core.dll Web API の応答を表すジェネリック基底クラスです。 public class WebApiResponse<T> Type Parameters T 応答の内容の型クラス。 Inheritance object WebApiResponse<T> Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Remarks 応答のステータスコード、メッセージ、タイムスタンプ、および内容を保持します。 Constructors WebApiResponse(int, string, DateTime, T) public WebApiResponse(int statusCode, string message, DateTime timeStamp, T content) Parameters statusCode int message string timeStamp DateTime content T Properties Content HTTP リクエストのレスポンス内容を取得または設定します。 public T Content { get; set; } Property Value T Remarks 型 T はレスポンスの内容に応じて異なります。 Message HTTP リクエストの結果に関するメッセージを取得または設定します。 public string Message { get; set; } Property Value string StatusCode HTTP リクエストのステータスコードを取得または設定します。 public int StatusCode { get; set; } Property Value int TimeStamp HTTP リクエストが実行された時刻を取得または設定します。 public DateTime TimeStamp { get; set; } Property Value DateTime"
  },
  "api/MapQuest.WebApi.html": {
    "href": "api/MapQuest.WebApi.html",
    "title": "Namespace MapQuest.WebApi | mysite",
    "keywords": "Namespace MapQuest.WebApi Classes WebApiClient Web API との通信を管理するための抽象クラスです。 WebApiResponse<T> Web API の応答を表すジェネリック基底クラスです。 Interfaces IAuthManager Web API 認証を管理するためのインターフェースです。"
  },
  "api/MapQuest.html": {
    "href": "api/MapQuest.html",
    "title": "Namespace MapQuest | mysite",
    "keywords": "Namespace MapQuest Classes CoreException MapQuest.Core.dll アセンブリ内で発生した例外を示すクラスです。 ProductInformation 製品情報を示すクラスです。"
  },
  "docs/case1.html": {
    "href": "docs/case1.html",
    "title": "case1 | mysite",
    "keywords": "case1 link test a see @tes_tag"
  },
  "docs/case2.html": {
    "href": "docs/case2.html",
    "title": "case2 | mysite",
    "keywords": "case2"
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | mysite",
    "keywords": "Getting Started"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | mysite",
    "keywords": "Introduction"
  },
  "docs/test1.html": {
    "href": "docs/test1.html",
    "title": "test1 | mysite",
    "keywords": "test1"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | mysite",
    "keywords": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  }
}